{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":298998173,"authorName":"feedyurhed@GMAIL.COM","from":"&quot;feedyurhed@...&quot; &lt;feedyurhed@...&gt;","profile":"jefffhaynes","replyTo":"LIST","senderId":"UkWFw5IYiVWmGnkghbgCgO1beR_gxC3z5nIjU9fYYX2lMm0OB_mQa9sn3ss67g1ykEoWlWNBAycoEMj8g7eMcpgs0Za_9PtHTckbySllBvYNPO3B","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: about the innovation number","postDate":"1245969807","msgId":4716,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRhNDNmZDkyLjFjMDc4ZTBhLjFjNWQuNmM4YUBteC5nb29nbGUuY29tPg=="},"prevInTopic":4715,"nextInTopic":4717,"prevInTime":4715,"nextInTime":4717,"topicId":4711,"numMessagesInTopic":15,"msgSnippet":"a guid is 32 bytes but, you know, close ... Sent from my Verizon Wireless mobile phone ... From: Colin Green  To:","rawEmail":"Return-Path: &lt;feedyurhed@...&gt;\r\nX-Sender: feedyurhed@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 49623 invoked from network); 25 Jun 2009 22:43:53 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m2.grp.sp2.yahoo.com with QMQP; 25 Jun 2009 22:43:53 -0000\r\nX-Received: from unknown (HELO mail-px0-f176.google.com) (209.85.216.176)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Jun 2009 22:43:53 -0000\r\nX-Received: by pxi6 with SMTP id 6so1462852pxi.31\n        for &lt;neat@yahoogroups.com&gt;; Thu, 25 Jun 2009 15:43:31 -0700 (PDT)\r\nX-Received: by 10.142.253.19 with SMTP id a19mr1064915wfi.85.1245969811002;\n        Thu, 25 Jun 2009 15:43:31 -0700 (PDT)\r\nReturn-Path: &lt;feedyurhed@...&gt;\r\nX-Received: from oz.com (vzw-outgoing.oz-service.com [63.236.37.73])\n        by mx.google.com with ESMTPS id 28sm8372967wfg.5.2009.06.25.15.43.29\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Thu, 25 Jun 2009 15:43:30 -0700 (PDT)\r\nMessage-ID: &lt;4a43fd92.1c078e0a.1c5d.6c8a@...&gt;\r\nMIME-Version: 1.0\r\nDate: Thu, 25 Jun 2009 22:43:27 +0000\r\nTo: &lt;neat@yahoogroups.com&gt;,&quot;Colin Green&quot; &lt;colin.green1@...&gt;\r\nContent-Type: TEXT/PLAIN; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;feedyurhed@...&quot; &lt;feedyurhed@...&gt;\r\nReply-To: &quot;feedyurhed@...&quot; &lt;feedyurhed@...&gt;\r\nSubject: Re: [neat] Re: about the innovation number\r\nX-Yahoo-Group-Post: member; u=298998173; y=7muCswA1Qm__XYFqaIMBrEZPPD8oqDucly1gKGcmDYqxjQtvcpQ\r\nX-Yahoo-Profile: jefffhaynes\r\n\r\na guid is 32 bytes but, you know, close\n\n----------\nSent from my Verizon Wi=\r\nreless mobile phone\n\n------Original Message------\nFrom: Colin Green &lt;colin.=\r\ngreen1@...&gt;\nTo: &lt;neat@yahoogroups.com&gt;\nDate: Thu, Jun 25, 11:09 =\r\nPM +0100\nSubject: Re: [neat] Re: about the innovation number\n\nHi,\n\n2009/6/2=\r\n5 Ken Lloyd &lt;kalloyd@...&gt;:\n&gt;\n&gt; Did anyone else find it problematic =\r\nthat the NeuronGeneId was generated\n&gt; just=C2=A0like the InnovationId for t=\r\nhe ConnectionGene?\n\nNot especially but I did decide to use two separate inc=\r\nrementing\ncounters, one for neurons and one for connections. The two types =\r\nof\ngene have their own &#39;ID&#39; space. I think my main motivation was to\npreven=\r\nt the ID space from being exhausted - y&#39;know if some day this\nbecomes distr=\r\nibuted neat and/or running on much faster hardware and/or\nfor long timescal=\r\nes. I like to over engineer shall we say.\n\n\n\n\n&gt; In my implementation, I\n&gt; d=\r\necided to use a GUID for gene identification, and only use the innovation\n&gt;=\r\n number for sequencing (aging)=C2=A0the connection genes - substantially re=\r\nducing\n&gt; the range of the innovation numbers.\n\nWell, a GUID is 4 bytes whic=\r\nh is a bit of overkill (a bit rich given\nmy previous sentence :), also if y=\r\nou use standard approaches of\ngenerating GUID&#39;s they will have some problem=\r\ns.\n\n1) Performance. GUIDs are typically a hash of hardware IDs (network\ncar=\r\nd MAC and other things), current time, and any other source of\nrandomness s=\r\nuch as a background service that measures the interval\nbetween key presses.=\r\n These all sap performance and can also result in\nclusters of very close GU=\r\nIDs if you ask for a few (or many) in a short\ntime period (e.g. within a 50=\r\n/th of a second).\n\n2) The uses of hardware IDs also means you probably are =\r\ngenerating IDs\nwithin a narrow sub-set of all possibke IDs - that is you ge=\r\nt the\noverhead of dealing with 4 bytes without the benefits of more IDs.\nTh=\r\nis also means that GUID clashes might occur - an incrementing value\ngives y=\r\nou efficient utilization of the availablke ID space.\n\nOK on the other hand =\r\na GUID might be a good solution in a distributed\nsetting - you can generate=\r\n a GUID with practical zero chance of\nclashing with GUIDs generated on othe=\r\nr machines. However you still\nneed a central register of all IDs from all m=\r\nachines in order re-use\nIDs correctly when adding new nodes and connections=\r\n.\n\n\n&gt; The search space for identifying=C2=A0identical preexisting connectio=\r\nns is always\n&gt; problematic (due to the time penalty it imposes), even if do=\r\nne=C2=A0efficiently.\n&gt; How about a small=C2=A0static structure similar to=\r\n=C2=A0a=C2=A0step function CPPN (ok, just\n&gt; an array, diagonalized of cours=\r\ne) to take the endpoints of connections=C2=A0as\n&gt; inputs and generate a val=\r\nue (1 or (true)=C2=A0=3D prior exists, 0 =3D it doesn&#39;t).\n&gt; Here, using=C2=\r\n=A0the endpoint GUIDs=C2=A0keeps the array small enough, only=C2=A0encoding=\r\n\n&gt; surviving searchable neurons.\n\nI /think/ you&#39;re effectively describing a=\r\n hashmap that uses the\nconnection endpoints as a key and stores the connect=\r\nion ID as the\nmapped value. This is what sharpneat does, however I think th=\r\ne hashmap\nis discarded after each generation (so we ensure ID use only with=\r\nin a\ngeneration). Sharpneat 2 takes a more pragmatic approach of keeping a\n=\r\npermanent history of innovation IDs keyed by endpoints as before, but\nthe h=\r\nistory length is limited (it&#39;s a hybrid of a circular buffer and\na hashmap)=\r\n so as to prevent it expanding indefinitely and consuming\nall memory and in=\r\ncreasing lookup time.\n\nBTW Coding on V2 will resume shortly - I&#39;ve been bus=\r\ny with moving and\nstuff the last few months. I&#39;ve also been catching up on =\r\nHyperNeat and\nnovelty search papers, so hopefully this help me design the c=\r\node to\nassist in these research directions.\n\nColin.\n\n\n"}}