{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175530192,"authorName":"Rob Marsden","from":"Rob Marsden &lt;rob@...&gt;","profile":"rmarsdena","replyTo":"LIST","senderId":"a1N-w06FcY_r363xzSX6syIKE-njifx4c_YENlqoNPsSvrtb0444UZOY5r82SkAzDhyowKyo_NWkS9w80CC81KT7ew","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Using NEAT on large datasets","postDate":"1294923929","msgId":5450,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDREMkVGODk5LjQwODAxMDBAZ2lzdGl4LmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":5449,"nextInTime":5451,"topicId":5450,"numMessagesInTopic":1,"msgSnippet":"I am using the C++ NEAT code that is part of HyperNEAT v3.29.10. Many of my datasets are quite large. My current data has 10 inputs, with 1 output but 400,000","rawEmail":"Return-Path: &lt;rob@...&gt;\r\nX-Sender: rob@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 95089 invoked from network); 13 Jan 2011 13:05:40 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 13 Jan 2011 13:05:40 -0000\r\nX-Received: from unknown (HELO gisti-46062-001.dsvr.co.uk) (212.69.198.226)\n  by mta3.grp.sp2.yahoo.com with SMTP; 13 Jan 2011 13:05:39 -0000\r\nX-Received: from [62.3.122.222] (helo=[192.168.1.7])\n\tby gisti-46062-001.dsvr.co.uk with esmtpa (Exim 4.69)\n\t(envelope-from &lt;rob@...&gt;)\n\tid 1PdMrz-0003aW-6D; Thu, 13 Jan 2011 13:05:39 +0000\r\nMessage-ID: &lt;4D2EF899.4080100@...&gt;\r\nDate: Thu, 13 Jan 2011 13:05:29 +0000\r\nOrganization: Gistix (Northern) Limited\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.2.13) Gecko/20101207 Thunderbird/3.1.7\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: Rob Marsden &lt;rob@...&gt;\r\nSubject: Using NEAT on large datasets\r\nX-Yahoo-Group-Post: member; u=175530192; y=zspwGGHlLaBDHMPQ0n-Tm9QD7gwqoaWsio5AtJnKBhAzQnR2\r\nX-Yahoo-Profile: rmarsdena\r\n\r\nI am using the C++ NEAT code that is part of HyperNEAT v3.29.10. Many of \nmy datasets are quite large. My current data has 10 inputs, with 1 \noutput but 400,000 data samples. Some sets are much larger. The result \nis that, training populations of around a 100, it can be quite slow. \nWatching paint dry, comes to mind :-)\n\nIt occurred to me, that part of my performance problem, may be my lack \nof familiarity with the system. For example, I&#39;m presenting data to the \nFastNetwork, by looking up the input node names for each sample.\n\nAs a result of this navel gazing. I have made a slight change, by adding \na new function to FastNetwork&lt;Type&gt; as follows:\n\n//  Get address of node data value, for data injection\ntemplate&lt;class Type&gt;\nType *FastNetwork&lt;Type&gt;::getValuePtr(const string &nodeName)\n{   if (!nodeNameToIndex.count(nodeName))\n     {   cout &lt;&lt; &quot;ERROR: Could not find node named &quot; &lt;&lt; nodeName &lt;&lt; endl;\n         throw (string(&quot;ERROR: Could not find node named &quot;) +\n                string(nodeName) + string(&quot;&#92;n&quot;));\n     }\n     else\n     {   return(&nodeValues[nodeNameToIndex[nodeName]]);\n     }\n}\n\nI use this immediately after spawning the network, to build a vector of \npointers to the network inputs (also for the output). Doing this enables \nme to inject the input data without doing the name look ups at every \ndata sample.\n\nThis seems to produce a modest improvement in performance. I may be \n&quot;teaching my grandmother to suck eggs&quot;, but I thought I&#39;d pass it on \nshould it be of value to anyone.\n\n\n-- \nRob Marsden\nGistix (Northern) Limited\n\n"}}