{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":200957992,"authorName":"Jason Gauci","from":"Jason Gauci &lt;jgmath2000@...&gt;","profile":"jgmath2000","replyTo":"LIST","senderId":"-XeohGzIlBeXL9d5kpMEi-6V_eDPWBrf4mkszNHilRKTJUC_-L9lSy1zquyzHKTl8uPeF9UZZlOZBF-8_tQp2VOafhBuqt6DFQ","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [neat] Re: Hyperneat Network Output Layer All Zero","postDate":"1321926011","msgId":5703,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRUI1NXRYSnFyK0J6c0V0ZlpxRzh0Y3NObkVwSlgzc3VfZUpFalpCU0UzR1J4T0hnUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGphZXJrZyttbDNhQGVHcm91cHMuY29tPg==","referencesHeader":"PDFGRUZCQTUwLTJDNjItNDg3OS1CMTYwLUMyRTlBM0QxMTVDMUBjb3JuZWxsLmVkdT4JPGphZXJrZyttbDNhQGVHcm91cHMuY29tPg=="},"prevInTopic":5702,"nextInTopic":5704,"prevInTime":5702,"nextInTime":5704,"topicId":5699,"numMessagesInTopic":7,"msgSnippet":"In the populatesubstrate function make sure the substrate has some nonzero weights. Are you using the gpu version? On Nov 21, 2011 4:50 PM,","rawEmail":"Return-Path: &lt;jgmath2000@...&gt;\r\nX-Sender: jgmath2000@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 62584 invoked from network); 22 Nov 2011 01:40:11 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.sp2.yahoo.com with QMQP; 22 Nov 2011 01:40:11 -0000\r\nX-Received: from unknown (HELO mail-vx0-f169.google.com) (209.85.220.169)\n  by mta2.grp.sp2.yahoo.com with SMTP; 22 Nov 2011 01:40:11 -0000\r\nX-Received: by mail-vx0-f169.google.com with SMTP id fk26so1565053vcb.28\n        for &lt;neat@yahoogroups.com&gt;; Mon, 21 Nov 2011 17:40:11 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.205.195 with SMTP id fr3mr1171042vcb.211.1321926011044;\n Mon, 21 Nov 2011 17:40:11 -0800 (PST)\r\nX-Received: by 10.52.94.226 with HTTP; Mon, 21 Nov 2011 17:40:11 -0800 (PST)\r\nX-Received: by 10.52.94.226 with HTTP; Mon, 21 Nov 2011 17:40:11 -0800 (PST)\r\nIn-Reply-To: &lt;jaerkg+ml3a@...&gt;\r\nReferences: &lt;1FEFBA50-2C62-4879-B160-C2E9A3D115C1@...&gt;\n\t&lt;jaerkg+ml3a@...&gt;\r\nDate: Mon, 21 Nov 2011 17:40:11 -0800\r\nMessage-ID: &lt;CAEB55tXJqr+BzsEtfZqG8tcsNnEpJX3su_eJEjZBSE3GRxOHgQ@...&gt;\r\nTo: neat@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=14dae9cdc4854ec47b04b248e24d\r\nX-eGroups-Msg-Info: 2:4:8:0:0\r\nFrom: Jason Gauci &lt;jgmath2000@...&gt;\r\nSubject: Re: [neat] Re: Hyperneat Network Output Layer All Zero\r\nX-Yahoo-Group-Post: member; u=200957992; y=WARs3LpFSkfWZtAk1ZyDY_43OKtJCGigL4nsN4N28qQtRep35w\r\nX-Yahoo-Profile: jgmath2000\r\n\r\n\r\n--14dae9cdc4854ec47b04b248e24d\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nIn the populatesubstrate function make sure the substrate has some nonzero\n=\r\nweights.\n\nAre you using the gpu version?\nOn Nov 21, 2011 4:50 PM, &quot;Matthew_=\r\nHausknecht&quot; &lt;matthew_hausknecht@...&gt;\nwrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; Thanks for th=\r\ne suggestions Jeff. In my case I have only one layer of\n&gt; hidden nodes. Whe=\r\nn printing them out for debugging purposes they are all\n&gt; zero after update=\r\n is called (also tried calling update multiple times with\n&gt; no success).\n&gt;\n=\r\n&gt; --- In neat@yahoogroups.com, Jeff Clune &lt;jeffclune@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; He=\r\nllo. Make sure you are doing enough updates of the phenotype neural\n&gt; net t=\r\no propagate the info all the way through the network....for debugging\n&gt; you=\r\n may wish to print out the values of the first hidden layer after one\n&gt; upd=\r\nate...and possibly the values at each hidden layer after each\n&gt; update...so=\r\n you can see what is going on. Or just make sure to have the\n&gt; number of up=\r\ndates be greater than or equal to the number of hidden layers.\n&gt; That might=\r\n not be your issue, but that is a common mistake.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Best regards,=\r\n\n&gt; &gt; Jeff Clune\n&gt; &gt;\n&gt; &gt; Postdoctoral Fellow\n&gt; &gt; Hod Lipson&#39;s Creative Machi=\r\nnes Laboratory\n&gt; &gt; Cornell University\n&gt; &gt; jeffclune@...\n&gt; &gt; jeffclune.com\n&gt;=\r\n &gt;\n&gt; &gt; On Nov 21, 2011, at 5:57 PM, Matthew_Hausknecht wrote:\n&gt; &gt;\n&gt; &gt; &gt; Hi,=\r\n I&#39;m trying to run Hyperneat on a simple Atari game and was\n&gt; starting out =\r\nby replicating some of the experiment examples. My code\n&gt; compiles and runs=\r\n, but the value of the output node in the network always\n&gt; seems to be zero=\r\n. I suspect I am doing something wrong in the\n&gt; initalization/update step, =\r\nbut I&#39;m not sure what... Code is as follows:\n&gt; &gt; &gt;\n&gt; &gt; &gt; #include &quot;HCUBE_De=\r\nfines.h&quot;\n&gt; &gt; &gt;\n&gt; &gt; &gt; #include &quot;Experiments/HCUBE_AtariExperiment.h&quot;\n&gt; &gt; &gt; #=\r\ninclude &lt;boost/foreach.hpp&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; using namespace NEAT;\n&gt; &gt; &gt;\n&gt; &gt; &gt; e=\r\nnum GamePositionValue {\n&gt; &gt; &gt; EMPTY,\n&gt; &gt; &gt; CHICKEN,\n&gt; &gt; &gt; VEHICLE\n&gt; &gt; &gt; };\n=\r\n&gt; &gt; &gt;\n&gt; &gt; &gt; namespace HCUBE\n&gt; &gt; &gt; {\n&gt; &gt; &gt; AtariExperiment::AtariExperiment(=\r\nstring _experimentName,int _threadID):\n&gt; &gt; &gt; Experiment(_experimentName,_th=\r\nreadID)\n&gt; &gt; &gt; {\n&gt; &gt; &gt; layerInfo =3D NEAT::LayeredSubstrateInfo();\n&gt; &gt; &gt; lay=\r\nerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));\n&gt; &gt; &gt; layerInfo.layerIsInpu=\r\nt.push_back(true);\n&gt; &gt; &gt; layerInfo.layerLocations.push_back(Vector3&lt;float&gt;(=\r\n0,0,0));\n&gt; &gt; &gt; layerInfo.layerNames.push_back(&quot;Input&quot;);\n&gt; &gt; &gt;\n&gt; &gt; &gt; layerIn=\r\nfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));\n&gt; &gt; &gt; layerInfo.layerIsInput.pu=\r\nsh_back(false);\n&gt; &gt; &gt; layerInfo.layerLocations.push_back(Vector3&lt;float&gt;(0,4=\r\n,0));\n&gt; &gt; &gt; layerInfo.layerNames.push_back(&quot;Output&quot;);\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; layerIn=\r\nfo.layerAdjacencyList.push_back(std::pair&lt;string,string&gt;(&quot;Input&quot;,&quot;Output&quot;))=\r\n;\n&gt; &gt; &gt;\n&gt; &gt; &gt; layerInfo.normalize =3D true;\n&gt; &gt; &gt; layerInfo.useOldOutputNam=\r\nes =3D false;\n&gt; &gt; &gt; layerInfo.layerValidSizes =3D layerInfo.layerSizes;\n&gt; &gt;=\r\n &gt;\n&gt; &gt; &gt; substrate =3D NEAT::LayeredSubstrate&lt;float&gt;();\n&gt; &gt; &gt; substrate.set=\r\nLayerInfo(layerInfo);\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; &gt; NEAT::GeneticPopulation* AtariExp=\r\neriment::createInitialPopulation(int\n&gt; populationSize) {\n&gt; &gt; &gt; GeneticPopul=\r\nation *population =3D new GeneticPopulation();\n&gt; &gt; &gt; vector&lt;GeneticNodeGene=\r\n&gt; genes;\n&gt; &gt; &gt;\n&gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;Bias&quot;,&quot;NetworkSensor&quot;=\r\n,0,false));\n&gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;X1&quot;,&quot;NetworkSensor&quot;,0,fa=\r\nlse));\n&gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;X2&quot;,&quot;NetworkSensor&quot;,0,false))=\r\n;\n&gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;Y1&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; &gt;=\r\n &gt; genes.push_back(GeneticNodeGene(&quot;Y2&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; &gt; &gt;\n&gt; =\r\ngenes.push_back(GeneticNodeGene(&quot;Output&quot;,&quot;NetworkOutputNode&quot;,1,false,ACTIVA=\r\nTION_FUNCTION_SIGMOID));\n&gt; &gt; &gt;\n&gt; &gt; &gt; for (int a=3D0;a&lt;populationSize;a++) {=\r\n\n&gt; &gt; &gt; shared_ptr&lt;GeneticIndividual&gt; individual(new\n&gt; GeneticIndividual(gen=\r\nes,true,1.0));\n&gt; &gt; &gt; for (int b=3D0;b&lt;0;b++) {\n&gt; &gt; &gt; individual-&gt;testMutate=\r\n();\n&gt; &gt; &gt; }\n&gt; &gt; &gt; population-&gt;addIndividual(individual);\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; =\r\n&gt; cout &lt;&lt; &quot;Finished creating population&#92;n&quot;;\n&gt; &gt; &gt; return population;\n&gt; &gt; &gt; =\r\n}\n&gt; &gt; &gt;\n&gt; &gt; &gt; void\n&gt; AtariExperiment::populateSubstrate(shared_ptr&lt;NEAT::Ge=\r\nneticIndividual&gt;\n&gt; individual) {\n&gt; &gt; &gt; if (currentSubstrateIndividual =3D=\r\n=3D individual)\n&gt; &gt; &gt; return;\n&gt; &gt; &gt;\n&gt; &gt; &gt; currentSubstrateIndividual =3D in=\r\ndividual;\n&gt; &gt; &gt; substrate.populateSubstrate(individual);\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; =\r\n&gt; void AtariExperiment::processGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt;\n&gt; =\r\ngeneration)\n&gt; &gt; &gt; {\n&gt; &gt; &gt; shared_ptr&lt;NEAT::GeneticIndividual&gt; individual =\r\n=3D group.front();\n&gt; &gt; &gt; //You get 10 points just for being processed, waho=\r\noo!\n&gt; &gt; &gt; individual-&gt;setFitness(10);\n&gt; &gt; &gt; populateSubstrate(individual);\n=\r\n&gt; &gt; &gt; runAtariEpisode(individual);\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; &gt; void\n&gt; AtariExperime=\r\nnt::runAtariEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt;\n&gt; individual) {\n&gt; &gt;=\r\n &gt; GamePositionValue gameState[8][8];\n&gt; &gt; &gt;\n&gt; &gt; &gt; int chic_x =3D 4, chic_y =\r\n=3D 7;\n&gt; &gt; &gt; float total_reward =3D 0.0;\n&gt; &gt; &gt;\n&gt; &gt; &gt; // Initialize Game\n&gt; &gt;=\r\n &gt; for (int x=3D0;x&lt;8;x++) {\n&gt; &gt; &gt; for (int y=3D0;y&lt;8;y++) {\n&gt; &gt; &gt; gameStat=\r\ne[x][y] =3D EMPTY;\n&gt; &gt; &gt; }\n&gt; &gt; &gt; }\n&gt; &gt; &gt; gameState[chic_x][chic_y] =3D CHIC=\r\nKEN;\n&gt; &gt; &gt;\n&gt; &gt; &gt; // Run simulation for t timesteps\n&gt; &gt; &gt; int num_timesteps =\r\n=3D 10;\n&gt; &gt; &gt; for (int t=3D0; t&lt;num_timesteps; t++) {\n&gt; &gt; &gt; substrate.getNe=\r\ntwork()-&gt;reinitialize();\n&gt; &gt; &gt; substrate.getNetwork()-&gt;dummyActivation();\n&gt;=\r\n &gt; &gt;\n&gt; &gt; &gt; // Set substrate values\n&gt; &gt; &gt; for (int x=3D0; x&lt;8; ++x) {\n&gt; &gt; &gt; =\r\nfor (int y=3D0; y&lt;8; ++y) {\n&gt; &gt; &gt; // if (gameState[x][y] =3D=3D CHICKEN) {\n=\r\n&gt; &gt; &gt; // substrate.setValue((Node(x,y,0)), 1.0);\n&gt; &gt; &gt; // } else if (gameSt=\r\nate[x][y] =3D=3D VEHICLE) {\n&gt; &gt; &gt; // substrate.setValue((Node(x,y,0)), -1.0=\r\n);\n&gt; &gt; &gt; // } else {\n&gt; &gt; &gt; // substrate.setValue((Node(x,y,0)), 0.0);\n&gt; &gt; &gt;=\r\n // }\n&gt; &gt; &gt; substrate.setValue((Node(x,y,0)), (float)((7.0-y)/7.0));\n&gt; &gt; &gt; =\r\n}\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; &gt; substrate.getNetwork()-&gt;update();\n&gt; &gt; &gt;\n&gt; &gt; &gt; for (in=\r\nt x=3D0; x&lt;8; ++x) {\n&gt; &gt; &gt; for (int y=3D0; y&lt;8; ++y) {\n&gt; &gt; &gt; float val =3D =\r\nsubstrate.getValue((Node(x,y,1)));\n&gt; &gt; &gt; if (val !=3D 0)\n&gt; &gt; &gt; printf(&quot;Got =\r\nNonzero val %f at %d,%d&#92;n&quot;,val,x,y);\n&gt; &gt; &gt; }\n&gt; &gt; &gt; }\n&gt; &gt; &gt; float chicken_va=\r\nl =3D substrate.getValue((Node(chic_x,chic_y,1)));\n&gt; &gt; &gt; float down_val =3D=\r\n (chic_y =3D=3D 7) ? chicken_val :\n&gt; substrate.getValue((Node(chic_x,chic_y=\r\n+1,1)));\n&gt; &gt; &gt; float up_val =3D (chic_y =3D=3D 0) ? chicken_val :\n&gt; substra=\r\nte.getValue((Node(chic_x,chic_y-1,1)));\n&gt; &gt; &gt;\n&gt; &gt; &gt; int action;\n&gt; &gt; &gt; if (c=\r\nhicken_val &gt;=3D up_val) {\n&gt; &gt; &gt; if (chicken_val &gt;=3D down_val) {\n&gt; &gt; &gt; acti=\r\non =3D 0;\n&gt; &gt; &gt; } else {\n&gt; &gt; &gt; action =3D +1;\n&gt; &gt; &gt; }\n&gt; &gt; &gt; } else {\n&gt; &gt; &gt; =\r\nif (up_val &gt;=3D down_val) {\n&gt; &gt; &gt; action =3D -1;\n&gt; &gt; &gt; } else {\n&gt; &gt; &gt; actio=\r\nn =3D 1;\n&gt; &gt; &gt; }\n&gt; &gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; &gt; // Update game state with action\n&gt; &gt; &gt;=\r\n gameState[chic_x][chic_y] =3D EMPTY;\n&gt; &gt; &gt; gameState[chic_x][chic_y+action=\r\n] =3D CHICKEN;\n&gt; &gt; &gt; chic_y +=3D action;\n&gt; &gt; &gt;\n&gt; &gt; &gt; // Compute reward\n&gt; &gt; =\r\n&gt; if (chic_y =3D=3D 0) {\n&gt; &gt; &gt; total_reward +=3D 1.0;\n&gt; &gt; &gt; // Reset the si=\r\nm\n&gt; &gt; &gt; gameState[chic_x][chic_y] =3D EMPTY;\n&gt; &gt; &gt; gameState[chic_x][7] =3D=\r\n CHICKEN;\n&gt; &gt; &gt; chic_y =3D 7;\n&gt; &gt; &gt; }\n&gt; &gt; &gt; }\n&gt; &gt; &gt; //cout &lt;&lt; &quot;Got total re=\r\nward: &quot; &lt;&lt; total_reward &lt;&lt; endl;\n&gt; &gt; &gt; individual-&gt;reward(total_reward);\n&gt; =\r\n&gt; &gt; }\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n&gt;  \n&gt;\n\r\n--14dae9cdc4854ec47b04b248e24d\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;p&gt;In the populatesubstrate function make sure the substrate has some nonze=\r\nro weights.&lt;/p&gt;\n&lt;p&gt;Are you using the gpu version?&lt;/p&gt;\n&lt;div class=3D&quot;gmail_q=\r\nuote&quot;&gt;On Nov 21, 2011 4:50 PM, &quot;Matthew_Hausknecht&quot; &lt;&lt;a href=\r\n=3D&quot;mailto:matthew_hausknecht@...&quot;&gt;matthew_hausknecht@...&lt;/a&gt;&g=\r\nt; wrote:&lt;br type=3D&quot;attribution&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n&lt;u&gt;&lt;=\r\n/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div=\r\n&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Thanks for the suggestions Jef=\r\nf. In my case I have only one layer of hidden nodes. When printing them out=\r\n for debugging purposes they are all zero after update is called (also trie=\r\nd calling update multiple times with no success). &lt;br&gt;\n\n&lt;br&gt;\n--- In &lt;a href=\r\n=3D&quot;mailto:neat%40yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;neat@yahoogroups.com&lt;/=\r\na&gt;, Jeff Clune &lt;jeffclune@...&gt; wrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Hello. Make s=\r\nure you are doing enough updates of the phenotype neural net to propagate t=\r\nhe info all the way through the network....for debugging you may wish to pr=\r\nint out the values of the first hidden layer after one update...and possibl=\r\ny the values at each hidden layer after each update...so you can see what i=\r\ns going on. Or just make sure to have the number of updates be greater than=\r\n or equal to the number of hidden layers. That might not be your issue, but=\r\n that is a common mistake. &lt;br&gt;\n\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Best regards,&lt;br&gt;=\r\n\n&gt; Jeff Clune&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Postdoctoral Fellow&lt;br&gt;\n&gt; Hod Lipson=\r\n&#39;s Creative Machines Laboratory&lt;br&gt;\n&gt; Cornell University&lt;br&gt;\n&gt; je=\r\nffclune@...&lt;br&gt;\n&gt; &lt;a href=3D&quot;http://jeffclune.com&quot; target=3D&quot;_blank&quot;&gt;jef=\r\nfclune.com&lt;/a&gt;&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; On Nov 21, 2011, at 5:57 PM, Matthew_Haus=\r\nknecht wrote:&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &gt; Hi, I&#39;m trying to run Hyperneat o=\r\nn a simple Atari game and was starting out by replicating some of the exper=\r\niment examples. My code compiles and runs, but the value of the output node=\r\n in the network always seems to be zero. I suspect I am doing something wro=\r\nng in the initalization/update step, but I&#39;m not sure what... Code is a=\r\ns follows:&lt;br&gt;\n\n&gt; &gt; &lt;br&gt;\n&gt; &gt; #include &quot;HCUBE_Defines.h&quo=\r\nt;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; #include &quot;Experiments/HCUBE_AtariExper=\r\niment.h&quot;&lt;br&gt;\n&gt; &gt; #include &lt;boost/foreach.hpp&gt;&lt;br&gt;\n&gt; &gt=\r\n; &lt;br&gt;\n&gt; &gt; using namespace NEAT;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; enum Ga=\r\nmePositionValue {&lt;br&gt;\n&gt; &gt; EMPTY,&lt;br&gt;\n&gt; &gt; CHICKEN,&lt;br&gt;\n&gt; &gt;=\r\n VEHICLE&lt;br&gt;\n&gt; &gt; };&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; namespace HCUBE&lt;br&gt;\n=\r\n&gt; &gt; {&lt;br&gt;\n&gt; &gt; AtariExperiment::AtariExperiment(string _experime=\r\nntName,int _threadID):&lt;br&gt;\n&gt; &gt; Experiment(_experimentName,_threadID)&lt;=\r\nbr&gt;\n&gt; &gt; {&lt;br&gt;\n&gt; &gt; layerInfo =3D NEAT::LayeredSubstrateInfo();&lt;b=\r\nr&gt;\n&gt; &gt; layerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));&lt;br&gt;\n&=\r\ngt; &gt; layerInfo.layerIsInput.push_back(true);&lt;br&gt;\n&gt; &gt; layerInfo.la=\r\nyerLocations.push_back(Vector3&lt;float&gt;(0,0,0));&lt;br&gt;\n&gt; &gt; layerInf=\r\no.layerNames.push_back(&quot;Input&quot;);&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; lay=\r\nerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));&lt;br&gt;\n&gt; &gt; layerIn=\r\nfo.layerIsInput.push_back(false);&lt;br&gt;\n&gt; &gt; layerInfo.layerLocations.pu=\r\nsh_back(Vector3&lt;float&gt;(0,4,0));&lt;br&gt;\n&gt; &gt; layerInfo.layerNames.pu=\r\nsh_back(&quot;Output&quot;);&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; layerInfo.layerAd=\r\njacencyList.push_back(std::pair&lt;string,string&gt;(&quot;Input&quot;,&quo=\r\nt;Output&quot;));&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; layerInfo.normalize =3D true=\r\n;&lt;br&gt;\n&gt; &gt; layerInfo.useOldOutputNames =3D false;&lt;br&gt;\n&gt; &gt; layerI=\r\nnfo.layerValidSizes =3D layerInfo.layerSizes;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; =\r\nsubstrate =3D NEAT::LayeredSubstrate&lt;float&gt;();&lt;br&gt;\n&gt; &gt; substrat=\r\ne.setLayerInfo(layerInfo);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; NEA=\r\nT::GeneticPopulation* AtariExperiment::createInitialPopulation(int populati=\r\nonSize) {&lt;br&gt;\n&gt; &gt; GeneticPopulation *population =3D new GeneticPopula=\r\ntion();&lt;br&gt;\n&gt; &gt; vector&lt;GeneticNodeGene&gt; genes;&lt;br&gt;\n&gt; &gt; &lt;b=\r\nr&gt;\n&gt; &gt; genes.push_back(GeneticNodeGene(&quot;Bias&quot;,&quot;Network=\r\nSensor&quot;,0,false));&lt;br&gt;\n&gt; &gt; genes.push_back(GeneticNodeGene(&quot=\r\n;X1&quot;,&quot;NetworkSensor&quot;,0,false));&lt;br&gt;\n&gt; &gt; genes.push_bac=\r\nk(GeneticNodeGene(&quot;X2&quot;,&quot;NetworkSensor&quot;,0,false));&lt;br&gt;\n&=\r\ngt; &gt; genes.push_back(GeneticNodeGene(&quot;Y1&quot;,&quot;NetworkSensor=\r\n&quot;,0,false));&lt;br&gt;\n&gt; &gt; genes.push_back(GeneticNodeGene(&quot;Y2&qu=\r\not;,&quot;NetworkSensor&quot;,0,false));&lt;br&gt;\n&gt; &gt; genes.push_back(Gene=\r\nticNodeGene(&quot;Output&quot;,&quot;NetworkOutputNode&quot;,1,false,ACTIVA=\r\nTION_FUNCTION_SIGMOID));&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; for (int a=3D0;a&lt;p=\r\nopulationSize;a++) {&lt;br&gt;\n&gt; &gt; shared_ptr&lt;GeneticIndividual&gt; indi=\r\nvidual(new GeneticIndividual(genes,true,1.0));&lt;br&gt;\n&gt; &gt; for (int b=3D0=\r\n;b&lt;0;b++) {&lt;br&gt;\n&gt; &gt; individual-&gt;testMutate();&lt;br&gt;\n&gt; &gt; }&lt;b=\r\nr&gt;\n&gt; &gt; population-&gt;addIndividual(individual);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n=\r\n&gt; &gt; &lt;br&gt;\n&gt; &gt; cout &lt;&lt; &quot;Finished creating population&#92;n=\r\n&quot;;&lt;br&gt;\n&gt; &gt; return population;&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;=\r\n\n&gt; &gt; void AtariExperiment::populateSubstrate(shared_ptr&lt;NEAT::Gene=\r\nticIndividual&gt; individual) {&lt;br&gt;\n&gt; &gt; if (currentSubstrateIndividua=\r\nl =3D=3D individual)&lt;br&gt;\n&gt; &gt; return;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; cur=\r\nrentSubstrateIndividual =3D individual;&lt;br&gt;\n&gt; &gt; substrate.populateSub=\r\nstrate(individual);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; void Atari=\r\nExperiment::processGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt; generati=\r\non)&lt;br&gt;\n&gt; &gt; {&lt;br&gt;\n&gt; &gt; shared_ptr&lt;NEAT::GeneticIndividual&gt;=\r\n individual =3D group.front();&lt;br&gt;\n&gt; &gt; //You get 10 points just for b=\r\neing processed, wahooo!&lt;br&gt;\n&gt; &gt; individual-&gt;setFitness(10);&lt;br&gt;\n&g=\r\nt; &gt; populateSubstrate(individual);&lt;br&gt;\n&gt; &gt; runAtariEpisode(indivi=\r\ndual);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; void AtariExperiment::r=\r\nunAtariEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt; individual) {&lt;br&gt;\n=\r\n&gt; &gt; GamePositionValue gameState[8][8];&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; i=\r\nnt chic_x =3D 4, chic_y =3D 7;&lt;br&gt;\n&gt; &gt; float total_reward =3D 0.0;&lt;br=\r\n&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; // Initialize Game&lt;br&gt;\n&gt; &gt; for (int x=3D0;=\r\nx&lt;8;x++) {&lt;br&gt;\n&gt; &gt; for (int y=3D0;y&lt;8;y++) {&lt;br&gt;\n&gt; &gt; game=\r\nState[x][y] =3D EMPTY;&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; gameSt=\r\nate[chic_x][chic_y] =3D CHICKEN;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; // Run simula=\r\ntion for t timesteps&lt;br&gt;\n&gt; &gt; int num_timesteps =3D 10;&lt;br&gt;\n&gt; &gt; =\r\nfor (int t=3D0; t&lt;num_timesteps; t++) {&lt;br&gt;\n&gt; &gt; substrate.getNetwo=\r\nrk()-&gt;reinitialize();&lt;br&gt;\n&gt; &gt; substrate.getNetwork()-&gt;dummyActi=\r\nvation();&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; // Set substrate values&lt;br&gt;\n&gt; &gt=\r\n; for (int x=3D0; x&lt;8; ++x) {&lt;br&gt;\n&gt; &gt; for (int y=3D0; y&lt;8; ++y)=\r\n {&lt;br&gt;\n&gt; &gt; // if (gameState[x][y] =3D=3D CHICKEN) {&lt;br&gt;\n&gt; &gt; // =\r\nsubstrate.setValue((Node(x,y,0)), 1.0);&lt;br&gt;\n&gt; &gt; // } else if (gameSta=\r\nte[x][y] =3D=3D VEHICLE) {&lt;br&gt;\n&gt; &gt; // substrate.setValue((Node(x,y,0)=\r\n), -1.0); &lt;br&gt;\n&gt; &gt; // } else {&lt;br&gt;\n&gt; &gt; // substrate.setValue((N=\r\node(x,y,0)), 0.0); &lt;br&gt;\n&gt; &gt; // }&lt;br&gt;\n&gt; &gt; substrate.setValue((No=\r\nde(x,y,0)), (float)((7.0-y)/7.0));&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt;=\r\n &gt; &lt;br&gt;\n&gt; &gt; substrate.getNetwork()-&gt;update();&lt;br&gt;\n&gt; &gt; &lt;br=\r\n&gt;\n&gt; &gt; for (int x=3D0; x&lt;8; ++x) {&lt;br&gt;\n&gt; &gt; for (int y=3D0; y&=\r\nlt;8; ++y) {&lt;br&gt;\n&gt; &gt; float val =3D substrate.getValue((Node(x,y,1)));=\r\n&lt;br&gt;\n&gt; &gt; if (val !=3D 0)&lt;br&gt;\n&gt; &gt; printf(&quot;Got Nonzero val %=\r\nf at %d,%d&#92;n&quot;,val,x,y);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; =\r\nfloat chicken_val =3D substrate.getValue((Node(chic_x,chic_y,1)));&lt;br&gt;\n&gt;=\r\n &gt; float down_val =3D (chic_y =3D=3D 7) ? chicken_val : substrate.getVal=\r\nue((Node(chic_x,chic_y+1,1)));&lt;br&gt;\n&gt; &gt; float up_val =3D (chic_y =3D=\r\n=3D 0) ? chicken_val : substrate.getValue((Node(chic_x,chic_y-1,1)));&lt;br&gt;\n&=\r\ngt; &gt; &lt;br&gt;\n&gt; &gt; int action;&lt;br&gt;\n&gt; &gt; if (chicken_val &gt;=3D u=\r\np_val) {&lt;br&gt;\n&gt; &gt; if (chicken_val &gt;=3D down_val) {&lt;br&gt;\n&gt; &gt; ac=\r\ntion =3D 0;&lt;br&gt;\n&gt; &gt; } else {&lt;br&gt;\n&gt; &gt; action =3D +1;&lt;br&gt;\n&gt; &g=\r\nt; }&lt;br&gt;\n&gt; &gt; } else {&lt;br&gt;\n&gt; &gt; if (up_val &gt;=3D down_val) {&lt;br=\r\n&gt;\n&gt; &gt; action =3D -1;&lt;br&gt;\n&gt; &gt; } else {&lt;br&gt;\n&gt; &gt; action =3D =\r\n1;&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; // Update g=\r\name state with action&lt;br&gt;\n&gt; &gt; gameState[chic_x][chic_y] =3D EMPTY;&lt;br=\r\n&gt;\n&gt; &gt; gameState[chic_x][chic_y+action] =3D CHICKEN;&lt;br&gt;\n&gt; &gt; chi=\r\nc_y +=3D action;&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt; // Compute reward&lt;br&gt;\n&gt; &g=\r\nt; if (chic_y =3D=3D 0) {&lt;br&gt;\n&gt; &gt; total_reward +=3D 1.0;&lt;br&gt;\n&gt; &gt=\r\n; // Reset the sim&lt;br&gt;\n&gt; &gt; gameState[chic_x][chic_y] =3D EMPTY;&lt;br&gt;\n&=\r\ngt; &gt; gameState[chic_x][7] =3D CHICKEN;&lt;br&gt;\n&gt; &gt; chic_y =3D 7;&lt;br&gt;\n=\r\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; //cout &lt;&lt; &quot;Got total r=\r\neward: &quot; &lt;&lt; total_reward &lt;&lt; endl;&lt;br&gt;\n&gt; &gt; individual=\r\n-&gt;reward(total_reward);&lt;br&gt;\n&gt; &gt; }&lt;br&gt;\n&gt; &gt; &lt;br&gt;\n&gt; &gt;&lt;br&gt;=\r\n\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;mi=\r\nn-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;\n\r\n--14dae9cdc4854ec47b04b248e24d--\r\n\n"}}