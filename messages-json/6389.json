{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":434634266,"authorName":"Vassilis Vassiliades","from":"Vassilis Vassiliades &lt;vassilisvas@...&gt;","profile":"v.vassiliades","replyTo":"LIST","senderId":"YYiZG-DqyCI3wOmJKGygGuH3vmf-KpJ7IC9a6dyjx2DKZwSZ90Rfh5AddyXAuVau8YJf7dBGFMR1lhdQAhHVhMMgJA55iFaIVy7f1Gr-nfdDjaU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: NEAT suggestions and help for simple game problem needed","postDate":"1407630852","msgId":6389,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTnRYaG12c3l5a25ySExqVFM2PVNqQjhXcTVzUTZSOWtCUHVlRHZqSlFCTzM0QkRFd0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGxzNWU0aCsxaGhxNWUwQFlhaG9vR3JvdXBzLmNvbT4=","referencesHeader":"PGxyb2w2Zys2OTE3YTBAWWFob29Hcm91cHMuY29tPgk8bHMyYzZhKzNoaGF1bUBZYWhvb0dyb3Vwcy5jb20+CTxsczVlNGgrMWhocTVlMEBZYWhvb0dyb3Vwcy5jb20+"},"prevInTopic":6388,"nextInTopic":6390,"prevInTime":6388,"nextInTime":6390,"topicId":6384,"numMessagesInTopic":7,"msgSnippet":"Hello Nicklas, An idea regarding your second issue (the gating problem as Ken mentions it) is to express the output as: out = x1 * x3 + x1 * x2 where x1 is","rawEmail":"Return-Path: &lt;vassilisvas@...&gt;\r\nX-Sender: vassilisvas@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 18819 invoked by uid 102); 10 Aug 2014 00:34:14 -0000\r\nX-Received: from unknown (HELO mtaq6.grp.bf1.yahoo.com) (10.193.84.37)\n  by m8.grp.bf1.yahoo.com with SMTP; 10 Aug 2014 00:34:14 -0000\r\nX-Received: (qmail 28798 invoked from network); 10 Aug 2014 00:34:14 -0000\r\nX-Received: from unknown (HELO mail-pd0-f178.google.com) (98.138.100.120)\n  by mtaq6.grp.bf1.yahoo.com with SMTP; 10 Aug 2014 00:34:14 -0000\r\nX-Received: by mail-pd0-f178.google.com with SMTP id w10so8856744pde.37\n        for &lt;neat@yahoogroups.com&gt;; Sat, 09 Aug 2014 17:34:13 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.66.254.166 with SMTP id aj6mr33237650pad.11.1407630853068;\n Sat, 09 Aug 2014 17:34:13 -0700 (PDT)\r\nX-Received: by 10.70.20.194 with HTTP; Sat, 9 Aug 2014 17:34:12 -0700 (PDT)\r\nIn-Reply-To: &lt;ls5e4h+1hhq5e0@...&gt;\r\nReferences: &lt;lrol6g+6917a0@...&gt;\n\t&lt;ls2c6a+3hhaum@...&gt;\n\t&lt;ls5e4h+1hhq5e0@...&gt;\r\nDate: Sun, 10 Aug 2014 03:34:12 +0300\r\nMessage-ID: &lt;CANtXhmvsyyknrHLjTS6=SjB8Wq5sQ6R9kBPueDvjJQBO34BDEw@...&gt;\r\nTo: neat@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=047d7b160007f8dcf305003b98c9\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nSubject: Re: [neat] Re: NEAT suggestions and help for simple game problem needed\r\nX-Yahoo-Group-Post: member; u=434634266; y=iOFdAnZUP1L4SyHDGtJZtYVbD-gr_yxwIrQi4deCniRD_iZmq5bmhw\r\nX-Yahoo-Profile: v.vassiliades\r\nFrom: Vassilis Vassiliades &lt;vassilisvas@...&gt;\r\n\r\n\r\n--047d7b160007f8dcf305003b98c9\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHello Nicklas,\n\nAn idea regarding your second issue (the &quot;gating&quot; problem a=\r\ns Ken mentions\nit) is to express the output as:\n\nout =3D x1 * x3 + x1&#39; * x2=\r\n\n\nwhere x1&#39; is the negation of x1\n\nSo, when x1=3D1 then the expression is e=\r\nqual to x3 and when x1=3D0 then the\nexpression is equal to x2.\n\nNow, for th=\r\nis you need:\n1) the output neuron to be linear\n2) two neurons that implemen=\r\nt the multiplication function (in order to\nimplement the products)\n3) the n=\r\negation function ( that converts x1 to x1&#39; )\n\nThe negation function can be =\r\nimplemented with the help of the bias unit\n(that has a fixed input of 1.0) =\r\nand an extra neuron that implements the\nheaviside step function - let&#39;s cal=\r\nl it Node1. An example would be to\nconnect x1 with Node1 using a weight =3D=\r\n -1 and connect the bias unit with\nNode1 using a weight =3D 0.5. This means=\r\n that when x1=3D1, Node1=3D0 and when\nx1=3D0, Node1=3D1.\n\nHope that helps.\n=\r\n\n\n\n\nOn Sat, Aug 9, 2014 at 6:18 PM, kstanley@... [neat] &lt;\nneat@ya=\r\nhoogroups.com&gt; wrote:\n\n&gt;\n&gt;\n&gt; Hi Nicklas, a few thoughts on your simplified-=\r\nchess domain:  I wasn&#39;t\n&gt; completely clear on how your testing cases differ=\r\ned from your training\n&gt; cases, but there is a good reason to expect that tr=\r\naining in this domain\n&gt; (even up to 100% performance) would not lead to 100=\r\n% test (i.e.\n&gt; generalization) performance.  The problem is that it is not =\r\npossible for\n&gt; NEAT to learn any general capture principles because of the =\r\nway the bard is\n&gt; represented.  That is, while the principle that tells a h=\r\numan how one queen\n&gt; can capture another is applicable at any two relative =\r\npositions on the\n&gt; board, NEAT cannot learn any such general principle in t=\r\nhis setup because\n&gt; each board position is represented independently.  That=\r\n is, the problem is\n&gt; that NEAT must re-learn the same general principles (=\r\nsuch as, &quot;if the other\n&gt; queen is below and to the right of me then I shoul=\r\nd move one square down\n&gt; and one square right&quot;) for every possible pair of =\r\npositions (for 2 queens)\n&gt; on the board.  That makes training take a lot of=\r\n time, but also makes\n&gt; generalization in testing very unlikely because any=\r\n pairs of positions not\n&gt; observed during training have no way of deriving =\r\nany knowledge from the\n&gt; training iterations.  (Of course it gets even wors=\r\ne in this sense with\n&gt; multiple piece types.)\n&gt;\n&gt; In effect that problem he=\r\nre has to do with the fact that there is a\n&gt; geometry to the board that pre=\r\nsents certain very useful regularities to the\n&gt; game, but NEAT cannot see t=\r\nhat geometry so it is unable to exploit them the\n&gt; way a human would.  Prob=\r\nably the simplest answer to this problem is to\n&gt; recommend HyperNEAT, which=\r\n is designed to be able to exploit geometric\n&gt; regularities and therefore a=\r\nctually could generalize here in a deep way.\n&gt; In fact, a 2008 paper from B=\r\nahceci an Miikkulainen tests a simplified\n&gt; HyperNEAT-like method on a prob=\r\nlem similar to yours:\n&gt;\n&gt; http://nn.cs.utexas.edu/downloads/papers/bahceci.=\r\ncig08.pdf\n&gt;\n&gt; Of course, HyperNEAT contains NEAT within it, but adds the ab=\r\nility to deal\n&gt; with geometry in a principled way.\n&gt;\n&gt; Now your second conc=\r\nern, which is this very simple &quot;gatiing&quot; problem\n&gt; wherein one input tells =\r\nthe output which other input to mirror, is a\n&gt; different issue, but a very =\r\ninteresting one.  It is separate from the\n&gt; geometry issue and I&#39;m not sure=\r\n if it really comes up in your chess\n&gt; problem, but if it does, then yes it=\r\n appears that could lead to some tricky\n&gt; issues.  I need to think more on =\r\nhow NEAT (or HyperNEAT) could do such\n&gt; switching/gating, but one thing to =\r\nkeep in mind is that it is probably\n&gt; highly deceptive with respect the the=\r\n fitness landscape, which means that\n&gt; the fitness function probably does n=\r\not provide a useful gradient for this\n&gt; problem.  In other words, NEAT may =\r\nindeed be able to solve it, but\n&gt; something more novelty-driven might be th=\r\ne only way to get there.  Novelty\n&gt; search would be interesting to apply to=\r\n this problem.  It&#39;s simple enough\n&gt; that the space is not too large, so it=\r\n might find an answer without getting\n&gt; too lost in all the combinatorial p=\r\nossibilities.  Either that or there may\n&gt; be a representational issue with =\r\nconventional ANNs that makes such gating\n&gt; unwieldy.  In that case a differ=\r\nent type of neuron (one that acts like such\n&gt; a gate) might be needed.\n&gt;\n&gt; =\r\nBest,\n&gt;\n&gt; ken\n&gt;  \n&gt;\n\r\n--047d7b160007f8dcf305003b98c9\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;Hello Nicklas,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;An idea regarding your s=\r\necond issue (the &quot;gating&quot; problem as Ken mentions it) is to expre=\r\nss the output as:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;out =3D x1 * x3 + x1&#39; * x2&lt;/=\r\ndiv&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;where x1&#39; is the negation of x1&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;So, when x1=3D1 then the expression is equal to x3 and when x1=\r\n=3D0 then the expression is equal to x2.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Now, for =\r\nthis you need:&lt;/div&gt;\n&lt;div&gt;1) the output neuron to be linear&lt;/div&gt;&lt;div&gt;2) tw=\r\no neurons that implement the multiplication function (in order to implement=\r\n the products)&lt;/div&gt;&lt;div&gt;3) the negation function ( that converts x1 to x1&=\r\n#39; )&lt;/div&gt;&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;The negation function can be implemented w=\r\nith the help of the bias unit (that has a fixed input of 1.0) and an extra =\r\nneuron that implements the heaviside step function - let&#39;s call it Node=\r\n1. An example would be to connect x1 with Node1 using a weight =3D -1 and c=\r\nonnect the bias unit with Node1 using a weight =3D 0.5. This means that whe=\r\nn x1=3D1, Node1=3D0 and when x1=3D0, Node1=3D1.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;H=\r\nope that helps.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmai=\r\nl_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Sat, Aug 9, 2014 at 6:18 PM,=\r\n &lt;a href=3D&quot;mailto:kstanley@...&quot;&gt;kstanley@...&lt;/a&gt; [neat=\r\n] &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:neat@yahoogroups.com&quot; target=3D&quot;_=\r\nblank&quot;&gt;neat@yahoogroups.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;=\r\ngmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-=\r\nleft:1ex&quot;&gt;\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n \n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span=\r\n&gt;=C2=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Hi Nickla=\r\ns, a few thoughts on your simplified-chess domain:=C2=A0 I wasn&#39;t compl=\r\netely clear on how your testing cases differed from your training cases, bu=\r\nt there is a good reason to expect that training in this domain (even up to=\r\n 100% performance) would not lead to 100% test (i.e. generalization) perfor=\r\nmance.=C2=A0 The problem is that it is not possible for NEAT to learn any g=\r\neneral capture principles because of the way the bard is represented.=C2=A0=\r\n That is, while the principle that tells a human how one queen can capture =\r\nanother is applicable at any two relative positions on the board, NEAT cann=\r\not learn any such general principle in this setup because each board positi=\r\non is represented independently.=C2=A0 That is, the problem is that NEAT mu=\r\nst re-learn the same general principles (such as, &quot;if the other queen =\r\nis below and to the right of me then I should move one square down and one =\r\nsquare right&quot;) for every possible pair of positions (for 2 queens) on =\r\nthe board.=C2=A0 That makes training take a lot of time, but also makes gen=\r\neralization in testing very unlikely because any pairs of positions not obs=\r\nerved during training have no way of deriving any knowledge from the traini=\r\nng iterations.=C2=A0 (Of course it gets even worse in this sense with multi=\r\nple piece types.)&lt;br&gt;\n&lt;br&gt;In effect that problem here has to do with the fa=\r\nct that there is a geometry to the board that presents certain very useful =\r\nregularities to the game, but NEAT cannot see that geometry so it is unable=\r\n to exploit them the way a human would.=C2=A0 Probably the simplest answer =\r\nto this problem is to recommend HyperNEAT, which is designed to be able to =\r\nexploit geometric regularities and therefore actually could generalize here=\r\n in a deep way.=C2=A0 In fact, a 2008 paper from Bahceci an Miikkulainen te=\r\nsts a simplified HyperNEAT-like method on a problem similar to yours:&lt;br&gt;\n&lt;=\r\nbr&gt;&lt;a rel=3D&quot;nofollow&quot; href=3D&quot;http://nn.cs.utexas.edu/downloads/papers/bah=\r\nceci.cig08.pdf&quot; target=3D&quot;_blank&quot;&gt;http://nn.cs.utexas.edu/downloads/papers/=\r\nbahceci.cig08.pdf&lt;/a&gt;&lt;br&gt;&lt;br&gt;Of course, HyperNEAT contains NEAT within it, =\r\nbut adds the ability to deal with geometry in a principled way.&lt;br&gt;\n&lt;br&gt;Now=\r\n your second concern, which is this very simple &quot;gatiing&quot; problem=\r\n wherein one input tells the output which other input to mirror, is a diffe=\r\nrent issue, but a very interesting one.=C2=A0 It is separate from the geome=\r\ntry issue and I&#39;m not sure if it really comes up in your chess=C2=A0 pr=\r\noblem, but if it does, then yes it appears that could lead to some tricky i=\r\nssues.=C2=A0 I need to think more on how NEAT (or HyperNEAT) could do such =\r\nswitching/gating, but one thing to keep in mind is that it is probably high=\r\nly deceptive with respect the the fitness landscape, which means that the f=\r\nitness function probably does not provide a useful gradient for this proble=\r\nm.=C2=A0 In other words, NEAT may indeed be able to solve it, but something=\r\n more novelty-driven might be the only way to get there.=C2=A0 Novelty sear=\r\nch would be interesting to apply to this problem.=C2=A0 It&#39;s simple eno=\r\nugh that the space is not too large, so it might find an answer without get=\r\nting too lost in all the combinatorial possibilities.=C2=A0 Either that or =\r\nthere may be a representational issue with conventional ANNs that makes suc=\r\nh gating unwieldy.=C2=A0 In that case a different type of neuron (one that =\r\nacts like such a gate) might be needed.&lt;br&gt;\n&lt;br&gt;Best,&lt;br&gt;&lt;br&gt;ken&lt;/p&gt;\n\n    &lt;=\r\n/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div=\r\n&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--047d7b160007f8dcf305003b98c9--\r\n\n"}}