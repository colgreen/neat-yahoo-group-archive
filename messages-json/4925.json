{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":420832731,"authorName":"Daniel","from":"&quot;Daniel&quot; &lt;daniel_kuppitz@...&gt;","profile":"dkuppitz","replyTo":"LIST","senderId":"2DI5XHVeDoFMVZDZWb32rIfqcfq4SXI2ZXyO-yapHSMv39ysd94Cxs04MBwX3r4HtP8uooRN572qHtk_Go_7lqAHrvT9ct20QY7HIQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: FloatFastConcurrentNetwork - Performance Optimization","postDate":"1259282127","msgId":4925,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhlbjZzZit1dGUwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGhlbDVmOCszZGJlQGVHcm91cHMuY29tPg=="},"prevInTopic":4922,"nextInTopic":4926,"prevInTime":4924,"nextInTime":4926,"topicId":4917,"numMessagesInTopic":12,"msgSnippet":"Hi David, I really wouldn t call the code well organized and optimized . For example there are too many static classes. Most of them should definitely be","rawEmail":"Return-Path: &lt;daniel_kuppitz@...&gt;\r\nX-Sender: daniel_kuppitz@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 55759 invoked from network); 27 Nov 2009 00:35:43 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m11.grp.re1.yahoo.com with QMQP; 27 Nov 2009 00:35:43 -0000\r\nX-Received: from unknown (HELO n42b.bullet.mail.sp1.yahoo.com) (66.163.168.156)\n  by mta1.grp.sp2.yahoo.com with SMTP; 27 Nov 2009 00:35:43 -0000\r\nX-Received: from [69.147.65.148] by n42.bullet.mail.sp1.yahoo.com with NNFMP; 27 Nov 2009 00:35:28 -0000\r\nX-Received: from [98.137.34.36] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 27 Nov 2009 00:35:28 -0000\r\nDate: Fri, 27 Nov 2009 00:35:27 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;hen6sf+ute0@...&gt;\r\nIn-Reply-To: &lt;hel5f8+3dbe@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Daniel&quot; &lt;daniel_kuppitz@...&gt;\r\nSubject: Re: FloatFastConcurrentNetwork - Performance Optimization\r\nX-Yahoo-Group-Post: member; u=420832731; y=oK1Rd3IjllhEy1IE9IOiH_tM43xdNLSdVoA2_eJ-ur2MTDI\r\nX-Yahoo-Profile: dkuppitz\r\n\r\nHi David,\n\nI really wouldn&#39;t call the code &quot;well organized and optimized&quot;. =\r\nFor example there are too many static classes. Most of them should definite=\r\nly be singleton objects.\n\nAbove all the code/naming conventions are really =\r\nbad. When debugging the code it&#39;s hard to find out where each variable is a=\r\nctually coming from. Looks like the code was ported from Java and only a fe=\r\nw field- and method-names were refactored. Have you checked the code with F=\r\nxCop? I didn&#39;t, but I bet the result will be an endless list of warnings.\n\n=\r\nWhat I personally miss is some event handling stuff. Populations could fire=\r\n events when the best fitness changes. Networks could fire events when prun=\r\ning begins/ends, when neurons or connections are added/deleted, etc. etc. E=\r\nvents make it much easier too build good code around the framework, especia=\r\nlly when it comes to graphical representations.\n\nBut of course the code has=\r\n also some really good concepts implemented. I like the the level of abstra=\r\nction for the non static classes. Also external configuration seems to go t=\r\no the right direction. Documentation is mostly very well done (there are so=\r\nme useless copy/paste comments, e.g. the summary description for the class =\r\nNullFn is &quot;Summary description for FastSigmoid.&quot; :)).\n\nCheers,\nDaniel\n\n--- =\r\nIn neat@yahoogroups.com, &quot;ddambroeplex&quot; &lt;ddambro84@...&gt; wrote:\n&gt;\n&gt; \n&gt; \n&gt; Hi=\r\n Daniel,\n&gt; \n&gt; Thanks for your interest in HyperSharpNEAT.  It&#39;s always good=\r\n to hear about new researchers working with it, and it&#39;s great that you fou=\r\nnd this optimization.  Of course, the bulk of the standard NEAT code is Col=\r\nin&#39;s SharpNEAT, which is already very well organized and optimized.  That&#39;s=\r\n why I chose to build my HyperNEAT code on top of it. \n&gt; \n&gt; I will definite=\r\nly consider integrating this into the main HyperSharpNEAT build (a new, min=\r\nor update should be coming very soon).  I do want to play around with it th=\r\nough and make sure that the output is consistent with the old method, altho=\r\nugh I don&#39;t see why it wouldn&#39;t be.  There also seems to be some conflictin=\r\ng information about how mono handles unsafe code, so I want to make sure th=\r\ne optimization doesn&#39;t break compatibility.\n&gt; \n&gt; If you have any other idea=\r\ns or questions concerning HyperSharpNEAT, just let me know.\n&gt; \n&gt; David D&#39;Am=\r\nbrosio\n&gt; \n&gt; --- In neat@yahoogroups.com, &quot;Daniel&quot; &lt;daniel_kuppitz@&gt; wrote:\n=\r\n&gt; &gt;\n&gt; &gt; Hello,\n&gt; &gt; \n&gt; &gt; I&#39;ve played around with a quite large network and t=\r\nook a look at the execution performance of HyperSharpNEAT. There was one ou=\r\ntstanding method (besides my actual evaluation method): FloatFastConcurrent=\r\nNetwork.SingleStep()\n&gt; &gt; \n&gt; &gt; The method has an execution time of only 0.3m=\r\ns (avg) but it&#39;s called hundreds of millions of times, so I&#39;ve tried to opt=\r\nimize this method - with success. I&#39;ve added some unsafe code; the methods =\r\nreadability is lost, but IMO the performance improvement redresses that.\n&gt; =\r\n&gt; \n&gt; &gt; Some facts:\n&gt; &gt; \n&gt; &gt; With the original method a call to PerformOneGe=\r\nneration() took 218 seconds in average. With my modified version and the sa=\r\nme network a call took 124 seconds (that&#39;s only 57% of the original version=\r\n).\n&gt; &gt; \n&gt; &gt; Maybe you can consider to apply this changes to the standard im=\r\nplementation. The modified file can be found here: http://groups.yahoo.com/=\r\ngroup/neat/files/FloatFastConcurrentNetwork.cs\n&gt; &gt; \n&gt; &gt; Cheers,\n&gt; &gt; Daniel\n=\r\n&gt; &gt;\n&gt;\n\n\n\n"}}