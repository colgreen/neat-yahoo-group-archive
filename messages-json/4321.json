{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"VptUaJ7N_wPBGf-xWn1fSwNUrQN45woN6K5vElNAP1Y99N7wT-FyyQcr1JhELkMdU3MIso9LG8BsHW2w29USt1iJFWPsk_MyNxRf1i9OSvK1","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: great pole balancing performance, poor XOR performance","postDate":"1221539530","msgId":4321,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdhbmNzYStuNGRiQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGdhbWoxbCtldGpvQGVHcm91cHMuY29tPg=="},"prevInTopic":4320,"nextInTopic":0,"prevInTime":4320,"nextInTime":4322,"topicId":4320,"numMessagesInTopic":2,"msgSnippet":"Joe, I ll give it a shot.  First, I suggest taking a look at the question, How should I test my own version of NEAT to make sure it works? in the NEAT FAQ","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 62433 invoked from network); 16 Sep 2008 04:32:11 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m50.grp.scd.yahoo.com with QMQP; 16 Sep 2008 04:32:11 -0000\r\nX-Received: from unknown (HELO n48c.bullet.mail.sp1.yahoo.com) (66.163.168.182)\n  by mta16.grp.scd.yahoo.com with SMTP; 16 Sep 2008 04:32:11 -0000\r\nX-Received: from [69.147.65.173] by n48.bullet.mail.sp1.yahoo.com with NNFMP; 16 Sep 2008 04:32:11 -0000\r\nX-Received: from [66.218.66.82] by t15.bullet.mail.sp1.yahoo.com with NNFMP; 16 Sep 2008 04:32:11 -0000\r\nDate: Tue, 16 Sep 2008 04:32:10 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gancsa+n4db@...&gt;\r\nIn-Reply-To: &lt;gamj1l+etjo@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: great pole balancing performance, poor XOR performance\r\nX-Yahoo-Group-Post: member; u=54567749; y=cjXxGTzXD41dDHo5zsEqhNlfGm5g1mnkas_VpQB0hYfyxigjEDzd\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nJoe,\n\nI&#39;ll give it a shot.  First, I suggest taking a look at the question,=\r\n\n&quot;How should I test my own version of NEAT to make sure it works?&quot; in\nthe N=\r\nEAT FAQ at:\n\nhttp://www.cs.ucf.edu/~kstanley/neat.html\n\nThat question lists=\r\n several issues with XOR that you may be\nencountering yourself.\n\nOne other =\r\nthings to note:  I did not use dynamic thresholding back\nwhen I ran the XOR=\r\n test.  Perhaps in that problem it is actually\nmaking it harder.\n\nIn genera=\r\nl, the way I would approach XOR is to start out with a fixed\nstructure that=\r\n is actually the solution structure and try to evolve\nthe weights only.  If=\r\n you have problems doing that, then you know that\nthe problem is somewhere =\r\nin how weight mutations are happening.  So\nyou can rule that out if that wo=\r\nrks well.  \n\nTo start evolution, I generally would just set all the weights=\r\n to zero\nand then mutate each weight with the normal mutation operator.\n\nAl=\r\nso, I cannot really comment on Christian Mayr&#39;s version of NEAT\nsince I hav=\r\ne not taken a close look at it.\n\nFinally, note that XOR is a strange proble=\r\nm that may not be indicative\nof performance on other problems.  The main th=\r\ning that it verifies is\nsimply that NEAT can add structure.  Other conclusi=\r\nons are probably\nnot warranted.  But it is good for verifying that one fact=\r\n.  \n\nken\n\n--- In neat@yahoogroups.com, &quot;solifos&quot; &lt;solifos@...&gt; wrote:\n&gt;\n&gt; H=\r\ni all,\n&gt; \n&gt; I&#39;m interested in applying NEAT to the development of a control=\r\nler for a\n&gt; simulated biped robot. So to get my feet wet, I&#39;ve programmed N=\r\nEAT in\n&gt; Matlab. I&#39;ve tested it on XOR, double pole balancing with velocity=\r\n, and\n&gt; double pole balancing without velocity. I get excellent results on =\r\nthe\n&gt; latter two problems (actually evolving solutions faster than Ken\n&gt; re=\r\nported; more on that in a future post), but XOR results are not so\n&gt; good. =\r\nIt&#39;s able to solve XOR within 100 generations in only about half\n&gt; of the r=\r\nuns. I&#39;ve used the exact same parameters as Ken, and implemented\n&gt; NEAT fol=\r\nlowing his description as closely as possible (though I&#39;ve not\n&gt; thoroughly=\r\n inspected his C++ code yet). The fitness function is: fitness\n&gt; =3D (4-sum=\r\n(error))^2, where &#39;error&#39; is a vector containing the absolute\n&gt; distance fr=\r\nom the correct output for each input pattern. Recurrent\n&gt; connections are d=\r\nisabled. (One thing that I&#39;m not clear on is how to set\n&gt; the initial weigh=\r\nts at the start of a run. What range is used?)\n&gt; \n&gt; Here&#39;s a speciation plo=\r\nt of a typical run where no solution is found in\n&gt; 100 generations:\n&gt; \n&gt; ht=\r\ntp://img185.imageshack.us/my.php?image=3Dxorneatnu7.jpg\n&gt; &lt;http://img185.im=\r\nageshack.us/my.php?image=3Dxorneatnu7.jpg&gt;\n&gt; \n&gt; Notice that the number of s=\r\npecies quickly grows to about 50 by\n&gt; generation 23. Also, about every 20 g=\r\nenerations after that, all but the\n&gt; top two species are removed due to sta=\r\ngnant max population fitness\n&gt; (consistent with Ken&#39;s implementation, I bel=\r\nieve). It seems to me that\n&gt; way too many species are forming. I&#39;ve impleme=\r\nnted dynamic thresholding\n&gt; which helps keep the number of species to aroun=\r\nd 20, but performance is\n&gt; still well below Ken&#39;s (which is 32 generations =\r\non average).\n&gt; \n&gt; By the way, I ran Christian Mayr&#39;s Matlab NEAT several ti=\r\nmes, and it\n&gt; also seems to take significantly more generations to solve XO=\r\nR on\n&gt; average (about 50 is typical, and more than 100 is not rare) and end=\r\ns up\n&gt; with significantly more than 2.35 hidden nodes (about 8 seems typica=\r\nl).\n&gt; Also, in his implementation, species will oftentimes survive for only=\r\n a\n&gt; single generation, which seems strange to me. Assuming the average\n&gt; f=\r\nitness of a given species doesn&#39;t become *extremely* low and there\n&gt; aren&#39;t=\r\n too many species in the population, it should produce well above\n&gt; a singl=\r\ne offspring each generation and thus survive for at least 15\n&gt; generations =\r\n(the &#39;maximum stagnation&#39; setting). Am I missing something\n&gt; here? I ask be=\r\ncause the number of species is kept to a reasonable level\n&gt; in his code.\n&gt; =\r\n\n&gt; Any suggestions? Note that I&#39;d like to continue using Ken&#39;s original\n&gt; p=\r\narameters settings to ensure that my code is reasonably close to the\n&gt; orig=\r\ninal NEAT.\n&gt; \n&gt; Thanks for any help!\n&gt; Joe\n&gt;\n\n\n\n"}}