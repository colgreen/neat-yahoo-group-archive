{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":115403844,"authorName":"John Arrowwood","from":"&quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;","profile":"jarrowwx","replyTo":"LIST","senderId":"2fTcS4k0GQlUlKS11zqpodnapN-J1a0ZqlDHFv3eGNh7i4ZkFwykFpI_BOBjX2o7JxE7Hl6w8Y7GF7t4lOLgqvMZYjW8_RQBHqRU0JFK","spamInfo":{"isSpam":false,"reason":"0"},"subject":"perl speed, xor, weights, et al.","postDate":"1086826330","msgId":1049,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTItRjE1MTlLdkZRYTkyTW4wMDAyMTFmYUBob3RtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":1048,"nextInTime":1050,"topicId":1049,"numMessagesInTopic":1,"msgSnippet":"On the speed front, I did a comparison.  I did a run of 100 generations with a target population size of 10k.  I made the fitness function just return a random","rawEmail":"Return-Path: &lt;jarrowwx@...&gt;\r\nX-Sender: jarrowwx@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 62755 invoked from network); 10 Jun 2004 00:12:37 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m19.grp.scd.yahoo.com with QMQP; 10 Jun 2004 00:12:37 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.247.151)\n  by mta1.grp.scd.yahoo.com with SMTP; 10 Jun 2004 00:12:37 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Wed, 9 Jun 2004 17:12:11 -0700\r\nReceived: from 64.122.44.102 by by2fd.bay2.hotmail.msn.com with HTTP;\n\tThu, 10 Jun 2004 00:12:10 GMT\r\nX-Originating-Email: [jarrowwx@...]\r\nX-Sender: jarrowwx@...\r\nTo: neat@yahoogroups.com\r\nBcc: \r\nDate: Wed, 09 Jun 2004 17:12:10 -0700\r\nMime-Version: 1.0\r\nContent-Type: text/plain; format=flowed\r\nMessage-ID: &lt;BAY2-F1519KvFQa92Mn000211fa@...&gt;\r\nX-OriginalArrivalTime: 10 Jun 2004 00:12:11.0084 (UTC) FILETIME=[933650C0:01C44E7F]\r\nX-eGroups-Remote-IP: 65.54.247.151\r\nFrom: &quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;\r\nReply-To: john@...\r\nSubject: perl speed, xor, weights, et al.\r\nX-Yahoo-Group-Post: member; u=115403844\r\nX-Yahoo-Profile: jarrowwx\r\n\r\nOn the speed front, I did a comparison.  I did a run of 100 generations with \na target population size of 10k.  I made the fitness function just return a \nrandom number, so that the majority of time spent was NEAT-specific.  It \ntook 22 minutes.  That&#39;s 13.2 seconds per generation, average, or on average \nabout 0.00132 seconds per genome.  Plus some unknown amount to factor in the \nfact that there were often a few less than 10k in the population for a given \ngeneration.  That ought to be fast enough for any real-world applications...\n\nThen I moved the return rand() to the end, after the actual fitness \nevaluation.  This took 37 minutes.  So activation of each network 4 times \ntakes about 75% of the time it took to come up with that network \nconfiguration in the first place.\n\nMind you, I cheated...remember that technique I talked about for generating \noptimal code to reduce the number of instructions required per activation?  \nI used it, but with Perl code...not QUITE as optimal, but good.  If I hadn&#39;t \ndone that, the cost of activation would have been much higher.  A lot more \nsigmoids would have been calculated per activation.\n\nBut it goes to show, speeding up the NEAT portion of code really isn&#39;t \nnecessary, just like Ken said!  For those who doubted... ;)\n\nFor those that care, here are some details of how I speeded up my network \nactivation:  Every time a new topology is created, I analyze it and figure \nout the order of node calculation to minimize dependancies.  If it is not a \nrecurrent network, the entire thing is calculated in a single pass, no \nloops.  If it IS recurrent, it still works, you just have to pass in the \nvalues from the previous activations.  Anyway, I take that generated code, \neval() it to create an anonymous subroutine, and then store the address with \nthe topology record.  That way, to activate the network, I just call the \nfunction associated with that topology and pass in the actual network record \n(for the weights) and the input node values.  Easy, and has a minimum of \noverhead.  But it does still have some overhead, not counting Perl itself.\n\nAs for solving XOR...\n\nI tried to compose a hand-crafted network to solve it.  That wasn&#39;t easy...I \ncouldn&#39;t find ANY google&#39;d pages that describe the weights for a 2-1-1 \nnetwork.  Several for 2-2-1, but none for the one I wanted.  But I read \nenough, and used Excel&#39;s Goal Seek feature to figure out some weights that \ngive me a good approximation.  And now I know why I couldn&#39;t evolve a \nsolution in a timely manner...\n\nFor the Sigmoid gain level of 1 that I had been using, most of the weights \nwere in the 50&#39;s.  The weight of the output-hidden connection was like -200.\n\nBut I had deliberately done things that tended to focus the weights of my \nnetwork to around +/-1.  When I would randomly adjust weights, it was +/- \n10%, which will allow it to grow, but then whenever I created an all-new set \nof weights, it starts with weights +/-1.  When that crosses with another \nnetwork, the average connection weight drops.  Thus, it takes even longer to \never evolve an adequate set of weights.\n\nWhich also explains why the run that I let go over night, which had almost \n12k generations by morning, had an average fitness of over 90%.  It was \ngetting there, just REALLY SLOWLY!\n\nThis brings me back to what Ken said, about weight caps.  He said we should \ncap the weights so that innovations have a chance of being useful.  Problem \nis, I know I would never be able to evolve a solution that way, unless I \ntweaked my sigmoid gain.  And then, since I&#39;m not automatically tweaking it, \nI run the risk of never finding a solution.\n\nHere&#39;s another idea to counter the idea of weight limits:  scale the \ninnovations.  Keep a min/max weight record.  When creating all new weight \nvalues, choose anything between the min and max values.  I&#39;ll try it and \nsee...\n\nAnd what do you know...my perl NEAT has just managed to evolve a solution to \nXOR in 209 generations, with a population size of 1000 and a limit of 99 \noffspring per topology and a sigmoid gain of 5.  YEAH!!! Victory!!!\n\nMore tests to come.\n\n\n\n"}}