{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"eZhRxO1l4Gr-p4VAZzF69eaPtnn_JTh7wIH4TYELqew1AhbtP-U9yC-jFkdd5kn8bkqfMYXhu4dMnu5lEqTCTb3k3-q2CkCCFYI2PEQ4LH8_TenM5ks","spamInfo":{"isSpam":false,"reason":"6"},"subject":"An improvement over object evolution with CPPNs","postDate":"1226608642","msgId":4444,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdmaTM2MitzODFlQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":4447,"prevInTime":4443,"nextInTime":4445,"topicId":4444,"numMessagesInTopic":14,"msgSnippet":"Hi all! For those of you who are not familiar with this particular subject, it is about physical object evolution with CPPNs. There are some problems when","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 48287 invoked from network); 13 Nov 2008 20:37:22 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m43.grp.scd.yahoo.com with QMQP; 13 Nov 2008 20:37:22 -0000\r\nX-Received: from unknown (HELO n34a.bullet.mail.sp1.yahoo.com) (66.163.168.128)\n  by mta15.grp.scd.yahoo.com with SMTP; 13 Nov 2008 20:37:22 -0000\r\nX-Received: from [69.147.65.172] by n34.bullet.mail.sp1.yahoo.com with NNFMP; 13 Nov 2008 20:37:22 -0000\r\nX-Received: from [66.218.66.88] by t14.bullet.mail.sp1.yahoo.com with NNFMP; 13 Nov 2008 20:37:22 -0000\r\nDate: Thu, 13 Nov 2008 20:37:22 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gfi362+s81e@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: An improvement over object evolution with CPPNs\r\nX-Yahoo-Group-Post: member; u=283334584; y=QJgtwE_HKUw7BpA9qXeuqZ9ZyZCN5jyvriwsX_2O0kzW9E4j3aUAQhVLdg\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nHi all!\n\nFor those of you who are not familiar with this particular subject=\r\n, it \nis about physical object evolution with CPPNs. There are some problem=\r\ns \nwhen trying to use CPPNs directly to map onto 2/3D objects with \nfinite,=\r\n though variable (among individuals) size. I am particularly interested in =\r\nthis issue because it also holds the key to the \nautomatic generation of Hy=\r\nperNEAT substrates as well. And perhaps it \nmay open up new ways to have co=\r\nntent generation in games, too. And \nArtificial Life, of course.\n\nI remembe=\r\nr that Ken suggested that animal morphologies and such things \nmay be easie=\r\nr to describe in higher dimensional space and then mapped \nback to 2D/3D, j=\r\nust like in HyperNEAT. Day after day I was trying to \nfind such a higher-di=\r\nmensional description of something that has \nlimbs, joints, all with variab=\r\nle numbers and size. Even in the most \nsimplistic 2D case, I never got even=\r\n close to such an elegant \nsolution. \n\nSuppose I want to have a 2D creature=\r\n with rectangular limbs. But how \nmany of them is unknown. How they are con=\r\nnected - too. A limb is  \nrepresented as position in 2D and width/height an=\r\nd an angle of \norientation. This makes 5D space in which I have to query al=\r\nl possible \nthings and ask the CPPN if there is a limb or not. Sounds too \n=\r\nexpensive, and more, even if I do that, there are \nalgorithmic/implementati=\r\non issues that are just too hard. \n\nThe problem I had is, actually, that I =\r\nmissed the fact that a CPPN is \nan infinite mathematical description of the=\r\n phenotype. Any use of a \nCPPN involves approximating the phenotype with so=\r\nme kind of level of \ndetail. The CPPN makes no difference if I use it for 1=\r\n6x16 visual \nsubstrate or 65536x65536, for example (note: I mean not in phe=\r\nnotype \nevaluation). So there must be a way to have such level of detail \ns=\r\ncaling in animal morphologies as well. \n\nSo I went back to the cellular gro=\r\nwth approach, looking for what I \nmissed before. The biggest unsolved probl=\r\nem with my previous system is \nthat coordinates may grow to infinite and th=\r\ne activation functions are \nactually best suited to work in [-1..1] substra=\r\ntes (given the fact I \nhave fixed CPPN weight range and mutation powers). P=\r\nlus, the CPPN is \nrequeried on each cell on each timestep in the process of=\r\n development. \nToo expensive and as the phenotype gets bigger, development =\r\nslows down \nto a rate that is not acceptable. And more, it is not clear how=\r\n \nscaling could work if I want to, say, have the same object, the same \nsha=\r\npe, much bigger, but the cell size and the coordinate frames - \nstill fixed=\r\n. Something was terribly wrong with that model. But I think \nI have finally=\r\n found a solution! Or at least something very close to \nit.\n\nThe CPPN alrea=\r\ndy encodes all the development of a phenotype with any \nprecision via compo=\r\nsing coordinate frames. A whole phenotype with all \nits patterns with infin=\r\nite (well at least huge) precision can be fit \ninto just the patch of [-1 .=\r\n. 1] in Cartesian space. Assume I will be \ntalking about 2D space only for =\r\nsimplicity. That patch [-1 .. 1] in \nboth X and Y I call &quot;the Egg&quot;. \n\nThe f=\r\nirst approach I took with the idea of the egg was too simple, but \nit is in=\r\nteresting to know about. After the CPPN &quot;paints&quot; the egg with \ncell color a=\r\nnd stuff, then it is re-queried again, this time the \noutputs are 2D vector=\r\ns. The magnitude of these vectors was re-scaled \nto be within [0 .. MAX_DIS=\r\nTANCE]. So the entire phenotype building \nprocedure became very simple - fi=\r\nrst build the egg, then send each \ncell where its vector points. Well that =\r\nlooks so ugly in practice, \nwith empty holes and.. eh.. forget that! This i=\r\ns not anything more \nadvanced than just painting the CPPN output directly l=\r\nike in \nPicbreeder, just a fancy way of doing the same. \n\nThen I realized t=\r\nhat these &quot;cells&quot; can be also thought of an \nabstractions of &quot;masses/groups=\r\n of cells&quot;. In nature, cells don&#39;t just \ngo &quot;that way&quot; moving through each =\r\nother, but stick together. Entire \ntissues develop fast as a mass of cells =\r\ndivides and increases size. So \nI had this insight. I changed the concept o=\r\nf a cell and improved over \nthe previous model. A cell is a circle with a r=\r\nadius, has a color and \nhas mass. It also has more properties but more on t=\r\nhat after a few \nother words. \n\nThis is the key idea. In my previous model,=\r\n the CPPN was instructing a \nbig mass of many cells on the fly, during deve=\r\nlopment time. It took \nadvantage of using time as input, so the development=\r\n was like a \nspatial pattern in 4D. But it suffered from the coordinates an=\r\nd other \nproblems I mentioned above. In this model, the CPPN does not opera=\r\nte \non the cells during development. The CPPN predetermines the fate of \nea=\r\nch cell right in the egg, before development begins. Everything else \ndurin=\r\ng development is a consequence of the cell&#39;s fate and the \ninternal 2D phys=\r\nics world in which the phenotype develops. So, in \nsimpler words, the CPPN =\r\nis programming the egg.\n\nA cell has the following properties that are deter=\r\nmined by the CPPN:\n- Color (of course :)\n- Growth rate. How fast it increas=\r\nes size in % of circle area. \n- Time to begin growth. It is a value in [0 .=\r\n. 1] where 1 is the total \nnumber of time steps allocated for development.\n=\r\n- Growth time duration. Between some min and max value.\n- Angle for divisio=\r\nn splitting. Between [-1 .. 1], during development \nrescaled to [0 .. pi]\n\n=\r\nAs cells grow, they will inevitably overlap each other. This issue is \nhand=\r\nled by the internal simple 2D physics engine that adds forces if \nthe circl=\r\nes overlap. So they eventually will converge to a state that \nthey only tou=\r\nch each other, and the whole phenotype bigger of course. \nCells can divide.=\r\n Division is automatic. If a cell&#39;s radius reaches a \na fixed treshold valu=\r\ne, it is split into 2 cells, each one having \nexactly half the area of the =\r\nmother cell. The mother cell is split \nalong a predetermined angle, so the =\r\nCPPN can control the overall \ndirections of growth for the phenotype. The 2=\r\n children overlap in the \nbeginning, but as time progresses, they are pulle=\r\nd apart by the \nphysics. Children cells inherit the properties of the mothe=\r\nr, but \nchange their positions and reset their lifetime timers. The cells i=\r\nn \nthe egg count their children and their grandchildren as well. No more \nt=\r\nhan 3 generations of division can occur, in order to keep the number \nof ce=\r\nlls relatively small for performance considerations. Though this \nvalue can=\r\n be changed. \n\nIn order to keep the phenotype solid, not torn apart from in=\r\nternal \nvelocities, a mass-spring grid mesh is created in the egg before \nd=\r\nevelopment. Cell divisions update the mesh. The mass-spring mesh plus \nthe =\r\ncell-to-cell overlapping prevention forces act together as the \nphenotype i=\r\nncreases in size and number of cells. Eventually it will \nbecome more stiff=\r\n, where large group of recently divided cells are \npacked together. I don&#39;t=\r\n know if that is a bug or a feature :) \n\nThere is one insight I had after s=\r\neeing the results. Watching the mesh \ndevelops, and some with interesting s=\r\nhapes and configurations, makes \nme think this approach is very well suited=\r\n to evolve HyperNEAT \nsubstrates as well. In fact I am about to add brains =\r\nto these \ncreatures right this evening :) But I don&#39;t know, if the links sh=\r\nould \nbe determined from the beginning right in the egg or after \ndevelopme=\r\nnt. Any suggestions? \n\nWell this is it. I hope this may be some advance int=\r\no the field. I \nwill be happy to see any thoughts about this stuff. I&#39;ll po=\r\nst an \nexecutable compiled with VS2008 in the files section now, so you wil=\r\nl \nsee it in action. Note however, that it is just a demo of development, \n=\r\nnot evolution. There is no doubt that this thing combined with NEAT \nwill m=\r\nake at least something very very cool. :) \n\nPeter\n\n\n"}}