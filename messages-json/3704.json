{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":203001720,"authorName":"Wesley Tansey","from":"Wesley Tansey &lt;tansey@...&gt;","profile":"tansey4","replyTo":"LIST","senderId":"Cnj8JrsB5KcQZ9nUTwtC_mj99wyIgvn2v7gbq2c2ocKxh1OvepNSjVV6AM0b_gxZ3JoEBkFG5kp9sAJlisJ3fUvHq90","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: Request for more details on cross-validation","postDate":"1198097484","msgId":3704,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ3Njk4NDRDLjYwNTAxMDhAdnQuZWR1Pg==","inReplyToHeader":"PGViNDRhMmQ3MDcxMjE5MTIzNms2MjgxMWFkNmg2NmJmOTcwZmIzMjc5NzQxQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGE3MWYwZGQ0MDcxMjE5MDc0M3c2YTE2OGJlZG8xOGJiNzlkMWQ5NmE4YjI1QG1haWwuZ21haWwuY29tPiA8ZmtidHNrKzFpY2lAZUdyb3Vwcy5jb20+IDxlYjQ0YTJkNzA3MTIxOTEyMzZrNjI4MTFhZDZoNjZiZjk3MGZiMzI3OTc0MUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":3703,"nextInTopic":3706,"prevInTime":3703,"nextInTime":3705,"topicId":2673,"numMessagesInTopic":25,"msgSnippet":"Generics themselves do not introduce performance overhead. Rather, the way they re implemented prevents them from decreasing performance overhead.  With","rawEmail":"Return-Path: &lt;tansey@...&gt;\r\nX-Sender: tansey@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 41641 invoked from network); 19 Dec 2007 20:51:28 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m45.grp.scd.yahoo.com with QMQP; 19 Dec 2007 20:51:28 -0000\r\nX-Received: from unknown (HELO lennier.cc.vt.edu) (198.82.162.213)\n  by mta18.grp.scd.yahoo.com with SMTP; 19 Dec 2007 20:51:28 -0000\r\nX-Received: from dagger.cc.vt.edu (evil-dagger.cc.vt.edu [10.1.1.11])\n\tby lennier.cc.vt.edu (8.12.11.20060308/8.12.11) with ESMTP id lBJKpSCW015307\n\tfor &lt;neat@yahoogroups.com&gt;; Wed, 19 Dec 2007 15:51:28 -0500\r\nX-Received: from [10.0.2.5] (chaos.cs.vt.edu [128.173.236.168])\n\tby dagger.cc.vt.edu (MOS 3.8.5-GA)\n\twith ESMTP id ISS95696;\n\tWed, 19 Dec 2007 15:51:28 -0500 (EST)\r\nMessage-ID: &lt;4769844C.6050108@...&gt;\r\nDate: Wed, 19 Dec 2007 15:51:24 -0500\r\nUser-Agent: Thunderbird 2.0.0.9 (Windows/20071031)\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;a71f0dd40712190743w6a168bedo18bb79d1d96a8b25@...&gt; &lt;fkbtsk+1ici@...&gt; &lt;eb44a2d70712191236k62811ad6h66bf970fb3279741@...&gt;\r\nIn-Reply-To: &lt;eb44a2d70712191236k62811ad6h66bf970fb3279741@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Wesley Tansey &lt;tansey@...&gt;\r\nSubject: Re: [neat] Re: Request for more details on cross-validation\r\nX-Yahoo-Group-Post: member; u=203001720; y=d7FXBg_ri10U0GUSGj8PMQOObXTrKHhThkX0AnDB_j8Rvw\r\nX-Yahoo-Profile: tansey4\r\n\r\nGenerics themselves do not introduce performance overhead. Rather, the \nway they&#39;re implemented prevents them from decreasing performance \noverhead.  With generics, you are telling the compiler to expect an \nobject of a certain type, so it could in theory create a new class that \nreplaces the generic parameter with the specified one, thereby removing \nthe call to CHECKCAST in the bytecode.  This is essentially how C++ \ntemplates work, and they work very efficiently since they trade runtime \ntype checking for compile-time &quot;reification&quot;.  However, introducing such \nan approach in Java 5 would have broken legacy applications for reasons \noutside the scope of the mailing list, so they didn&#39;t do it this way.\n\nAlso, Colin, the &quot;reification upon request&quot; JSR you&#39;re referencing has a \nlong way to go (it won&#39;t make it into Java 7, and I&#39;d doubt it will make \nit into Java 8).  For example, look at how long it took for Michael \nErnst&#39;s revisions of annotations to get through to Java 7-- and he had a \nworking implementation before the final version of Java 5 annotations \nwas even released! :)\n\nWesley\n\n\nDaniel Tuohy wrote:\n&gt;\n&gt; I&#39;m curious about the CHECKCAST issue. Is it well known that the\n&gt; CHECKCASTs are resistant to compiler optimization? I didn&#39;t realize\n&gt; that generics presented such a performance concern.\n&gt;\n&gt; Dan\n&gt;\n&gt; On Dec 19, 2007 3:11 PM, Kenneth Stanley &lt;kstanley@cs. utexas.edu \n&gt; &lt;mailto:kstanley%40cs.utexas.edu&gt;&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Colin, I just wanted to second that I believe the GUI stuff is quite\n&gt; &gt; important for the reasons you stated. They really help you\n&gt; &gt; understand what&#39;s going on and thereby debug and better optimize\n&gt; &gt; parameters.\n&gt; &gt;\n&gt; &gt; Also, SharpNEAT is one of the fastest versions of NEAT available.\n&gt; &gt; The regression experiments can run 100,000 generations in a few\n&gt; &gt; hours, which is impressive. Will the same optimizations that allow\n&gt; &gt; that performance really hold after transferring it over?\n&gt; &gt;\n&gt; &gt; ken\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; --- In neat@yahoogroups. com &lt;mailto:neat%40yahoogroups.com&gt;, &quot;Colin \n&gt; Green&quot; &lt;locster01@. ..&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Hi Jim,\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; On 19/12/2007, Jim O&#39;Flaherty, Jr. &lt;jim_oflaherty_ jr@...&gt; wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; I am curious as to why you are considering shifting from .NET/C#\n&gt; &gt; to Java. Given the conversion will cost you development time, what\n&gt; &gt; advantages are you gaining in Java, or disadvantages in moving away\n&gt; &gt; from .NET/C#?\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; BTW, I ask this as I have been attempting to evaluate performance\n&gt; &gt; between these two platforms. To what degree, if at all, is your move\n&gt; &gt; performance motivated?\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Actually performance isn&#39;t really a major factor in my thinking. The\n&gt; &gt; &gt; Java and .Net compilers and runtime environments are all well\n&gt; &gt; thought\n&gt; &gt; &gt; out and fast environments in my opinion. OK so you&#39;ve got different\n&gt; &gt; &gt; Java VM&#39;s from different vendors for different scenarios, but\n&gt; &gt; they&#39;re\n&gt; &gt; &gt; all good including the standard (free) ones. And in the .Net world\n&gt; &gt; you\n&gt; &gt; &gt; have Mono which was quite slow when I last tried it last (12 months\n&gt; &gt; &gt; ago ish). But generally if you see significant performance\n&gt; &gt; differences\n&gt; &gt; &gt; it&#39;s most likely the code you&#39;re using, not the environment. As I\n&gt; &gt; say\n&gt; &gt; &gt; the generics support in .Net is more performant, so that does tilt\n&gt; &gt; the\n&gt; &gt; &gt; performance argument slightly in favour of .Net\n&gt; &gt; &gt;\n&gt; &gt; &gt; For me the main argument for Java is the Eclipse IDE. It&#39;s far\n&gt; &gt; easier\n&gt; &gt; &gt; to navigate through code using views such as the type and call\n&gt; &gt; &gt; hierarchy, highlighting of variables, errors, warnings, TODO\n&gt; &gt; comments,\n&gt; &gt; &gt; etc. on the right hand margin. The CVS/SVN support is really nice to\n&gt; &gt; &gt; use - Visual Studio&#39;s equivalents are either very poor by comparison\n&gt; &gt; &gt; (SourceSafe) or very expensive (TeamSuite). Ultimately the Java\n&gt; &gt; coding\n&gt; &gt; &gt; experience is nicer and makes more efficient use of programmer time\n&gt; &gt; &gt; IMO - a big plus in my book.\n&gt; &gt; &gt;\n&gt; &gt; &gt; So although I prefer the .Net framework, the IDE&#39;s let the side\n&gt; &gt; down.\n&gt; &gt; &gt; Add to that the fact that Java is more open source friendly and that\n&gt; &gt; &gt; could sway the argument for me. Yes you can get a free version of\n&gt; &gt; VS,\n&gt; &gt; &gt; but (a) it&#39;s not as good as Eclipse (also free) and (b) it has some\n&gt; &gt; &gt; features disabled - 64bit support and multithreaded debugging are\n&gt; &gt; two\n&gt; &gt; &gt; I bumped into recently.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Development time is an issue. Not so much porting the core algorithm\n&gt; &gt; &gt; stuff as I&#39;m intending to refactor all of that anyway, but all the\n&gt; &gt; &gt; graphical stuff and GUI interfaces could be a serious headache.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Colin.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; -- \n&gt; Daniel Tuohy (danielr2e@gmail. com &lt;mailto:danielr2e%40gmail.com&gt;)\n&gt; Artificial Intelligence Software Engineer\n&gt; Stottler Henke\n&gt; 404-314-8467\n&gt;\n&gt;  \n\n"}}