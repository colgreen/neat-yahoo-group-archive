{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"K3NP5Amy14UgdPCinJ-8uRt1VWAbzFfhd-xD_vrwSjCv4_Nz8i0u4CT2o4udvj2Ky-eU1RxS1uBWF3nH-YAinyQY4UKHNBDhLA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Benchmarks?","postDate":"1120686105","msgId":2040,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyQ0M1MDE5LjMwNDA4MDlAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":2038,"nextInTopic":2041,"prevInTime":2039,"nextInTime":2041,"topicId":2028,"numMessagesInTopic":33,"msgSnippet":"Hi Derek & everyone, I think this issue of building a set of benchmarking problems is an important one and thinking about it there s potentially a whole load","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 50309 invoked from network); 6 Jul 2005 21:41:29 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m27.grp.scd.yahoo.com with QMQP; 6 Jul 2005 21:41:29 -0000\r\nReceived: from unknown (HELO ranger.systems.pipex.net) (62.241.162.32)\n  by mta4.grp.scd.yahoo.com with SMTP; 6 Jul 2005 21:41:28 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby ranger.systems.pipex.net (Postfix) with ESMTP id 7442AE0001BA\n\tfor &lt;neat@yahoogroups.com&gt;; Wed,  6 Jul 2005 22:41:27 +0100 (BST)\r\nMessage-ID: &lt;42CC5019.3040809@...&gt;\r\nDate: Wed, 06 Jul 2005 22:41:45 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Benchmarks?\r\nX-Yahoo-Group-Post: member; u=127853030; y=zVkINndVViJyksCvL1R3xS6NeIEJrGtUVpYnvhNvi1r-aZZqe9XK\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nHi Derek & everyone,\n\nI think this issue of building a set of benchmarking problems is an \nimportant one and thinking about it there&#39;s potentially a whole load of \nresearch papers or even an entire branch of research in this subject. So \nI&#39;d just like to give an overview of my ideas, but essentially try to \nstay focused on defining perhaps 3 or 4 benchmarks that folks can \nimplement quickly an easily and give us varying difficulties to \nbenchmark against.\n\nI mentioned the multiplexer problem before which I came across on the \ngenetic programming list (perhaps other GP problems could be looked at). \nIn this problem the single output value is dependent on all of the \ninputs and so this is distinct from Joe&#39;s tesselated functions where \nsubgroups of input/outputs are actually functionally seperate. From a \nbenchmarking point of view though I don&#39;t think this really matters, at \nleast not unless you are using a modular-NEAT type approach. NEAT still \nmust find the functionality and has no way of knowing that it is \nactually rediscovering the same solution multiple times - it&#39;s just as \ndifficult as finding a single function of equal complexity to the \ntesselated problems. As such I think tesselation is a simple, effective \nand easy to understand method that would/could be a central part of any \nframework for constructing benchmark problems.\n\nI do foresee one problem though which became apparent in my multiplexer \nexperiments. If we tesselate multiple functions together (and they need \nnot be repetitions of the same function) then we now have a far larger \ncombination of input values to test against, e.g. in binary input \nproblems such as XOR the number of test cases doubles with each extra \ninput we add. This of course corresponds to more time per network \nevaluation and so the idea doesn&#39;t scale quite as well as might be \napparent at first.\n\nIn my multiplexer experiments I attempted to partially overcome the \ninput-combination problem by only testing carefully selected test cases \nthat I deemed sufficiently seperate enough that if a network could solve \nthese specific test cases then it surely must have generalised enough to \nsolve the whole test set. This however was not the case, although I need \nto go over the experiments to confirm this for sure. This may also be a \nproblem more attributable to problems such as multiplexer where there is \na lot simulation of binary logic going on (specifically switching), in \nproblems where continuous input/output signals are in use this may not \nbe the case (e.g. function approximation). That said, most non-trivial \nand interesting problems will probably contain some degree of switching \n(conditional logic) and continuous functions.\n\nAnother way we can allieviate the input-combination problem is to use \nfewer repetitions of more complex problems, instead of many repetitions \nof less complex problems. XOR therefore may form the basis of the \nsimplest range of benchmarks, say XOR*1(2 inputs, 4 combinations) to \nXOR*3(6 inputs, 1024 combinations), but since it only requires one \nhidden node per XOR this is to be considered a basic test.\n\nMore complex functions that can be tesselated together could simply be \naggregations of logic gates(logic circuits), and in fact this is what \nthe multiplexer problem is (or it can be considered as such anyway). \nCombining logic gates with continous functions \n(pow,cos,tan,atan,abs,etc.) gives us an even broader functional complexity.\n\nSo what we now have is a framework for defining benchmarking problems in \nterms of functional &#39;circuits&#39; and repetition of those circuits. But now \nI&#39;m thinking that the repetition element is unnecessary, we can just \nhand craft a set of funtional circuits that define a whole range of \ncomplexity. The circuits themselves might not describe anything \nmeaningful such as how to balance a pole, and so we have effectively \nabstracted the benchmarking problem away from the need to define it in \nterms of real world problems or simulations (which are hard to think up, \nhard to increase in complexity, hard to code, and normally consume loads \nof CPU time when they do get complex).\n\n\nColin\n\n\n\n\n\n\n\n"}}