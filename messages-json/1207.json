{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":115403844,"authorName":"John Arrowwood","from":"&quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;","profile":"jarrowwx","replyTo":"LIST","senderId":"jLUteKkmX9vqlbWIMPpn-XOplASB4_d8ZRHIxu4vdtq2-Noq7tnoaGs0-bFgzCzdcMT6uX2pGlYvvDNQcSOxLvgD_V1-hQwoTdm79Ckt","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Stagnation penalties","postDate":"1089414116","msgId":1207,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTItRjI0S0Nuek53UkM2SGkwMDAzNTliNkBob3RtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":1206,"nextInTime":1208,"topicId":1207,"numMessagesInTopic":1,"msgSnippet":"... Obviously, if you allow topological mutations every generation, and then put the mutation into a species based on closest fit with a threshold of ","rawEmail":"Return-Path: &lt;jarrowwx@...&gt;\r\nX-Sender: jarrowwx@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 90805 invoked from network); 9 Jul 2004 23:01:57 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m22.grp.scd.yahoo.com with QMQP; 9 Jul 2004 23:01:57 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.247.24)\n  by mta5.grp.scd.yahoo.com with SMTP; 9 Jul 2004 23:01:57 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Fri, 9 Jul 2004 16:01:57 -0700\r\nReceived: from 64.122.44.102 by by2fd.bay2.hotmail.msn.com with HTTP;\n\tFri, 09 Jul 2004 23:01:56 GMT\r\nX-Originating-Email: [jarrowwx@...]\r\nX-Sender: jarrowwx@...\r\nTo: neat@yahoogroups.com\r\nBcc: \r\nDate: Fri, 09 Jul 2004 16:01:56 -0700\r\nMime-Version: 1.0\r\nContent-Type: text/plain; format=flowed\r\nMessage-ID: &lt;BAY2-F24KCnzNwRC6Hi000359b6@...&gt;\r\nX-OriginalArrivalTime: 09 Jul 2004 23:01:57.0174 (UTC) FILETIME=[BBEB2D60:01C46608]\r\nX-eGroups-Remote-IP: 65.54.247.24\r\nFrom: &quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;\r\nReply-To: john@...\r\nSubject: Stagnation penalties\r\nX-Yahoo-Group-Post: member; u=115403844\r\nX-Yahoo-Profile: jarrowwx\r\n\r\n&gt;From: Derek James &lt;djames@...&gt;\n&gt;On Fri, 09 Jul 2004 22:08:33 +0100, Colin Green &lt;cgreen@...&gt; \n&gt;wrote:\n&gt; &gt; Yeh, in my experience this is an often encountered problem.\n&gt;\n&gt;Well, one thing to do is not even handle the stagnant species issue.\n&gt;:)  We have yet to implement this aspect of NEAT.  After reading on\n&gt;this list that it has helped with performance gains, we went back and\n&gt;looked at our evolving populations, to see what was going on with\n&gt;species.  We were afraid that perhaps stagnant species were\n&gt;overstaying their welcome and that we weren&#39;t getting good turnover in\n&gt;the population.\n&gt;\n&gt;But that turned out to not be the case.  We seem to have plenty of\n&gt;dynamism in our populations...that is, new species arising and old\n&gt;ones going extinct.  We also don&#39;t clamp the number of species, so we\n&gt;often have 20-30 species in an evolving population.\n\nObviously, if you allow topological mutations every generation, and then put \nthe mutation into a &#39;species&#39; based on closest fit with a threshold of \nsimilarity, you will have increasing numbers of species over time.  Then as \nthe new species become more fit than the old ones, fitness sharing will \nsqueeze the less fit ones down, eventually into extinction.  So that is to \nbe expected.\n\nThere is one potential gotcha in relying on that, though.  First, it is \nassumed that you place a cap on the population size.  Now suppose the domain \nis large and the successful network will have to be large and complex.  \nDuring the early phases of the search, every species will be almost equally \nbad.  Thus, they will get roughly the same number of offspring.  Which means \nthat while the number of species grows unbounded, the number of offspring \nper species gets to be so small that the searching will become increasingly \ninefficient, and if you implement elitism, it could stop all together.  You \ncould have a target population size of 100 networks, and end up with 100 \nspecies, that just keep passing their champions from generation to \ngeneration, never changing.  You won&#39;t see it in a simpler domain, but as \nthe domain grows, the risk of that happening gets greater.\n\nAnd then there&#39;s me.  I need the stagnation penalty in order to proceed at \nall.  I don&#39;t rely on randomness to determine when new species evolve.  I \nrely on the stagnation penalty in order to make room in the population for \nadditional topologies.  As topologies grow stagnant, their penalty \nincreases, decreasing their portion of the population for offspring.  Of \ncourse, the more fit ones take up the slack.  Except that there is an \noffspring limit per topology.  That is what makes room for new topologies to \nevolve.  Only when there is room do I allow mutations that introduce \nadditional topology.\n\nI do this deliberately, so that every topology gets a fair chance to \noptimize before resources are taken away from it by the creation of a new \none.  Otherwise, I am dependant on &#39;tuning&#39; to control the rate of the \nmutation.  Turned up too high, too many topologies would get created, and \nthe search becomes less efficient with an ever increasing possibility of \nmissing a solution.  Too low, and the search proceeds very slowly, spending \ncountless cycles wastefully evaluating weight variations on topologies that \ncan&#39;t possibly solve the problem.  It could flutter around the top of the \ntopology maximum, waiting for a random event which allows a new topology to \nevolve.  With an experiment that may take months or years, I can&#39;t afford to \nhave runs that never find a solution because of poor tuning.  This is my \nsolution to that problem. :)\n\n-- John\n\n\n\n"}}