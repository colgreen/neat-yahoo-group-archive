{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":115403844,"authorName":"John Arrowwood","from":"&quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;","profile":"jarrowwx","replyTo":"LIST","senderId":"3GiHrFedHpKowcB8FaDdX40DzupbmqiBmwjArVmXDg39VhTz4Ylb1W1jCLLluffgRD6iwvbKXetTzyDuvLbMdA-7YPUFGyvA6vVn7yzq","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Computation Time","postDate":"1088193791","msgId":1142,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTItRjIwZXJma2RMM1F0T2QwMDAwOThmYkBob3RtYWlsLmNvbT4="},"prevInTopic":1141,"nextInTopic":1163,"prevInTime":1141,"nextInTime":1143,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"Before I respond...good news...it s up and running!  All the fundamental components are operational, and I ve kicked off a number of client processes to do the","rawEmail":"Return-Path: &lt;jarrowwx@...&gt;\r\nX-Sender: jarrowwx@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 20694 invoked from network); 25 Jun 2004 20:03:36 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m11.grp.scd.yahoo.com with QMQP; 25 Jun 2004 20:03:36 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.247.20)\n  by mta3.grp.scd.yahoo.com with SMTP; 25 Jun 2004 20:03:36 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Fri, 25 Jun 2004 13:03:12 -0700\r\nReceived: from 64.122.44.102 by by2fd.bay2.hotmail.msn.com with HTTP;\n\tFri, 25 Jun 2004 20:03:11 GMT\r\nX-Originating-Email: [jarrowwx@...]\r\nX-Sender: jarrowwx@...\r\nTo: neat@yahoogroups.com\r\nBcc: \r\nDate: Fri, 25 Jun 2004 13:03:11 -0700\r\nMime-Version: 1.0\r\nContent-Type: text/plain; format=flowed\r\nMessage-ID: &lt;BAY2-F20erfkdL3QtOd000098fb@...&gt;\r\nX-OriginalArrivalTime: 25 Jun 2004 20:03:12.0140 (UTC) FILETIME=[71845CC0:01C45AEF]\r\nX-eGroups-Remote-IP: 65.54.247.20\r\nFrom: &quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;\r\nReply-To: john@...\r\nSubject: Re: [neat] Computation Time\r\nX-Yahoo-Group-Post: member; u=115403844\r\nX-Yahoo-Profile: jarrowwx\r\n\r\nBefore I respond...good news...it&#39;s up and running!  All the fundamental \ncomponents are operational, and I&#39;ve kicked off a number of client processes \nto do the distributed fitness evaluation.  I&#39;ll let them run over the \nweekend (while I go play up in the mountains) and see if it makes any \nprogress.  I anticipate some bugs to fix, but who knows, maybe I&#39;ve killed \nenough of them to let it limp along? :)\n\n&gt;From: Ian Badcoe &lt;ian_badcoe@...&gt;\n&gt;\n&gt;Could you use float throughout instead of double?  That would reduce memory\n&gt;bandwidth requirements...\n\nI could try it and see what kind of difference it makes.  But this is a \nmathematical model domain, not a controller, so the added accuracy may \nactually be beneficial in the long run.  For a controller domain, I&#39;d even \nconsider using integers...\n\n&gt;Top, left, bottom and right are stored as data, that&#39;s 16 megs of memory\n&gt;access.  Why not calculate them with nested loops.  Or even maths within\n&gt;your one loop -- although, since your sizes are not powers of 2, you&#39;d need\n&gt;divides (modulus also contains a divide) so nested loops are probably the\n&gt;way to go.\n\nI&#39;ll look into that.  I don&#39;t see why I couldn&#39;t do it.\n\n&gt;Squaring and summing reasonably sized doubles should not generate NaN.  I&#39;d \n&gt;worry about the type of values coming out of activate.\n\nBut the initial network(s) being evaluated can&#39;t possibly solve the problem, \nso their error is high.  If I square them as I go, I&#39;m taking the error \nvalue squared over a million times.  I agree, it shouldn&#39;t be NaN, but it \nwas, so I&#39;ve got to look into why.  At the time, I was more focused on \nmaking sure the code compiled and ran! :)\n\n&gt;It might indicate out of range values passed into exp (you did have exp in \n&gt;your activation\n&gt;function?)\n\nActually, at the time, no...\n\nThe output node is a summation node.  No sigmoid.  For a reason:  The output \nranges need to be able to be more than +/-1.  So when I was first doing it, \nthere were no sigmoids.  The sigmoids appear later as hidden nodes are \nadded.\n\n&gt;(if I may blow the trumpet for my inv-abs activation function here, it\n&gt;should be more-stable w.r.t extreme numbers...)\n\nI know you&#39;ve posted that before, but would you send it again so I have it \nfor easy reference? :)\n\n&gt;Taking the reciprocal of the fitness may not be the best way to treat\n&gt;it.\n\nNo, definitely not.  Now that I have the distributed portion working, I&#39;m \ngoing to put some more work into that fitness evaluation.\n\n&gt;Since you only need a ranking (or order) for fitnesses, and not absolute\n&gt;values, why not leave it non-reciprocal, rename it as &quot;unfitness&quot; and\n&gt;reverse the selection logic?\n\nI&#39;d have to change my NEAT code, and I&#39;m hesitant to do that, because then I \nhave to do it for all experiments.  But I am considering that option.\n\n&gt;Other than that, the inside of activate will be more significant than the\n&gt;detail of this loop.  Do you have an example of &quot;activate&quot; generated the\n&gt;way you (currently) plan, and using network data of about the expected size\n&gt;and connection density?\n\nUntil the experiment gets well underway and the networks get larger, the \nactivate functions are a bit small, but...\n\nrun the following:\n\nwget http://www.hanlonsrazor.com:81/neat/iex/get_sample.cgi -O fitness.c\n\nThat will pretend to be a client, fetch a fitness evaluation source file, \nand save it as fitness.c.\n\n&gt;I think your approach is looking pretty efficient, given the presupposition\n&gt;of processing 500 nets over one picture.  Which in turn sounds good, given\n&gt;your intention to break things up for grid-style computing (although you\n&gt;may need to think about the batch-size when you know about actual speeds\n&gt;and node-reliability etc etc ).\n\nCurrent batch size is the evaluation of the entire population against one \ninput sample of 9x9 pixels with an expected 144x144 output.  As the number \nof networks in the population increase (it starts small and grows a little \nper generation up to a limit of 1000), and as the complexity of individual \nnetworks increase, the time required to perform the fitness evaluation for \nthe whole population will grow.  But it would be very inefficient to break \nthe work packets down any smaller, and a pain in the butt to make it any \nlarger.  So, the problem itself tends to dicatate the batch size. :)\n\n&gt;          Ian Badcoe\n\nThanks for all the input.  It is most appreciated!\n\n\n\n"}}