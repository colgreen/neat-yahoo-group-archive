{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"E0-jyr3vh-R2GDzyyvOEAown5kfy7MFiVqiTC_EKi3b0OLkFvInNOJBN_Oy-vb3hmL8_NjU_OZitE6VTRUgac4Lg6NhoUMDdOw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Function Regression / Candidate function for  implementation comparisons.","postDate":"1130190938","msgId":2362,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzNUQ1ODVBLjUwNTAzMDJAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMi4zLjQuMC4yMDA1MTAyNDExMjUxMS4wMGEzNDUyOEBwb3AubWFpbC55YWhvby5jby51az4=","referencesHeader":"PDQzNTkwQTk4LjkwOTAwMDJAZHNsLnBpcGV4LmNvbT4gPDYuMi4zLjQuMC4yMDA1MTAyNDExMjUxMS4wMGEzNDUyOEBwb3AubWFpbC55YWhvby5jby51az4="},"prevInTopic":2358,"nextInTopic":0,"prevInTime":2361,"nextInTime":2363,"topicId":2351,"numMessagesInTopic":6,"msgSnippet":"... For each sample point - the absolute difference between the NNs output and the expected value. ... Hmm I was aware of the use of squared error as I use it","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 81740 invoked from network); 24 Oct 2005 21:55:35 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m6.grp.scd.yahoo.com with QMQP; 24 Oct 2005 21:55:35 -0000\r\nReceived: from unknown (HELO galaxy.systems.pipex.net) (62.241.162.31)\n  by mta4.grp.scd.yahoo.com with SMTP; 24 Oct 2005 21:55:34 -0000\r\nReceived: from [10.0.0.10] (81-86-161-87.dsl.pipex.com [81.86.161.87])\n\tby galaxy.systems.pipex.net (Postfix) with ESMTP id 33E52E0002BA\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 24 Oct 2005 22:55:34 +0100 (BST)\r\nMessage-ID: &lt;435D585A.5050302@...&gt;\r\nDate: Mon, 24 Oct 2005 22:55:38 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;43590A98.9090002@...&gt; &lt;6.2.3.4.0.20051024112511.00a34528@...&gt;\r\nIn-Reply-To: &lt;6.2.3.4.0.20051024112511.00a34528@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Function Regression / Candidate function for  implementation\n comparisons.\r\nX-Yahoo-Group-Post: member; u=127853030; y=BVwuB9IQynD_6CnLOeg6-5lpCHFagzjTK-TW8WBRBTws9TvZuPzJ\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;&gt;Curently I&#39;m trying to minimize a root of the error since the error is\n&gt;&gt;always less than 1.0. I haven&#39;t settled on which root yet, but if we can\n&gt;&gt;settle on a precise fitness function then I think (hope) this might\n&gt;&gt;serve as the basis for cross implementation comparisons. Other variables\n&gt;&gt;are:\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Not sure how you are defining error here,\n&gt;\nFor each sample point - the absolute difference between the NNs output \nand the expected value.\n\n&gt; but normally in these cases \n&gt;one tries to minimise the sum of the squares of the errors on each \n&gt;data point.  This is partly tradition, partly because the squaring \n&gt;makes all errors +ve, partly because its the same as geometric mean \n&gt;or pythagoean distance -- if you treat each data point as defining a \n&gt;separate &quot;dimension of error&quot; -- and partly because it gives the \n&gt;biggest error the highest priority to be fixed...\n&gt;  \n&gt;\nHmm I was aware of the use of squared error as I use it in other fitness \nfunctions, but somehow I convinced myself that taking the root was a \ngood idea. Using a root of the error the curve goes the other way, so \nthe error falls away faster as the correct value is approached, this \nputs a priority on not moving away from correct points at the expense of \nnot moving points that are further out. Well ok clearly this is wrong.  \nWhat I was trying to achieve was this; take estimated points A and B where :\n\nA_error = 0.1\nB_error = 0.5.\n\nNow if the two points move towards the correct position by 0.05 then \npoint A is twice as accurate as before(has half the error), but B has \nonly improved marginally(in proportional terms), thus given the choice \nbetween moving A or B then I chose A. I guess the logic is flawed \nbecause we need to find the rough shape first and refine later, whereas \ntaking the root tends to find good fits for parts of the shape at the \nexpense of the overall shape.\n\nHey I never said I was a mathematician ;)\n\nColin\n\n\n\n"}}