{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"pjX15gsBo7VEVGjwUL2RHb4Q815DWiZxEFK9fqBaYmkFlTni-UlMhPtzky6A1YW0Au9_Vqiy6llzqG_Xx1_dq7VSsvaYhg6_7g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Computation Time","postDate":"1085839427","msgId":895,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwQjg5ODQzLjUwNTAxMDJAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDAwMjkwMWM0NDU3YiQ5OTAyMTE0MCQzMjAxYThjMEBORVdBR0U+","referencesHeader":"PEJBWTItRjZwYTUwVUl4Z3pnZ2YwMDAzNWI4MkBob3RtYWlsLmNvbT4gPDAwZWUwMWM0NDUyZCQzNGI0MWIwMCQzMjAxYThjMEBORVdBR0U+IDxXb3JsZENsaWVudC1GMjAwNDA1MjkxMTQyLkFBNDIwNDAxMzJAb2N0YWdhdGUuY29tPiA8MDAyOTAxYzQ0NTdiJDk5MDIxMTQwJDMyMDFhOGMwQE5FV0FHRT4="},"prevInTopic":894,"nextInTopic":896,"prevInTime":894,"nextInTime":896,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"I wonder. Is there a performance gain to be had from using integer based weights instead of foating point values? Although modern day CPU s have dedicated","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 36639 invoked from network); 29 May 2004 14:03:49 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m23.grp.scd.yahoo.com with QMQP; 29 May 2004 14:03:49 -0000\r\nReceived: from unknown (HELO shockwave.systems.pipex.net) (62.241.160.9)\n  by mta5.grp.scd.yahoo.com with SMTP; 29 May 2004 14:03:49 -0000\r\nReceived: from dsl.pipex.com (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby shockwave.systems.pipex.net (Postfix) with ESMTP id 772671C00261\n\tfor &lt;neat@yahoogroups.com&gt;; Sat, 29 May 2004 15:03:45 +0100 (BST)\r\nMessage-ID: &lt;40B89843.5050102@...&gt;\r\nDate: Sat, 29 May 2004 15:03:47 +0100\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;BAY2-F6pa50UIxgzggf00035b82@...&gt; &lt;00ee01c4452d$34b41b00$3201a8c0@NEWAGE&gt; &lt;WorldClient-F200405291142.AA42040132@...&gt; &lt;002901c4457b$99021140$3201a8c0@NEWAGE&gt;\r\nIn-Reply-To: &lt;002901c4457b$99021140$3201a8c0@NEWAGE&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.9\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: Computation Time\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nI wonder. Is there a performance gain to be had from using integer based \nweights instead of foating point values? Although modern day CPU&#39;s have \ndedicated floating point arithmetic circuits built-in I think integer \nmaths still tends to be faster. There could be 10-30%  right there. All \nyou would have to do is scale up the weight values in the genome(if you \nwant to keep the same genome code) and use a modified activation \nfunction for the new signal value range.\n\nI got the idea whilst reading this paper on Neural Network \nimplementations on FPGAs:\n\nhttp://www.itee.uq.edu.au/~peters/papers/zhu_sutton_fpl2003.pdf\n\nImplementing integer multipliers require smaller circuits on an FPGA \nthan floating point ones, thus you can get larger ANNs onto a given FPGA \n- not sure what size of ANN an FPGA can represent though. Given the \noverhead of configuring FPGA circuitry there exists a network size \nthreshold below which it is faster to run the network on a general \npurpose CPU, above the size it&#39;s better to spend the extra time loading \nthe network onto an FPGA. But of course if FPGA&#39;s have a very limited \ncapacity then they only have a small window of usefulness\n\nI should also like to reiterate my previous  thoughts on phased \nsearching with regard to optimization. In Derek and Phil&#39;s paper they \neffectively showed that complexification alone allows some &#39;bloat&#39; into \nthe population, by which I mean redundant neurons and connections. Even \nwith the blended runs the graphs in the paper show that the population \nnow has a wide range of genomes from very simple ones to very complex \n(bloated) ones. A phased search would periodically remove ALL redundancy \nfrom the entire population, thus improving the efficiency of a search \nfrom a computational expense point of view.  Now you could argue (Derek \nmade this  point) that the &#39;trim&#39; phase is going backwards in the search \nspace and therefore it will take extra time to work back forwards again. \nI don&#39;t think this is the case though. A population is just as fit after \ntrimming as it was before, and the search then continues out in \ndiffferent directions in the search space than previously - except now \nthere may be a slightly larger structures than in earlier phases. But \nthe point being that any structure that makes it through the trimming \nphase has proven itself to be useful.\n\nI believe that allowing the population to complexify/bloat unbounded is \na very important part of the NEAT search process, but that it becomes \ndetremental in medium to long searches. Phased searching should clean up \nall of the junk that hasn&#39;t been incorporated functionaly into the \nnetworks and should give search speeds a nice boost.\n\nSo whereas I do think the network optimization discussion is an \nimportant and interesting one I feel that if we are optimizing the \noperation of bloated networks, that we are really going about things in \nthe wrong order. Get the search technique right/optimized first and THEN \noptimize the nuts and bolts code. This is perhaps slightly hipocritical \nsince I optimized some of my code recently, but I did only do some \nsimple/obvious optimizations - nothing radical :)  \n\nRemember that &quot;premature optimization is the root of all evil.&quot;  - Well \nsome of it anyway :)\n\nColin.\n\n\n"}}