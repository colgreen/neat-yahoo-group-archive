{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"QyM1isHv12JYnITemYYvx9tD9tVDbhtYpHzm41zWKhkr_KSE4o2Kt4wCqYPiBPHF1l-GOfySw7jQzXOP3IUViAbYU8vwNMY87pXYBos306wO","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: An improvement over object evolution with CPPNs","postDate":"1226614401","msgId":4447,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdmaThxMStkNHFhQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGdmaTM2MitzODFlQGVHcm91cHMuY29tPg=="},"prevInTopic":4444,"nextInTopic":4450,"prevInTime":4446,"nextInTime":4448,"topicId":4444,"numMessagesInTopic":14,"msgSnippet":"Peter, sounds interesting.  I ll be interested to see the executable version to get an intuition of the kinds of structures your method creates. About the","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 60632 invoked from network); 13 Nov 2008 22:13:22 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m55.grp.scd.yahoo.com with QMQP; 13 Nov 2008 22:13:22 -0000\r\nX-Received: from unknown (HELO n19.bullet.mail.re1.yahoo.com) (69.147.102.102)\n  by mta17.grp.scd.yahoo.com with SMTP; 13 Nov 2008 22:13:22 -0000\r\nX-Received: from [68.142.237.90] by n19.bullet.mail.re1.yahoo.com with NNFMP; 13 Nov 2008 22:13:22 -0000\r\nX-Received: from [69.147.65.147] by t6.bullet.re3.yahoo.com with NNFMP; 13 Nov 2008 22:13:21 -0000\r\nX-Received: from [66.218.66.80] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 13 Nov 2008 22:13:21 -0000\r\nDate: Thu, 13 Nov 2008 22:13:21 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gfi8q1+d4qa@...&gt;\r\nIn-Reply-To: &lt;gfi362+s81e@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: An improvement over object evolution with CPPNs\r\nX-Yahoo-Group-Post: member; u=54567749; y=wCxukulI4GmMH8FBw2dgloDdhkAL8ta_ZMol3cJ0KD6ldT2iTFFC\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nPeter, sounds interesting.  I&#39;ll be interested to see the executable\nversio=\r\nn to get an intuition of the kinds of structures your method\ncreates.  \n\nAb=\r\nout the links:  My guess is that it&#39;s best to compute their values\nat the e=\r\nnd of development since that is the &quot;final geometry&quot; of the\nbrain that I be=\r\nlieve makes sense to exploit.  In other words, it gives\nthe brain the oppor=\r\ntunity to exploit the changes occur over\ndevelopment.  Otherwise, it would =\r\nseem that those changes and the\ngenes that encode them are not really being=\r\n used for any purpose.\n\nken\n\n--- In neat@yahoogroups.com, &quot;petar_chervenski=\r\n&quot; &lt;petar_chervenski@...&gt;\nwrote:\n&gt;\n&gt; Hi all!\n&gt; \n&gt; For those of you who are n=\r\not familiar with this particular subject, it \n&gt; is about physical object ev=\r\nolution with CPPNs. There are some problems \n&gt; when trying to use CPPNs dir=\r\nectly to map onto 2/3D objects with \n&gt; finite, though variable (among indiv=\r\niduals) size. I am particularly\ninterested in this issue because it also ho=\r\nlds the key to the \n&gt; automatic generation of HyperNEAT substrates as well.=\r\n And perhaps it \n&gt; may open up new ways to have content generation in games=\r\n, too. And \n&gt; Artificial Life, of course.\n&gt; \n&gt; I remember that Ken suggeste=\r\nd that animal morphologies and such things \n&gt; may be easier to describe in =\r\nhigher dimensional space and then mapped \n&gt; back to 2D/3D, just like in Hyp=\r\nerNEAT. Day after day I was trying to \n&gt; find such a higher-dimensional des=\r\ncription of something that has \n&gt; limbs, joints, all with variable numbers =\r\nand size. Even in the most \n&gt; simplistic 2D case, I never got even close to=\r\n such an elegant \n&gt; solution. \n&gt; \n&gt; Suppose I want to have a 2D creature wi=\r\nth rectangular limbs. But how \n&gt; many of them is unknown. How they are conn=\r\nected - too. A limb is  \n&gt; represented as position in 2D and width/height a=\r\nnd an angle of \n&gt; orientation. This makes 5D space in which I have to query=\r\n all possible \n&gt; things and ask the CPPN if there is a limb or not. Sounds =\r\ntoo \n&gt; expensive, and more, even if I do that, there are \n&gt; algorithmic/imp=\r\nlementation issues that are just too hard. \n&gt; \n&gt; The problem I had is, actu=\r\nally, that I missed the fact that a CPPN is \n&gt; an infinite mathematical des=\r\ncription of the phenotype. Any use of a \n&gt; CPPN involves approximating the =\r\nphenotype with some kind of level of \n&gt; detail. The CPPN makes no differenc=\r\ne if I use it for 16x16 visual \n&gt; substrate or 65536x65536, for example (no=\r\nte: I mean not in phenotype \n&gt; evaluation). So there must be a way to have =\r\nsuch level of detail \n&gt; scaling in animal morphologies as well. \n&gt; \n&gt; So I =\r\nwent back to the cellular growth approach, looking for what I \n&gt; missed bef=\r\nore. The biggest unsolved problem with my previous system is \n&gt; that coordi=\r\nnates may grow to infinite and the activation functions are \n&gt; actually bes=\r\nt suited to work in [-1..1] substrates (given the fact I \n&gt; have fixed CPPN=\r\n weight range and mutation powers). Plus, the CPPN is \n&gt; requeried on each =\r\ncell on each timestep in the process of development. \n&gt; Too expensive and a=\r\ns the phenotype gets bigger, development slows down \n&gt; to a rate that is no=\r\nt acceptable. And more, it is not clear how \n&gt; scaling could work if I want=\r\n to, say, have the same object, the same \n&gt; shape, much bigger, but the cel=\r\nl size and the coordinate frames - \n&gt; still fixed. Something was terribly w=\r\nrong with that model. But I think \n&gt; I have finally found a solution! Or at=\r\n least something very close to \n&gt; it.\n&gt; \n&gt; The CPPN already encodes all the=\r\n development of a phenotype with any \n&gt; precision via composing coordinate =\r\nframes. A whole phenotype with all \n&gt; its patterns with infinite (well at l=\r\neast huge) precision can be fit \n&gt; into just the patch of [-1 .. 1] in Cart=\r\nesian space. Assume I will be \n&gt; talking about 2D space only for simplicity=\r\n. That patch [-1 .. 1] in \n&gt; both X and Y I call &quot;the Egg&quot;. \n&gt; \n&gt; The first=\r\n approach I took with the idea of the egg was too simple, but \n&gt; it is inte=\r\nresting to know about. After the CPPN &quot;paints&quot; the egg with \n&gt; cell color a=\r\nnd stuff, then it is re-queried again, this time the \n&gt; outputs are 2D vect=\r\nors. The magnitude of these vectors was re-scaled \n&gt; to be within [0 .. MAX=\r\n_DISTANCE]. So the entire phenotype building \n&gt; procedure became very simpl=\r\ne - first build the egg, then send each \n&gt; cell where its vector points. We=\r\nll that looks so ugly in practice, \n&gt; with empty holes and.. eh.. forget th=\r\nat! This is not anything more \n&gt; advanced than just painting the CPPN outpu=\r\nt directly like in \n&gt; Picbreeder, just a fancy way of doing the same. \n&gt; \n&gt;=\r\n Then I realized that these &quot;cells&quot; can be also thought of an \n&gt; abstractio=\r\nns of &quot;masses/groups of cells&quot;. In nature, cells don&#39;t just \n&gt; go &quot;that way=\r\n&quot; moving through each other, but stick together. Entire \n&gt; tissues develop =\r\nfast as a mass of cells divides and increases size. So \n&gt; I had this insigh=\r\nt. I changed the concept of a cell and improved over \n&gt; the previous model.=\r\n A cell is a circle with a radius, has a color and \n&gt; has mass. It also has=\r\n more properties but more on that after a few \n&gt; other words. \n&gt; \n&gt; This is=\r\n the key idea. In my previous model, the CPPN was instructing a \n&gt; big mass=\r\n of many cells on the fly, during development time. It took \n&gt; advantage of=\r\n using time as input, so the development was like a \n&gt; spatial pattern in 4=\r\nD. But it suffered from the coordinates and other \n&gt; problems I mentioned a=\r\nbove. In this model, the CPPN does not operate \n&gt; on the cells during devel=\r\nopment. The CPPN predetermines the fate of \n&gt; each cell right in the egg, b=\r\nefore development begins. Everything else \n&gt; during development is a conseq=\r\nuence of the cell&#39;s fate and the \n&gt; internal 2D physics world in which the =\r\nphenotype develops. So, in \n&gt; simpler words, the CPPN is programming the eg=\r\ng.\n&gt; \n&gt; A cell has the following properties that are determined by the CPPN=\r\n:\n&gt; - Color (of course :)\n&gt; - Growth rate. How fast it increases size in % =\r\nof circle area. \n&gt; - Time to begin growth. It is a value in [0 .. 1] where =\r\n1 is the total \n&gt; number of time steps allocated for development.\n&gt; - Growt=\r\nh time duration. Between some min and max value.\n&gt; - Angle for division spl=\r\nitting. Between [-1 .. 1], during development \n&gt; rescaled to [0 .. pi]\n&gt; \n&gt;=\r\n As cells grow, they will inevitably overlap each other. This issue is \n&gt; h=\r\nandled by the internal simple 2D physics engine that adds forces if \n&gt; the =\r\ncircles overlap. So they eventually will converge to a state that \n&gt; they o=\r\nnly touch each other, and the whole phenotype bigger of course. \n&gt; Cells ca=\r\nn divide. Division is automatic. If a cell&#39;s radius reaches a \n&gt; a fixed tr=\r\neshold value, it is split into 2 cells, each one having \n&gt; exactly half the=\r\n area of the mother cell. The mother cell is split \n&gt; along a predetermined=\r\n angle, so the CPPN can control the overall \n&gt; directions of growth for the=\r\n phenotype. The 2 children overlap in the \n&gt; beginning, but as time progres=\r\nses, they are pulled apart by the \n&gt; physics. Children cells inherit the pr=\r\noperties of the mother, but \n&gt; change their positions and reset their lifet=\r\nime timers. The cells in \n&gt; the egg count their children and their grandchi=\r\nldren as well. No more \n&gt; than 3 generations of division can occur, in orde=\r\nr to keep the number \n&gt; of cells relatively small for performance considera=\r\ntions. Though this \n&gt; value can be changed. \n&gt; \n&gt; In order to keep the phen=\r\notype solid, not torn apart from internal \n&gt; velocities, a mass-spring grid=\r\n mesh is created in the egg before \n&gt; development. Cell divisions update th=\r\ne mesh. The mass-spring mesh plus \n&gt; the cell-to-cell overlapping preventio=\r\nn forces act together as the \n&gt; phenotype increases in size and number of c=\r\nells. Eventually it will \n&gt; become more stiff, where large group of recentl=\r\ny divided cells are \n&gt; packed together. I don&#39;t know if that is a bug or a =\r\nfeature :) \n&gt; \n&gt; There is one insight I had after seeing the results. Watch=\r\ning the mesh \n&gt; develops, and some with interesting shapes and configuratio=\r\nns, makes \n&gt; me think this approach is very well suited to evolve HyperNEAT=\r\n \n&gt; substrates as well. In fact I am about to add brains to these \n&gt; creatu=\r\nres right this evening :) But I don&#39;t know, if the links should \n&gt; be deter=\r\nmined from the beginning right in the egg or after \n&gt; development. Any sugg=\r\nestions? \n&gt; \n&gt; Well this is it. I hope this may be some advance into the fi=\r\neld. I \n&gt; will be happy to see any thoughts about this stuff. I&#39;ll post an =\r\n\n&gt; executable compiled with VS2008 in the files section now, so you will \n&gt;=\r\n see it in action. Note however, that it is just a demo of development, \n&gt; =\r\nnot evolution. There is no doubt that this thing combined with NEAT \n&gt; will=\r\n make at least something very very cool. :) \n&gt; \n&gt; Peter\n&gt;\n\n\n\n"}}