{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":200957992,"authorName":"jgmath2000","from":"&quot;jgmath2000&quot; &lt;jgmath2000@...&gt;","profile":"jgmath2000","replyTo":"LIST","senderId":"MSgDLckPnLR8Am4SJp9fzJtp2Qms2bOCCnUdzKXnNnZFsgLDtqLZAOzQJvDhpxGC5QMSOg52SsIo6n_uDuN0d8FSG9Bo_M0mGLo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: my Xor experiment","postDate":"1281244124","msgId":5312,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGkzbGU0cytjYmFlQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGkza3VmMCtsbDBuQGVHcm91cHMuY29tPg=="},"prevInTopic":5311,"nextInTopic":5313,"prevInTime":5311,"nextInTime":5313,"topicId":5311,"numMessagesInTopic":3,"msgSnippet":"Hey Nick, To use HyperNEAT, you need to create a LayeredSubstrate. The CPPN takes as inputs the geometry of the problem domain.  In the case of something like","rawEmail":"Return-Path: &lt;jgmath2000@...&gt;\r\nX-Sender: jgmath2000@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 99819 invoked from network); 8 Aug 2010 05:08:59 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m8.grp.sp2.yahoo.com with QMQP; 8 Aug 2010 05:08:59 -0000\r\nX-Received: from unknown (HELO n40b.bullet.mail.sp1.yahoo.com) (66.163.168.154)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Aug 2010 05:08:59 -0000\r\nX-Received: from [69.147.65.148] by n40.bullet.mail.sp1.yahoo.com with NNFMP; 08 Aug 2010 05:08:45 -0000\r\nX-Received: from [98.137.34.36] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 08 Aug 2010 05:08:45 -0000\r\nDate: Sun, 08 Aug 2010 05:08:44 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;i3le4s+cbae@...&gt;\r\nIn-Reply-To: &lt;i3kuf0+ll0n@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;jgmath2000&quot; &lt;jgmath2000@...&gt;\r\nSubject: Re: my Xor experiment\r\nX-Yahoo-Group-Post: member; u=200957992; y=4gZQi_3-dZAecNXvBUtppiTLklA4YsDhQTIfyqHiOwgDyDR_7Q\r\nX-Yahoo-Profile: jgmath2000\r\n\r\nHey Nick,\n\nTo use HyperNEAT, you need to create a LayeredSubstrate.\n\nThe CP=\r\nPN takes as inputs the geometry of the problem domain.  In the case of some=\r\nthing like checkers or vision, the geometry is 2d because we are looking at=\r\n a checkers board or an image, which are inherently 2d structures.\n\nBecause=\r\n Xor takes two inputs, you can treat Xor as a 2d problem as well.  So, your=\r\n CPPN inputs should be X1, Y1, X2, and Y2 (and optionally a bias code). You=\r\n should have a CPPN output for each layer of connections, so your cppn outp=\r\nuts should be &quot;Input_Hidden&quot; and &quot;Hidden_Output&quot;.  You should name your lay=\r\ners &quot;Input&quot;, &quot;Hidden&quot;, and &quot;Output&quot;.\n\nUsing this information, you should be=\r\n able to construct a LayeredSubstrate object and pass it the CPPN. If you s=\r\net it up right, the LayeredSubstrate will generate the substrate from the C=\r\nPPN automatically.\n\nJason G.\n\n--- In neat@yahoogroups.com, &quot;ker_31_toluca&quot; =\r\n&lt;ker_31_toluca@...&gt; wrote:\n&gt;\n&gt; Hi,\n&gt; i am trying to do my own Xor experimen=\r\nt, and what I want is that a CPPN encode a function for the weights of 3 la=\r\nyer network (inputs, hidden, outputs) . These would be the variables for th=\r\ne CPPN:\n&gt; Src: source node \n&gt; Dst: destination node \n&gt; Lay: the layer (1-Hi=\r\ndden, 2-Output)\n&gt; \n&gt; So, I changed the code in XorExperiment::createInitial=\r\nPopulation() to use these genes:\n&gt; \n&gt; genes.push_back(GeneticNodeGene(&quot;Bias=\r\n&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; genes.push_back(GeneticNodeGene(&quot;Src&quot;,&quot;Netwo=\r\nrkSensor&quot;,0,false));\n&gt; genes.push_back(GeneticNodeGene(&quot;Dst&quot;,&quot;NetworkSensor=\r\n&quot;,0,false));\n&gt; genes.push_back(GeneticNodeGene(&quot;Lay&quot;,&quot;NetworkSensor&quot;,0,fals=\r\ne));        genes.push_back(GeneticNodeGene(&quot;Output&quot;,&quot;NetworkOutputNode&quot;,1,=\r\nfalse,ACTIVATION_FUNCTION_SIGMOID));\n&gt; \n&gt; Done that, I have modified the Pr=\r\nocessGroup() function to query the weights and from those weights create a =\r\nnetwork that will be evaluated for fitness:\n&gt; \n&gt;     void XorExperiment::pr=\r\nocessGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt; generation)\n&gt;     {\n&gt;       =\r\n  NEAT::FastNetwork&lt;float&gt; network =3D group[0]-&gt;spawnFastPhenotypeStack&lt;fl=\r\noat&gt;();\n&gt;         vector&lt;NEAT::NetworkNode*&gt; nodes;\n&gt;         vector&lt;NEAT::=\r\nNetworkLink*&gt; links;\n&gt;         \n&gt;         double weight;\n&gt;       \n&gt;        =\r\n int out,in;\n&gt;         \n&gt;         nodes.push_back(new NEAT::NetworkNode(&quot;In=\r\nput1&quot;,false));         //      0\n&gt;         nodes.push_back(new NEAT::Networ=\r\nkNode(&quot;Input2&quot;,false));         //      1\n&gt;         nodes.push_back(new NEA=\r\nT::NetworkNode(&quot;Hidden1&quot;,true));         //      2\n&gt;         nodes.push_bac=\r\nk(new NEAT::NetworkNode(&quot;Hidden2&quot;,true));         //      3\n&gt;         nodes=\r\n.push_back(new NEAT::NetworkNode(&quot;Hidden3&quot;,true));         //      4\n&gt;     =\r\n    nodes.push_back(new NEAT::NetworkNode(&quot;Output&quot;,true));          //     =\r\n 5\n&gt;         nodes.push_back(new NEAT::NetworkNode(&quot;Bias&quot;,true));          =\r\n  //      6\n&gt;         \n&gt;         network.reinitialize();   \n&gt;         netwo=\r\nrk.setValue(&quot;Bias&quot;,0.3f);\n&gt; \n&gt;   \n&gt;         // calculate link values betwee=\r\nn input and hidden nodes\n&gt;         // inputs -&gt; hidden\n&gt;         network.se=\r\ntValue(&quot;Lay&quot;,1);\n&gt;         // inputs -&gt; hidden1\n&gt;         network.setValue(=\r\n&quot;Src&quot;,1); network.setValue(&quot;Dst&quot;,1); network.update();\n&gt;         links.push=\r\n_back(new NEAT::NetworkLink(nodes[0],nodes[2],true,network.getValue(&quot;Output=\r\n&quot;)));\n&gt;         network.setValue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,1); netwo=\r\nrk.update();\n&gt;         links.push_back(new NEAT::NetworkLink(nodes[1],nodes=\r\n[2],true,network.getValue(&quot;Output&quot;)));\n&gt;         // inputs -&gt; hidden2\n&gt;    =\r\n     network.setValue(&quot;Src&quot;,1); network.setValue(&quot;Dst&quot;,2); network.update()=\r\n;\n&gt;         links.push_back(new NEAT::NetworkLink(nodes[0],nodes[3],true,ne=\r\ntwork.getValue(&quot;Output&quot;)));\n&gt;         network.setValue(&quot;Src&quot;,2); network.se=\r\ntValue(&quot;Dst&quot;,2); network.update();  \n&gt;         links.push_back(new NEAT::Ne=\r\ntworkLink(nodes[1],nodes[3],true,network.getValue(&quot;Output&quot;)));\n&gt;         //=\r\n inputs -&gt; hidden3\n&gt;         network.setValue(&quot;Src&quot;,1); network.setValue(&quot;D=\r\nst&quot;,3); network.update();  \n&gt;         links.push_back(new NEAT::NetworkLink=\r\n(nodes[0],nodes[4],true,network.getValue(&quot;Output&quot;)));\n&gt;         network.set=\r\nValue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,3); network.update();  \n&gt;         li=\r\nnks.push_back(new NEAT::NetworkLink(nodes[1],nodes[4],true,network.getValue=\r\n(&quot;Output&quot;)));\n&gt; \n&gt;         // hidden -&gt; output\n&gt;         network.setValue(&quot;=\r\nLay&quot;,2);\n&gt;         // hidden1 -&gt; output\n&gt;         network.setValue(&quot;Src&quot;,1)=\r\n; network.setValue(&quot;Dst&quot;,1); network.update();\n&gt;         links.push_back(ne=\r\nw NEAT::NetworkLink(nodes[2],nodes[5],true,network.getValue(&quot;Output&quot;)));\n&gt; =\r\n        network.setValue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,1); network.updat=\r\ne();\n&gt;         links.push_back(new NEAT::NetworkLink(nodes[3],nodes[5],true=\r\n,network.getValue(&quot;Output&quot;)));\n&gt;         network.setValue(&quot;Src&quot;,3); network=\r\n.setValue(&quot;Dst&quot;,1); network.update();\n&gt;         links.push_back(new NEAT::N=\r\networkLink(nodes[4],nodes[5],true,network.getValue(&quot;Output&quot;)));\n&gt;         /=\r\n/ bias -&gt; hidden\n&gt;         network.setValue(&quot;Src&quot;,0); network.setValue(&quot;Dst=\r\n&quot;,3); network.update();\n&gt;         links.push_back(new NEAT::NetworkLink(nod=\r\nes[6],nodes[2],true,network.getValue(&quot;Output&quot;)));\n&gt;         network.setValu=\r\ne(&quot;Src&quot;,0); network.setValue(&quot;Dst&quot;,4); network.update();\n&gt;         links.pu=\r\nsh_back(new NEAT::NetworkLink(nodes[6],nodes[3],true,network.getValue(&quot;Outp=\r\nut&quot;)));\n&gt;         network.setValue(&quot;Src&quot;,0); network.setValue(&quot;Dst&quot;,5); net=\r\nwork.update();\n&gt;         links.push_back(new NEAT::NetworkLink(nodes[6],nod=\r\nes[4],true,network.getValue(&quot;Output&quot;)));\n&gt;         // bias -&gt; output   \n&gt;  =\r\n       network.setValue(&quot;Src&quot;,0); network.setValue(&quot;Dst&quot;,6); network.update=\r\n();\n&gt;         links.push_back(new NEAT::NetworkLink(nodes[6],nodes[5],true,=\r\nnetwork.getValue(&quot;Output&quot;)));\n&gt;         \n&gt;         NEAT::FastNetwork&lt;float&gt;=\r\n xornet(nodes,links);\n&gt;         group[0]-&gt;reward(10);\n&gt;         \n&gt;         =\r\nfor (int x1=3D0;x1&lt;2;x1++)\n&gt;         {\n&gt;             for (int x2=3D0;x2&lt;2;x=\r\n2++)\n&gt;             {\n&gt;                 xornet.reinitialize();\n&gt;         \n&gt; =\r\n                xornet.setValue(&quot;Input1&quot;,x1);\n&gt;                 xornet.setV=\r\nalue(&quot;Input2&quot;,x2);\n&gt;                 xornet.setValue(&quot;Bias&quot;,0.3f);\n&gt;       =\r\n  \n&gt;                 xornet.update();\n&gt; \n&gt;                 double value =3D=\r\n xornet.getValue(&quot;Output&quot;);\n&gt; \n&gt;                 double expectedValue =3D (=\r\ndouble)(x1 ^ x2);\n&gt;                 printf(&quot;value=3D%f, expectedValue=3D%f&#92;=\r\nn&quot;,value,expectedValue);\n&gt;         \n&gt;                 group[0]-&gt;reward(5000=\r\n*(2-fabs(value-expectedValue)));\n&gt;             }\n&gt;         }\n&gt;     }   \n&gt; \n=\r\n&gt; You can see that I manually build a 2 input, 3 hidden and 1 output networ=\r\nk. Weights are the value of &quot;Output&quot; node of the CPPN.\n&gt; But this model doe=\r\nsn&#39;t work. I stalls at some point and the values of the weighs stop mutatin=\r\ng. The maximum fitness I reach is around 31000, where the original example =\r\nmodel reaches almost 40000 (the maximum)\n&gt; I wonder, what did I wrong here?=\r\n\n&gt; Thanks in advance.\n&gt; Nick\n&gt;\n\n\n\n"}}