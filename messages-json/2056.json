{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"1EQRa2dqDs0EYIZz4H3NC_mEriHOd8ucsVKV1o_LDR6oNpGJU-7lxZPHpUzYFO8e4fLALrxz1FP-Xr9pjyiFmhLPlkKjyVYVYg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: Double Pole Balancing Questions","postDate":"1121032402","msgId":2056,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyRDE5OEQyLjUwNjA5MDJAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PGRhcWI5MCtmbWE3QGVHcm91cHMuY29tPg==","referencesHeader":"PGRhcWI5MCtmbWE3QGVHcm91cHMuY29tPg=="},"prevInTopic":2055,"nextInTopic":2064,"prevInTime":2055,"nextInTime":2057,"topicId":2049,"numMessagesInTopic":11,"msgSnippet":"... Yes but the simulation is stopped if the angles go over poleAngleThreshold#, which is set to thirtysix_degrees by default (I m looking at","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 7228 invoked from network); 10 Jul 2005 21:53:04 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m30.grp.scd.yahoo.com with QMQP; 10 Jul 2005 21:53:04 -0000\r\nReceived: from unknown (HELO ranger.systems.pipex.net) (62.241.162.32)\n  by mta2.grp.scd.yahoo.com with SMTP; 10 Jul 2005 21:53:03 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby ranger.systems.pipex.net (Postfix) with ESMTP id B7C90E00008C\n\tfor &lt;neat@yahoogroups.com&gt;; Sun, 10 Jul 2005 22:53:01 +0100 (BST)\r\nMessage-ID: &lt;42D198D2.5060902@...&gt;\r\nDate: Sun, 10 Jul 2005 22:53:22 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;daqb90+fma7@...&gt;\r\nIn-Reply-To: &lt;daqb90+fma7@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: Double Pole Balancing Questions\r\nX-Yahoo-Group-Post: member; u=127853030; y=uR5YrPKPFSzoyhMkE5vbz5BuxucwBQLRoPFpIzeUN_dP2cjx35Tu\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nPhilip Tucker wrote:\n\n&gt;&gt;&gt;For double:\n&gt;&gt;&gt;\n&gt;&gt;&gt;\tnetwork.setInputSignal(0, state[0] / trackLength);\n&gt;&gt;&gt;\tnetwork.setInputSignal(1, state[1] / 2.0);\n&gt;&gt;&gt;\tnetwork.setInputSignal(2, state[2] / 0.52);\n&gt;&gt;&gt;\tnetwork.setInputSignal(3, state[3] / 2.0);\n&gt;&gt;&gt;\tnetwork.setInputSignal(4, state[4] / 0.52);\n&gt;&gt;&gt;\tnetwork.setInputSignal(5, state[5] / 2.0);\n&gt;&gt;&gt;\n&gt;&gt;&gt;For double it seems like you don&#39;t actually get values scaled\n&gt;&gt;&gt;between 0 and 1 or -1 and 1.\n&gt;&gt;&gt; \n&gt;&gt;&gt;\n&gt;&gt;&gt;      \n&gt;&gt;&gt;\n&gt;&gt;It looks liek they&#39;re scaled to -1 to 1 to me.\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;I don&#39;t think so.  States 2 and 4 are in radians, which means they&#39;re\n&gt;between -PI and PI (unless I&#39;m reading the code wrong).  So dividing\n&gt;by 0.52 yields approximately -6 ... 6.\n&gt;\nYes but the simulation is stopped if the angles go over \n&#39;poleAngleThreshold#, which is set to &#39;thirtysix_degrees&#39; by default \n(I&#39;m looking at DoublePoleBalancingNetworkEvaluator here).\n\nthirtysix_degrees ~ 0.62.\n+-0.62 / 0.52 = +-1.2  (still an &#39;odd&#39; number to scale to though)\n\n&gt;  And state 0 ranges from\n&gt;-trackLength/2 to trackLength/2, so it&#39;s scaled to -0.5 ... 0.5. \n&gt;\nHmm yes, because 0 meters is in the center where the cart starts.\n\n&gt; None\n&gt;of this keeps the net from solving the problem, but they seem odd choices.\n&gt;  \n&gt;\nIndeed, everything yourself and Derek have pointed out so far has either \nbeen a typo or a miscalculation. As you say these don&#39;t prevent the \nproblem from being solved but at the same time they don&#39;t exactly add to \nthe clarity of the code! I suggest we settle on a new set of \nscaling/shifting values that make more sense and that we switch over in \nunison.\n\nI&#39;m currently going through my code with the intention of putting out a \nnew release so I&#39;m happy to do this if you are. It effects comparisons \nwith Ken&#39;s results though, but probably not by much I would say.\n\n&gt;Another difference I noticed between Markovian and non-Markovian\n&gt;double pole balancing is that one had a bias of 1.0, the other 0.5. \n&gt;Any reason for that?\n&gt;  \n&gt;\nI think this relates to Ken&#39;s code. SharpNEAT has a single bias input of \n1.0 for all experiments, or perhaps you&#39;re referring to some other bias \nvalue?\n\n\nOk so I&#39;m going ahead and rationalising the scaling/shifting of the \ninput signals for all for pole experiments within SharpNEAT, otherwise I \nsuspect this issue is going to come back to haunt me :)  Feel free to \nadopt these values, leave them as they are, point out errors, suggest \nchanges, etc...\n\n\nSingle Pole.\nThe comment was wrong on SP. The values were being sclaed to 0.0 to 1.0. \nI think -1.0 to 1.0 is more natural, so here&#39;s my updated code. BTW I \ntested this and it seems to work far better than before (much quicker to \nfind perfect solution on the whole).\n\n                // Provide state info to the network (normalised to +-1.0).\n                network.SetInputSignal(0, cart_pos_x / \ntrackLengthHalfed);    // cart_pos_x is +-trackLengthHalfed\n                network.SetInputSignal(1, cart_velocity_x / 0.75);    \n        // cart_velocity_x is typically +-0.75\n                network.SetInputSignal(2, pole_angle / \ntwelve_degrees);        // pole_angle is +-twelve_degrees. Values \noutside of this range stop the simulation.\n                network.SetInputSignal(3, pole_angular_velocity);        \n    // pole_angular_velocity is typically +-1.0 radians. No scaling \nrequired.\n\nDouble Pole\n\n                // Provide state info to the network (normalised to +-1.0).\n                network.SetInputSignal(0, state[0] / \ntrackLengthHalfed);    // Cart Position is +-trackLengthHalfed\n                network.SetInputSignal(1, state[1] / 0.75);            \n        // Cart velocity is typically +-0.75\n                network.SetInputSignal(2, state[2] / \nthirtysix_degrees);    // Pole Angle is +-thirtysix_degrees. Values \noutside of this range stop the simulation.\n                network.SetInputSignal(3, state[3]);                    \n    // Pole angular velocity is typically +-1.0 radians. No scaling \nrequired.\n                network.SetInputSignal(4, state[4] / \nthirtysix_degrees);    // pole_angle is +-thirtysix_degrees. Values \noutside of this range stop the simulation.\n                network.SetInputSignal(5, state[5]);\n\nDouble Pole, No velocity inputs.\n\n                // Provide state info to the network (normalised to +-1.0).\n                // Non-markovian (no velocity info)\n                network.SetInputSignal(0, state[0] / \ntrackLengthHalfed);    // Cart Position is +-trackLengthHalfed\n                network.SetInputSignal(1, state[2] / \nthirtysix_degrees);    // Pole Angle is +-thirtysix_degrees. Values \noutside of this range stop the simulation.\n                network.SetInputSignal(2, state[4] / \nthirtysix_degrees);    // pole_angle is +-thirtysix_degrees. Values \noutside of this range stop the simulation.\n\n\nHope the longs lines didn&#39;t get mangled too much.\n\nColin.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}}