{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"XqrIFbD1ovCE_VZlnEtS9LIO6Sl0j_5D2YRst6j4QT-GcccUT21uI46395o1DSZlhD2O2xZLwwvQi77L7Kt2TqZfthQ69vuNLQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: Python NEAT","postDate":"1121723958","msgId":2116,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyREMyNjM2LjIwNDA3MDVAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMi4wLjE0LjAuMjAwNTA3MTgxMTI2MzMuMDMzNTUxODhAcG9wLm1haWwueWFob28uY28udWs+","referencesHeader":"PGRhZXVwMStiYmc0QGVHcm91cHMuY29tPiA8ZGI3bjE2K3Q5MzVAZUdyb3Vwcy5jb20+IDw2LjIuMC4xNC4wLjIwMDUwNzE4MTEyNjMzLjAzMzU1MTg4QHBvcC5tYWlsLnlhaG9vLmNvLnVrPg=="},"prevInTopic":2109,"nextInTopic":2125,"prevInTime":2115,"nextInTime":2117,"topicId":535,"numMessagesInTopic":47,"msgSnippet":"... I m happy to read about novel ideas (BTW I think I need to re-read your email re heap selection when I have a clearer head!) but personally I view the","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 92071 invoked from network); 18 Jul 2005 22:00:00 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m26.grp.scd.yahoo.com with QMQP; 18 Jul 2005 22:00:00 -0000\r\nReceived: from unknown (HELO blaster.systems.pipex.net) (62.241.163.7)\n  by mta5.grp.scd.yahoo.com with SMTP; 18 Jul 2005 22:00:00 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby blaster.systems.pipex.net (Postfix) with ESMTP id 45E4AE00004C\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 18 Jul 2005 22:59:18 +0100 (BST)\r\nMessage-ID: &lt;42DC2636.2040705@...&gt;\r\nDate: Mon, 18 Jul 2005 22:59:18 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;daeup1+bbg4@...&gt; &lt;db7n16+t935@...&gt; &lt;6.2.0.14.0.20050718112633.03355188@...&gt;\r\nIn-Reply-To: &lt;6.2.0.14.0.20050718112633.03355188@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: Python NEAT\r\nX-Yahoo-Group-Post: member; u=127853030; y=2SuUe8LZokf6Era2H117zWnYzpOxXP5nbUVRvtoMe2uVrAey6JEA\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;At 08:01 15/07/2005, you wrote:\n&gt;  \n&gt;\n&gt;&gt;        I have implemented a Python version of NEAT myself which is\n&gt;&gt;feature-complete and has been successfully tested on XOR and double\n&gt;&gt;[...]\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Hi,\n&gt;         I&#39;m currently thinking hard about a NEAT implementation (been \n&gt;talking about it for _AGES_ but busy busy busy...).\n&gt;\n&gt;         Speciation: that sounds like an interesting approach.  I have \n&gt;always had my doubts about speciation (not just in NEAT but in genetic \n&gt;computing generally) as it often seems quite arbitrary and &quot;hacky&quot;.  It \n&gt;always seems to me that there must be better approaches, and I have ideas \n&gt;in that direction, but so far I didn&#39;t clarify it enough that I could say \n&gt;&quot;this is _definitely_ correct&quot;...\n&gt;  \n&gt;\nI&#39;m happy to read about novel ideas (BTW I think I need to re-read your \nemail re heap selection when I have a clearer head!) but personally I \nview the discrete speciation in NEAT as being conceptually clean. It \nserves to ensure a population is distributed into seperate areas of the \nfitness space, rather than clustering around one point. The number of \npoints we can cover is obviously limited by the size of the population, \nwhich in turn is limited by computing resources - so no &#39;hacky&#39; element \nwith regard to # of species as far as I can see. Perhaps there are \nalternative ways of calculating genome compatibility to consider? NEAT \ncompares genome structures, perhaps we could/should compare behaviour \nsince large sections of a structure may be useless, or perhaps some \nother scheme, but I don&#39;t get the &#39;hacky&#39; vibe from this aspect of \nevolutionary searches in general.\n\nOn the other hand I appreciate the exploration of the idea. Just \nthrowing in my 2cents worth.\n\n&gt;         Genotype: my feeling is that is just a detail, I think I would \n&gt;want one myself, so that possible future moves to indirect encodings can be \n&gt;implemented in the same genome-&gt;ANN transformation...\n&gt;  \n&gt;\nI thought about merging the two for performance since you skip a decode \nstage if they are one and the same and this in turn reduces memory \nallocs/deallocs. But of course this limits flexibility of your code base \nif you&#39;re intending to experiment with different types of genome and \nnetwork. Currently I have two interfaces, IGenome and INetwork (BTW \nparts of the code refer directly to a concrete genome, I need to fix \nthis really) but in actual fact there&#39;s no reason not to implement both \ninterfaces on the genome if it isn&#39;t too much trouble to do so and/or if \ngives a good performance boost.\n\nSo I&#39;m looking at implementing INetwork on my concrete genome class. It \nmay run a lot slower than my optimised network code (actually I recon it \nwon&#39;t be too far off) so I was going to add an extra parameter to the \nGenome.Decode() function which is the number of times I intend to \nactivate the network. If this is a small number (determined from \nperformance tests) I won&#39;t bother decoding the genome and just run the \nnetwork on the genome directly, otherwise perform a full decode to a \nfast network object.\n\n&gt;         Innovation numbers in links: I was also planning this, and I think \n&gt;somebody else already did it?\n&gt;  \n&gt;\n Strictly speaking the innovation ID&#39;s on connections are redundant, \nsure. But that&#39;s a just minor implementation detail. Something to keep \nin mind if you&#39;re building a new NEAT. You could perhaps store a \nconnection as a union/struct for performance reasons.\n\nColin.\n\n\n"}}