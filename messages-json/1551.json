{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"odFGPcz1K5cNpFU0x0_pb4swvCouK-DbA6RStwKptcAUz4y-w3ymBRRPo1mLHxDzsDP1b306gjfCNxVKH_yYKUOxtTnzZYo79w","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Activation Functions","postDate":"1095500946","msgId":1551,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxNEMwNDkyLjIwNDA4MDBAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PGNpZzNpcytvamxlQGVHcm91cHMuY29tPg==","referencesHeader":"PGNpZzNpcytvamxlQGVHcm91cHMuY29tPg=="},"prevInTopic":1550,"nextInTopic":0,"prevInTime":1550,"nextInTime":1552,"topicId":1550,"numMessagesInTopic":2,"msgSnippet":"... Hi Emyr, There was a discussion on alternative, faster functions on the list a while ago. I don t remember your particular solution being mentioned though,","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 17639 invoked from network); 18 Sep 2004 09:49:11 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m23.grp.scd.yahoo.com with QMQP; 18 Sep 2004 09:49:11 -0000\r\nReceived: from unknown (HELO pengo.systems.pipex.net) (62.241.160.193)\n  by mta6.grp.scd.yahoo.com with SMTP; 18 Sep 2004 09:49:11 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby pengo.systems.pipex.net (Postfix) with ESMTP id CAEAA4C001D2\n\tfor &lt;neat@yahoogroups.com&gt;; Sat, 18 Sep 2004 10:49:10 +0100 (BST)\r\nMessage-ID: &lt;414C0492.2040800@...&gt;\r\nDate: Sat, 18 Sep 2004 10:49:06 +0100\r\nUser-Agent: Mozilla Thunderbird 0.7.1 (Windows/20040626)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;cig3is+ojle@...&gt;\r\nIn-Reply-To: &lt;cig3is+ojle@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.193\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Activation Functions\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nej_1973 wrote:\n\n&gt;One thing I have noticed looking through various implementations of \n&gt;NEAT is that everyone seems to calculate the activation function \n&gt;directly with something like...\n&gt;\n&gt;inline double fsigmoid(double activesum,double slope,double constant) \n&gt;{\n&gt;   return (1/(1+(exp(-(slope*activesum))))); //Compressed\n&gt;}\n&gt;\n&gt;A possible different approach is to use a precomputed in memory table \n&gt;and just use linear interpolation on it, or even faster - just \n&gt;getting the nearest value straight from the table. Small errors in \n&gt;the activation function wouldn&#39;t cause any problems I don&#39;t think.\n&gt;\n&gt;Something like this would do it....\n&gt;  \n&gt;\nHi Emyr,\n\nThere was a discussion on alternative, faster functions on the list a \nwhile ago. I don&#39;t remember your particular solution being mentioned \nthough, and it is quite a nice solution in that it can implement any \nfunction. If I get time I might do some performance tests using this \ntechnique since I&#39;m always on the lookout for performance improvements.\n\nA similar approach that was mentioned (by Mitchel Timmin as I recall) is \nto use a function that approximates the more CPU intensive trig \nfunctions, e.g. in SharpNEAT there is this function...\n\n---------------------\nclass SteepenedSigmoidApproximation\n{\n        public double Calculate(double inputSignal)\n        {\n            const double one = 1.0;\n            const double one_half = 0.5;\n\n            if(inputSignal&lt;-1.0)\n                return 0.0;\n            else if(inputSignal&lt;0.0)\n                return (inputSignal+one)*(inputSignal+one)*one_half;\n            else if(inputSignal&lt;1.0)\n                return 1.0-(inputSignal-one)*(inputSignal-one)*one_half;\n            else\n                return 1.0;\n        }\n[...]\n}\n---------------------\n\nThis is a slightly cryptic version of mitchel&#39;s function because some \ntemporary variables have been removed in the name of optimisation. But \nbasically it describes a sigmoid, and does so with less CPU time than a \nsimilar trig based function.\n\nThe only minor downside that might occur from your lookup idea is that \nit requires more memory accesses than a straight-forward function. There \nwas also a discussion on the group regarding speedups by optimising the \nuse of the CPU caches, now if you are frequently accessing a 1000 \nelement array this might have an overall detrimental effect by way of \n[relatively] poor use of the cache. I don&#39;t think such a small array \nwould cause a problem but it&#39;s worth keeping in mind when doing \nperformance tests - it might cause other areas of code to slow down in a \nreal world test.\n\nOne way to limit cache use is to simply use floats instead of doubles, \nthis halves the amount of  memory required for a given lookup table and \nsince it is an approximation function we don&#39;t care about the loss of \nprecision, although there may be a slight overhead introduced by having \nto type cast if you use doubles elsewhere. I partly overcame this \nproblem by creating a network class that works on floats throughout \n(FastConcurrentNetwork class). The change did improve performance, \ndetails are here:\n\n http://www.cgreen.dsl.pipex.com/network_optimization.htm\n\nThere is also a short mention of some alternative approximation \nfunctions at the bottom of the page.\n\nColin\n\n"}}