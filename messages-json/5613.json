{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"Rol2wNfPSTwjwgVTg58dr5nRRovSkHkWOs5C6jvwAsjXDepRVsygbdw82belbiVBlKqpum0hWnJsm0naCrJVb94xIXZ_tNY8_QnQ9e94Sdx54OHloOo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Python NEAT","postDate":"1310031516","msgId":5613,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGl2M3VxcytobmRsQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGl2MjN0Nis2Z2FqQGVHcm91cHMuY29tPg=="},"prevInTopic":5612,"nextInTopic":5614,"prevInTime":5612,"nextInTime":5614,"topicId":535,"numMessagesInTopic":47,"msgSnippet":"Hi Andy, The implementation is not yet complete, but things are really good so far. NetworkX is a very good choice for the genomes, as it gives me a lot of","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 31022 invoked from network); 7 Jul 2011 09:41:39 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m16.grp.re1.yahoo.com with QMQP; 7 Jul 2011 09:41:39 -0000\r\nX-Received: from unknown (HELO ng17-ip2.bullet.mail.bf1.yahoo.com) (98.139.165.148)\n  by mta1.grp.re1.yahoo.com with SMTP; 7 Jul 2011 09:41:39 -0000\r\nX-Received: from [98.139.164.125] by ng17.bullet.mail.bf1.yahoo.com with NNFMP; 07 Jul 2011 09:38:38 -0000\r\nX-Received: from [69.147.65.149] by tg6.bullet.mail.bf1.yahoo.com with NNFMP; 07 Jul 2011 09:38:38 -0000\r\nX-Received: from [98.137.34.119] by t9.bullet.mail.sp1.yahoo.com with NNFMP; 07 Jul 2011 09:38:38 -0000\r\nDate: Thu, 07 Jul 2011 09:38:36 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;iv3uqs+hndl@...&gt;\r\nIn-Reply-To: &lt;iv23t6+6gaj@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: Re: Python NEAT\r\nX-Yahoo-Group-Post: member; u=283334584; y=mBC0H4xNuL4pTb4iz_hqIYMhQ7UdyyyYA1AMP1w_uE24d9xsyW6E7MfAuA\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nHi Andy, \n\nThe implementation is not yet complete, but things are really go=\r\nod so far. NetworkX is a very good choice for the genomes, as it gives me a=\r\n lot of freedom, many bonus functions for the graphs, and saves me debuggin=\r\ng time. Basically this implementation allows any kind of graph to be evolve=\r\nd. For example, nodes and edges can represent numeric data (integer & float=\r\n) or objects from a set (like characters from an alphabet, class instances =\r\nor functions, etc.). When you define the graph type, you have to write a di=\r\nstance function if you have objects from a set in the graph - like the dist=\r\nance between characters in the alphabet), and also a few more functions lik=\r\ne mutators, which, of course, will change the objects randomly or the way y=\r\nou like. You can have any number of properties for nodes/edges. You can als=\r\no have an undirected graph, or a multigraph where many edges connect the sa=\r\nme nodes. You can even have nested genomes, where genomes are the objects f=\r\nrom a set, which are attached to nodes or edges. This makes things mind-blo=\r\nwing and lifts NEAT to a much broader set of domains. I even think that the=\r\n N in NEAT is somehow unnecessary here, as the primary objective in this im=\r\nplementation is not neural networks. Neural networks will be derived from a=\r\n special function that will translate the graph and then build a C++ object=\r\n from it. They will be directed graphs with sigmoid or whatever functions a=\r\nttached to nodes and floats attached to edges. (Node types also attached to=\r\n nodes - to know what is input and output). Perhaps I&#39;ll make a separate pr=\r\noject designed for neural networks that will use the core module. \nI will r=\r\nelease the first version of the code soon, which will probably not have rtN=\r\nEAT and novelty search built in. CPPNs and HyperNEAT are just special cases=\r\n of graph evolution and interpretation, like neural networks. The special c=\r\node about them will be added later as the project evolves. Perhaps the comm=\r\nunity will like it and contribute some code. I can&#39;t promise a release date=\r\n, but work is progressing. Any ideas to minimize the search space (which bl=\r\nows up as you add more properties to nodes and edges) are appreciated. Also=\r\n I could use some help about innovation numbers and crossover between undir=\r\nected and multi graphs. I&#39;m so afraid of bugs in these cases that I haven&#39;t=\r\n even started to think about it. :D\n\nPeter\n\n--- In neat@yahoogroups.com, &quot;a=\r\nfcarl2&quot; &lt;afcarl2@...&gt; wrote:\n&gt;\n&gt; Hi Peter,\n&gt; \n&gt; How is your python implemen=\r\ntation going? Took a look at the NetworkX module. It looks very interesting=\r\n! In my C++ version, I had added variable input/output connections, network=\r\n within a node and seeding of the initial population with the required infr=\r\nastructure updates and a distributed processing backend. But what you are d=\r\noing goes so much farther, that I am eager to get a look at it!\n&gt; \n&gt; Andy\n&gt;=\r\n \n&gt; --- In neat@yahoogroups.com, &quot;petar_chervenski&quot; &lt;petar_chervenski@&gt; wro=\r\nte:\n&gt; &gt;\n&gt; &gt; Hi all, \n&gt; &gt; \n&gt; &gt; I am almost done with the basic code and I&#39;ll=\r\n mention some of its features now. I decided to use NetworkX for the genome=\r\ns, because this module has lots of useful algorithms and allows any python =\r\nobject to be a node and edges can be associated with anything. This makes t=\r\nhe evolution of neural networks a tiny part of what&#39;s really possible. Any =\r\ngraph can be evolved, including undirected graphs and nodes/edges containin=\r\ng discrete one-of-N values (integers, lists of python objects, etc). So giv=\r\nen that an evaluation function exists for any kind of graph, you can quickl=\r\ny setup evolution. Neural networks are a particular kind of graphs and the =\r\npackage will have built in code necessary to evolve neural networks - the i=\r\nnitialization functions, mutators, and a C++ interface to a class that repr=\r\nesents the phenotypes. CPPNs support is trivial to make, and given that pyt=\r\nhon functions themselves can be attached to nodes, it&#39;s possible to have al=\r\ngorithmic nodes working with more than one variable and .. well, infinite s=\r\ntuff. OK, I gotta go. Wish me luck debugging. Talk to you soon. :) \n&gt; &gt; \n&gt; =\r\n&gt; Peter\n&gt; &gt; \n&gt; &gt; --- In neat@yahoogroups.com, Jan van der Lugt &lt;janlugt@&gt; w=\r\nrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Hi Peter,\n&gt; &gt; &gt; \n&gt; &gt; &gt; Sound like an ambitious and noble =\r\nplan. Good luck coding, I&#39;m looking\n&gt; &gt; &gt; forward to seeing your results!\n&gt;=\r\n &gt; &gt; \n&gt; &gt; &gt; Regards,\n&gt; &gt; &gt; Jan\n&gt; &gt; &gt; \n&gt; &gt; &gt; On Mon, Mar 14, 2011 at 12:43, =\r\npetar_chervenski\n&gt; &gt; &gt; &lt;petar_chervenski@&gt;wrote:\n&gt; &gt; &gt; \n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt;=\r\n &gt; &gt; Hi people,\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; For about a month I&#39;ll be writing a Python =\r\nimplementation of NEAT, which\n&gt; &gt; &gt; &gt; includes all advances in the recent y=\r\nears, including rtNEAT, phased\n&gt; &gt; &gt; &gt; searching, leaky integrators, HyperN=\r\nEAT, HyperNEAT with evolving substrates,\n&gt; &gt; &gt; &gt; and novelty search. Coevol=\r\nution code and visualizations will be included.\n&gt; &gt; &gt; &gt; Optimized C++ code =\r\nfor running the NNs too. This code will be free and I\n&gt; &gt; &gt; &gt; promise this =\r\nwill be the best NEAT code I can write. No bugs, no meaningless\n&gt; &gt; &gt; &gt; NNs=\r\n, etc.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Peter\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;  \n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n"}}