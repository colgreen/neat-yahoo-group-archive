{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":60940451,"authorName":"Jeff Haynes","from":"&quot;Jeff Haynes&quot; &lt;jeff@...&gt;","profile":"jefffhaynes","replyTo":"LIST","senderId":"jbIJ4udEORPfbpcu3xWQfBZ8s2Zilk_O0JOABUol6nPJRSjOpNLhVBi3IMR1N0fjXnZ-aB1AF31k-arp1DXgC5sB2-lcQNL4rQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Recurrency Pseudocode","postDate":"1124948565","msgId":2217,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE2NjYuNjkuMTQzLjExMC4yNTMuMTEyNDk0ODU2NS5zcXVpcnJlbEBlYWdsZS5kZWFyZG9yZmYuY29tPg==","inReplyToHeader":"PGRlaXVyMiszaHZsQGVHcm91cHMuY29tPg==","referencesHeader":"PGRlaXVyMiszaHZsQGVHcm91cHMuY29tPg=="},"prevInTopic":2216,"nextInTopic":2219,"prevInTime":2216,"nextInTime":2218,"topicId":2216,"numMessagesInTopic":4,"msgSnippet":"I ve been working on my own implementation of neat for some time now and my networks are all assumed to be recurrent (at least, there is no concept of layers","rawEmail":"Return-Path: &lt;jeff@...&gt;\r\nX-Sender: jeff@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 8378 invoked from network); 25 Aug 2005 05:47:32 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m33.grp.scd.yahoo.com with QMQP; 25 Aug 2005 05:47:32 -0000\r\nReceived: from unknown (HELO eagle.deardorff.com) (64.92.206.84)\n  by mta4.grp.scd.yahoo.com with SMTP; 25 Aug 2005 05:47:32 -0000\r\nReceived: from eagle.deardorff.com (nobody@localhost [127.0.0.1])\n\tby eagle.deardorff.com (8.13.3/8.13.3) with ESMTP id j7P5gjBr014783\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 25 Aug 2005 01:42:45 -0400\r\nReceived: from 69.143.110.253\n        (SquirrelMail authenticated user jeffie)\n        by eagle.deardorff.com with HTTP;\n        Thu, 25 Aug 2005 00:42:45 -0500 (EST)\r\nMessage-ID: &lt;1666.69.143.110.253.1124948565.squirrel@...&gt;\r\nIn-Reply-To: &lt;deiur2+3hvl@...&gt;\r\nReferences: &lt;deiur2+3hvl@...&gt;\r\nDate: Thu, 25 Aug 2005 00:42:45 -0500 (EST)\r\nTo: neat@yahoogroups.com\r\nUser-Agent: SquirrelMail/1.4.4\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;charset=iso-8859-1\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3 (Normal)\r\nImportance: Normal\r\nX-Spam-Status: No, Not spam. Probably whitelisted.\r\nX-Scanned-By: MIMEDefang 2.51 on 64.92.206.84\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: &quot;Jeff Haynes&quot; &lt;jeff@...&gt;\r\nSubject: Re: [neat] Recurrency Pseudocode\r\nX-Yahoo-Group-Post: member; u=60940451; y=yqOU6yiRVOr1idAMaHqtCLpwes3okDm_o5anVyfVifMu4qQjhUM\r\nX-Yahoo-Profile: jefffhaynes\r\n\r\nI&#39;ve been working on my own implementation of neat for some time now and\nmy networks are all assumed to be recurrent (at least, there is no concept\nof layers or feed ordering).  As an ee, I simply viewed the nodes as\nflip-flops with more complex transfer functions.  Each node has a source\nand a sink.  The network is run in three stages with each of these\noperations being performed on every neuron before the next stage:\n\nReset(Relax) - zero all sources\nCollect - sum all sources from upstream neurons into our sink\nTransfer - transfer sinks to sources via xfer(*)\n\nwhere a neuron is ---&gt;( sink | source )---&gt;\n\nIf you&#39;re clever about defining your networks using pointers and minimal\nstructures, this is extraordinarily fast.  I&#39;ll eventually get around to\nposting my code as well which hopefully will lead to discussion or\nsomething.\n\n- jeff\n\n\n&gt; I have it working now and thought I would post the quasi-pseudocode\n&gt; for how this works in my implementation:\n&gt;\n&gt;\n&gt; For Each neuron\n&gt;     if not input neuron, init TotalInput=0\n&gt;     Init Fired=False\n&gt; Next\n&gt;\n&gt; For each TimeStep\n&gt;     For each Neuron\n&gt;         init fired switch to false\n&gt;         For each Link\n&gt;             IF link is active &&\n&gt;                links output neuron=currentNeuron &&\n&gt;                links input neurons totalValue &gt; 0 THEN\n&gt;                 IF link has fired=FALSE THEN\n&gt;                    IF links input neuron &gt; threshold THEN\n&gt;                       FIRE Neuron by adding its weight to the links\n&gt;                         output neuron\n&gt;                       Store the fired neurons ID\n&gt;                     END\n&gt;                 END\n&gt;              END\n&gt;          NEXT Link\n&gt;      NEXT Neuron\n&gt;      FOR EACH Link that fired, set its fired value to TRUE\n&gt; NEXT Timestep\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n\n\n\n"}}