{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"od2Qci2ZCHaa4j9XON2ZnvOidqFnpAv4a-ryfT48mDOOr1O4xfF45-B8LaYcCRwZ_bNm1bEfQjdUSUWiehkngxlptbXGK-5uwQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Prey capture revisited","postDate":"1100813053","msgId":1736,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxOUQxMkZELjcwNjAzMDdAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMS4yLjAuMC4yMDA0MTExODExMzcxNi4wMjU2MmY2MEBwb3AubWFpbC55YWhvby5jby51az4=","referencesHeader":"PDQxOUJCNENGLjcwNjA3MDlAZHNsLnBpcGV4LmNvbT4gPDE5YjEwZDUxMDQxMTE3MTMzNTljOWIwNjZAbWFpbC5nbWFpbC5jb20+IDw2LjEuMi4wLjAuMjAwNDExMTgxMTM3MTYuMDI1NjJmNjBAcG9wLm1haWwueWFob28uY28udWs+"},"prevInTopic":1733,"nextInTopic":0,"prevInTime":1735,"nextInTime":1737,"topicId":1727,"numMessagesInTopic":5,"msgSnippet":"... Let me just clarify the technique I m using and how I arrived at it. My suggestion to Derek was to wait until evolution found a network that scored full","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 12503 invoked from network); 18 Nov 2004 21:24:05 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m21.grp.scd.yahoo.com with QMQP; 18 Nov 2004 21:24:05 -0000\r\nReceived: from unknown (HELO astro.systems.pipex.net) (62.241.163.6)\n  by mta5.grp.scd.yahoo.com with SMTP; 18 Nov 2004 21:24:04 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby astro.systems.pipex.net (Postfix) with ESMTP id 0290BE000047\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 18 Nov 2004 21:24:03 +0000 (GMT)\r\nMessage-ID: &lt;419D12FD.7060307@...&gt;\r\nDate: Thu, 18 Nov 2004 21:24:13 +0000\r\nUser-Agent: Mozilla Thunderbird 0.7.1 (Windows/20040626)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;419BB4CF.7060709@...&gt; &lt;19b10d5104111713359c9b066@...&gt; &lt;6.1.2.0.0.20041118113716.02562f60@...&gt;\r\nIn-Reply-To: &lt;6.1.2.0.0.20041118113716.02562f60@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.163.6\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Prey capture revisited\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;Hi,\n&gt;\tI also am a little confused about how you are using the kept tests, and \n&gt;also what constitutes a &quot;failed test&quot; in this case.  But I get the general \n&gt;idea.\n&gt;  \n&gt;\nLet me just clarify the technique I&#39;m using and how I arrived at it. My \nsuggestion to Derek was to wait until evolution found a network that \nscored full marks, and at that point to throw a load more random test \ncases at the champion and keep a list of test cases that failed. \nEvolution can then continue by evaluating against the saved test cases \n*and* the normal random tests.\n\nI figured that some particularly tricky test cases might be very rare, \nso I decided instead to keep a look out for failed test cases as part of \nthe normal evaluation, thus also eliminating the need for the extra \ntesting phase. I started out by adding failed tests to a cyclic &#39;buffer&#39; \nwith max capcapity 50, thus the newest failed test cases overwrite older \nones. This obviously didn&#39;t work very well because the vast majority of \ntests that occur fail, and so the buffer is being constantly overwritten.\n\nSo instead I added an extra &#39;fitness&#39; field to my test case class. This \nstores the fitness score of the genome that failed the test. This then \nallows me to keep a list of test cases, sort them on the fitness field \n(and secondary sort by age) and to trim the list back to 50 entries \nafter every evaluation. The vast majority of test failures will occur on \npoor genomes with low fitness and will therefore not make it into the list.\n\nThe total number of evaluations performed is always 100, so if the list \nis full (50) then 50 random tests make up the 100. If the list is empty \nthen 100 random test are performed. Hopefully this means that we always \nkeep a list of &#39;hard core&#39; test cases as part of the evaluation routine \nwhilst maintaining a random element to the evaluations.\n\nA couple of other points:\n\n -  I just realised that my list doesn&#39;t enforce uniqueness, so the same \ntest case will keep getting added to the list thus effectively making it \nas useful as a single test case variable. My Cyclic buffer did do this \nand I forgot about it when I switched to the sorted list, doh!\n\n- In the prey capture domain the difficulty is increased by allowing the \nprey some &#39;head start&#39; moves before the agent is allowed to move, and \nthen by increasing the prey&#39;s speed in small increments from 0 to 1 \n(probability of moving per timestep). All of these prey movements are \ndriven by a random number generator, so that each test case actually has \na random element - but I overcome this by saving the seed used for rnd \nnumber generator, and saving that as another field  in the test case class.\n\n&gt;\tOver on the GP mail list we had a discussion of co-evolution and one of \n&gt;the examples that was brought up was a case where the guy had far too many \n&gt;test cases to evaluate them all against each individual,\n&gt;\nThis is effectively the case with prey capture and Derek&#39;s shape \nrecognition. Ideally we would have a massive test set with every \npossible combination of parameters!\n\n&gt; so he set up the \n&gt;set of test cases to evolve for their ability to distinguish solutions, \n&gt;whilst the solutions were evolving to solve them.\n&gt;\nSounds very similar. Pick test cases that are failed by some networks \nand not others - as opposed to cases that always fail or always pass. \nBasically the interesting cases - what&#39;s the point of testing against \nreally easy test cases in large numbers, or test cases that actually \nrepresent the same problem over and over.\n\n&gt;  Obviously there&#39;s a rick \n&gt;there of the test-cases focusing in on a limited domain (which happens to \n&gt;work well at one point in history) and the solutions losing the ability to \n&gt;operate outside that domain.  ISRT this was avoided by (i) always including \n&gt;a set of randomly chosen test-cases, (ii) scoring the test-cases in a way \n&gt;that favours those who test different aspects from the bulk of the test-cases.\n&gt;  \n&gt;\nI hadn&#39;t thought of that - giving the test cases in my list a higher \nscore. It complicates the code a touch but I&#39;ll give it a try.\n\n&gt;\tThat last point might be achieved by particularly rewarding a test-case \n&gt;for any solutions it could separate but other test-cases not?\n&gt;  \n&gt;\n\nColin\n\n"}}