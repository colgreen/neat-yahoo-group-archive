{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":255378794,"authorName":"Robert Ziegler","from":"Robert Ziegler &lt;rziegler42@...&gt;","profile":"rziegler42","replyTo":"LIST","senderId":"Q97soQ9Ymvocq1T3X5UepMzovNcmRrGXTImtzTpVyamFJORypiHk62jgUjVfms4QVinkOgRjybqooBBaIqmdJx4Dqj4XicP7Iguzjw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Unit testing of genetic algorithms","postDate":"1139227793","msgId":2516,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDYwMjA2MTIwOTUzLjIzMjQyLnFtYWlsQHdlYjMxMDA3Lm1haWwubXVkLnlhaG9vLmNvbT4=","inReplyToHeader":"PGJhOTE5ZDBlMDYwMjA2MDIzMG85NzU0NWYzdzIyNGVjZGVmMzc0NDY1M2JAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":2513,"nextInTopic":2522,"prevInTime":2515,"nextInTime":2517,"topicId":2513,"numMessagesInTopic":3,"msgSnippet":"Hello, I use three approaches: 1) I run several tests with a pseudo-random-generator using known seeds.  This produces a pseudo-random sequence of numbers","rawEmail":"Return-Path: &lt;rziegler42@...&gt;\r\nX-Sender: rziegler42@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 35085 invoked from network); 6 Feb 2006 12:12:08 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m24.grp.scd.yahoo.com with QMQP; 6 Feb 2006 12:12:08 -0000\r\nReceived: from unknown (HELO web31007.mail.mud.yahoo.com) (68.142.200.170)\n  by mta10.grp.scd.yahoo.com with SMTP; 6 Feb 2006 12:12:08 -0000\r\nReceived: (qmail 23244 invoked by uid 60001); 6 Feb 2006 12:09:53 -0000\r\nMessage-ID: &lt;20060206120953.23242.qmail@...&gt;\r\nReceived: from [66.185.40.250] by web31007.mail.mud.yahoo.com via HTTP; Mon, 06 Feb 2006 04:09:53 PST\r\nDate: Mon, 6 Feb 2006 04:09:53 -0800 (PST)\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;ba919d0e0602060230o97545f3w224ecdef3744653b@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=iso-8859-1\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Robert Ziegler &lt;rziegler42@...&gt;\r\nSubject: Re: [neat] Unit testing of genetic algorithms\r\nX-Yahoo-Group-Post: member; u=255378794; y=MShWZbIiHpd1PN8DHuyChQoyndJ_ifeAomKveATGYkGzsXYqLA\r\nX-Yahoo-Profile: rziegler42\r\n\r\nHello,\n   I use three approaches:\n\n1) I run several tests with a pseudo-random-generator\nusing known seeds.  This produces a pseudo-random\nsequence of numbers which will be the same every\nsingle time for a given seed.  With this, I can\ncompare the output to a known good output looking for\ndifferences.\n\n2) I run several stress tests with unknown seeds.  By\nstress test, I mean a test that is designed to hit the\ncode from all sides, with lots of numbers.  Although I\ncannot compare the outputs to known good outputs, I\ncan look for failed assertations in the code.\n\n3) I run tests that are fed numbers that I select. \nThese numbers as choosen such that the extreme cases\nare tested.  If I have a conditional for zero, then I\nwill run a test with -1, 0, and 1 to ensure that it\nworks properly.\n\n\n--- Sandor Murakozi &lt;smurakozi@...&gt; wrote:\n\n&gt; Hi,\n&gt; \n&gt; I found only one or two threads about testing of\n&gt; NEAT implementations. I\n&gt; think that extensive unit testing is one of the best\n&gt; ways to ensure code\n&gt; quality, but realized that testing GA related stuff\n&gt; is inherently difficult,\n&gt; mainly because of the random values everywhere.\n&gt; \n&gt; I wonder how you do unit tests if the code is using\n&gt; random values?\n&gt; \n&gt; As a starting idea let me describe what I currently\n&gt; do:\n&gt; I have an interface that can provide random values.\n&gt; There are two\n&gt; implementations of it. The first one provides real\n&gt; random values, this one\n&gt; is used when code is normally run. During unit\n&gt; testing I use a mock\n&gt; implementation which returns predefined &quot;random&quot;\n&gt; values -&gt; the tests are\n&gt; deterministic.\n&gt; This approach works fine when the tests are simple.\n&gt; However, if I have a more complex test case that\n&gt; uses lots of random values\n&gt; then the tests become quite fragile:\n&gt; I have a long list of &quot;random&quot; values, and small\n&gt; changes in the code\n&gt; disturbes unit tests a lot (as the long list of\n&gt; &quot;random&quot; values may change\n&gt; very easily and drastically).\n&gt; \n&gt; Does anyone have a better/alternative solution for\n&gt; unit testing?\n&gt; \n&gt; Cheers,\n&gt; don\n&gt; \n\n\n__________________________________________________\nDo You Yahoo!?\nTired of spam?  Yahoo! Mail has the best spam protection around \nhttp://mail.yahoo.com \n\n"}}