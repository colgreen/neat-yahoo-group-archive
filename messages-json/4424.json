{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":230385553,"authorName":"Cesar G. Miguel","from":"&quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;","profile":"fdital","replyTo":"LIST","senderId":"WE4H1szBWbWAt7dbc_eQQwPIsDlM4AYTig9ZGeTZCJjyVXttlL0h6A9Kz_5ja2w4H07omeS9ouyBJXQEtTuHA9jMvQermTrNntivRW29eh8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: NEAT-python","postDate":"1226096927","msgId":4424,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRkZjEwMDc4MDgxMTA3MTQyOGgyMDgyOWM5YnI3ODMxMWYwNTk5ZjY1YzRlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdldjk0NytmaDJ1QGVHcm91cHMuY29tPg==","referencesHeader":"PGRkZjEwMDc4MDgxMTA2MDYzM3kyYjBmNDBiOXllNzVjYjFhNWM3M2IxOTMwQG1haWwuZ21haWwuY29tPgkgPGdldjk0NytmaDJ1QGVHcm91cHMuY29tPg=="},"prevInTopic":4423,"nextInTopic":4512,"prevInTime":4423,"nextInTime":4425,"topicId":4417,"numMessagesInTopic":7,"msgSnippet":"... The CTRNN version is not working properly (if you integrate using Euler, it s ok, the Runge-Kutta needs some caution). But if you re not planning to use","rawEmail":"Return-Path: &lt;cesar.gomes@...&gt;\r\nX-Sender: cesar.gomes@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 98551 invoked from network); 7 Nov 2008 22:28:49 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m49.grp.scd.yahoo.com with QMQP; 7 Nov 2008 22:28:48 -0000\r\nX-Received: from unknown (HELO nf-out-0910.google.com) (64.233.182.185)\n  by mta15.grp.scd.yahoo.com with SMTP; 7 Nov 2008 22:28:48 -0000\r\nX-Received: by nf-out-0910.google.com with SMTP id 30so1183948nfu.47\n        for &lt;neat@yahoogroups.com&gt;; Fri, 07 Nov 2008 14:28:47 -0800 (PST)\r\nX-Received: by 10.103.121.19 with SMTP id y19mr2093801mum.56.1226096927521;\n        Fri, 07 Nov 2008 14:28:47 -0800 (PST)\r\nX-Received: by 10.103.241.10 with HTTP; Fri, 7 Nov 2008 14:28:47 -0800 (PST)\r\nMessage-ID: &lt;ddf100780811071428h20829c9br78311f0599f65c4e@...&gt;\r\nDate: Fri, 7 Nov 2008 20:28:47 -0200\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;gev947+fh2u@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;ddf100780811060633y2b0f40b9ye75cb1a5c73b1930@...&gt;\n\t &lt;gev947+fh2u@...&gt;\r\nX-Google-Sender-Auth: b684baabfd96a346\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nX-eGroups-From: &quot;Cesar G. Miguel&quot; &lt;cesargm@...&gt;\r\nFrom: &quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;\r\nSubject: Re: [neat] Re: NEAT-python\r\nX-Yahoo-Group-Post: member; u=230385553; y=B3ajBLHiqXL9dpRdxba0ggRKedUgwzI7iuoijFY8uZHn\r\nX-Yahoo-Profile: fdital\r\n\r\n&gt; I&#39;m particularly interested in the DPNV experiment; what needs doing\n&gt; here for it to be equivalent to the reference implementation?\n\nThe CTRNN version is not working properly (if you integrate using\nEuler, it&#39;s ok, the Runge-Kutta needs some caution). But if you&#39;re not\nplanning to use CTRNNs, only traditional neurons, go for it. The\nperformance is similar to Ken&#39;s version. You can see that the\ncart-pole classes were wrapped from the original C++ code, so they are\n100% equivalent.\n\nFirst you need to compile de extension (on linux a library named\ndpole.so will be created):\n\n$python setup.py build_ext --inplace\n\nThen run:\n\n$python cpExp.py\n\nThe best individual will be dumped to a file: winner_date_time\n\nTo test the solution:\n\n$python test_double_pole.py winner_dumped\n\nIt solves the DPNV in 24,091 evaluations (averaged over 544 runs) with\nstdev 12,112.\n\nCesar\n\n"}}