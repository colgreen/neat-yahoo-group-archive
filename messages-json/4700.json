{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"UybSlyle4e7_RUnTpHGUwJ_r0HUFr5RCTUhkto9Cv5SFIbh-3lmnbE8_NkNeFvBcGEyb-K2XhELg05rOWrwgHKr_mdru4nLni7OlLrpwWtm-9kEnYAQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Ideas for automatically deciding the quantity of nodes for HyperNEAT substra","postDate":"1243585956","msgId":4700,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGd2bzZqNCtkY2s2QGVHcm91cHMuY29tPg==","inReplyToHeader":"PGd2bnVoNSsxMDB1aEBlR3JvdXBzLmNvbT4="},"prevInTopic":4699,"nextInTopic":4701,"prevInTime":4699,"nextInTime":4701,"topicId":4693,"numMessagesInTopic":6,"msgSnippet":"Well it depends. An object is really hard to define in terms of pattern in space but there is a definition. What all objects have in common is that most of","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 98830 invoked from network); 29 May 2009 08:33:02 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m7.grp.re1.yahoo.com with QMQP; 29 May 2009 08:33:02 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta3.grp.re1.yahoo.com with SMTP; 29 May 2009 08:33:02 -0000\r\nX-Received: from [69.147.65.148] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 29 May 2009 08:32:38 -0000\r\nX-Received: from [98.137.34.35] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 29 May 2009 08:32:38 -0000\r\nDate: Fri, 29 May 2009 08:32:36 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gvo6j4+dck6@...&gt;\r\nIn-Reply-To: &lt;gvnuh5+100uh@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: Re: Ideas for automatically deciding the quantity of nodes for HyperNEAT substra\r\nX-Yahoo-Group-Post: member; u=283334584; y=TFkhnpI3ddE4lWbrLd0QmGOrBNgg3kQH7GrfQCpsn3_5WXRfhcmwyGlS5g\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nWell it depends. An object is really hard to define in terms of pattern in =\r\nspace but there is a definition. What all objects have in common is that mo=\r\nst of their points are located in specific location in space and the rest i=\r\ns all empty. But depending of the type of pattern we want evolved we can be=\r\n more or less specific about it. A pattern that is not an object for exampl=\r\ne is a pattern repeating forever, anywhere in space. Or a pattern that is a=\r\n negative image of an object, you know, a hole in the center and all the re=\r\nst is &quot;matter&quot;. Anything that extends to infinity cannot be an object. It c=\r\nan evolve into object for just one generation, but the intermediate pattern=\r\n itself is not one. \n\nOf course, we can develop a clever algorithm that can=\r\n take any pattern and make objects and substrates out of it. For example we=\r\n can only care for the region in space with coordinates in range of [-1 .. =\r\n1] and cut off the excess parts. But we don&#39;t really have to. The idea is t=\r\nhat &quot;objects&quot; or &quot;substrates&quot; or whatever, are a small class of patterns wi=\r\nth defined characteristics. We can force the search to evolve only such pat=\r\nterns. Even a living being is a pattern and there exists a theoretical CPPN=\r\n that describes every part of it. \n\nBut now I see that getting such specifi=\r\nc patterns is hard. The search is usually unconstrained and if I try to com=\r\npare all possible patterns with the patterns I identify as objects, I will =\r\nprobably see that objects are like 0.0001% of all possibilities. But this i=\r\ns normal. We can&#39;t expect something different - the representation itself i=\r\ns not biased towards the particular class of patterns. The experimenter has=\r\n to provide it somehow. For example, if I choose a set of canonical activat=\r\nion functions that cut down the search space so like the possible patterns =\r\nwill be 10% objects, this is a great help. \n\nPeter\n\n--- In neat@yahoogroups=\r\n.com, &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt; wrote:\n&gt;\n&gt; Peter, I&#39;m thinking over =\r\nsome of insights in your message like the mutation density map.  But one th=\r\ning I don&#39;t completely understand is the point about some patterns not bein=\r\ng &quot;objects.&quot;  How do you define &quot;object?&quot;  Do you mean that some patterns a=\r\nre not contiguous?  It seems like you mean something deeper than that, but =\r\nI&#39;m not sure I follow. Can you give some examples of patterns that are not =\r\nobjects?\n&gt; \n&gt; I&#39;ll be very interested to see any experiment you complete on=\r\n substrate evolution in food gathering, especially if you evolve input and =\r\noutput placement and it works well.\n&gt; \n&gt; ken\n&gt; \n&gt; --- In neat@yahoogroups.c=\r\nom, &quot;petar_chervenski&quot; &lt;petar_chervenski@&gt; wrote:\n&gt; &gt;\n&gt; &gt; Hi Ken.\n&gt; &gt; \n&gt; &gt; =\r\nYou make a good point. My method currently increases overall density and th=\r\nis is a problem. But I think I found a solution. Suppose the substrate of a=\r\nn individual is painted on a 2D plane. Now, there can co-exist another 2D p=\r\nlane which we can call the density mutation map. It can contain floats in t=\r\nhe range of [-1 .. 1]. Each generation this map is reset to contain only va=\r\nlues of 0.0. When the density mutation is triggered, a random place and are=\r\na in the map is chosen and filled with a random value of -10% to +10% (-0.1=\r\n .. 0.1). This process can be optionally repeated until the density mutatio=\r\nn map is filled to some extend, according to a mutation power or something.=\r\n Then in the next generation, the substrate is increased/decreased in densi=\r\nty according to its density mutation map. \n&gt; &gt; \n&gt; &gt; And what could be reall=\r\ny cool is that the distribution of random locations in the density mutation=\r\n map can be predetermined by the CPPN itself. So the CPPN can actually cont=\r\nrol which locations will grow in density. As the CPPN complexifies, these l=\r\nocations can change as well.  Does it make sense? Density mutation maps are=\r\n trivial to crossover as well - just average them. \n&gt; &gt; \n&gt; &gt; Here is one in=\r\nsight I had after a long walk in circles thinking about CPPN patterns, obje=\r\ncts and substrates. Before some time, I was confident that there exists a m=\r\nethod that can convert *any* pattern in space to an object/substrate. Like =\r\nan alchemist :) But now I realized the truth.\n&gt; &gt; \n&gt; &gt; All objects we perce=\r\nive, including forms of life, are patterns in space. There is no doubt abou=\r\nt it. They are just spatial patterns in space that can be represented by CP=\r\nPNs. What mistake I did before, was to think that therefore all patterns in=\r\n space are objects. This is not true. All objects are patterns in space, bu=\r\nt not all patterns in space are objects. Objects and substrates are only a =\r\ntiny subset, a small class of patterns in space. They can be represented by=\r\n CPPNs, of course. But CPPNs can do a lot more. They can represent any patt=\r\nern in space. So I realized that there is no need to do magic tricks to get=\r\n my objects and substrates evolved. \n&gt; &gt; \n&gt; &gt; The only thing we should put =\r\nour efforts in, is to find a way to bias the search for the particular clas=\r\ns of patterns. And I immediately identified one major obstacle. Genetic def=\r\nects. A genetic lineage does not strictly follow a particular class of patt=\r\nerns. It is very possible that an object&#39;s offspring can be patterns that a=\r\nre not objects and vice versa. But we can&#39;t evaluate the non-object pattern=\r\ns.\n&gt; &gt; \n&gt; &gt; There is one solution, though. Suppose we start with a seed CPP=\r\nN that  we know is producing a good pattern. Some kind of validity check pr=\r\nocedure has to be developed, to test if a CPPN produces a pattern that belo=\r\nngs to the desired class. When any mutation occurs, that validity check is =\r\nperformed and if the resulting pattern is outside the desired class, undo t=\r\nhe mutation and try again. Repeat the process until a good pattern comes ou=\r\nt of the mutation. This way the search will strictly follow the class of pa=\r\ntterns, without hurting evolution dynamics like discarding individuals duri=\r\nng evaluation would do. \n&gt; &gt; \n&gt; &gt; But there is a higher probability for the=\r\n evolution to get stuck. Suppose you want to evolve something like an insec=\r\nt model but to get there, the search will have to pass through a space wher=\r\ne no patterns belong to the same class, even if the class of &quot;objects&quot; is s=\r\no vast. Maybe only Novelty Search can handle this. \n&gt; &gt; \n&gt; &gt; I am planning =\r\nto throw away the GNG approach and use some image processing techniques ins=\r\ntead. I found some very useful functions in OpenCV, contour extraction and =\r\npolygonal approximation for example. I&#39;ll see which one works better. I hav=\r\ne an idea to test out the substrate evolution. It is actually the HyperNEAT=\r\n food gathering task, but the inputs and outputs placement will be evolved.=\r\n And there will be a hidden layer also. It is only a project on paper now, =\r\nbut I hope I will find more time to implement it.\n&gt; &gt; \n&gt; &gt; Peter\n&gt; &gt; \n&gt; &gt; \n=\r\n&gt; &gt; \n&gt; &gt; --- In neat@yahoogroups.com, &quot;Kenneth Stanley&quot; &lt;kstanley@&gt; wrote:\n=\r\n&gt; &gt; &gt;\n&gt; &gt; &gt; Peter, I&#39;m glad to see you&#39;re still thinking about this importa=\r\nnt question.  You make some interesting observations.  I think you&#39;re proba=\r\nbly right that trying to correlate node density to CPPN complexity is not t=\r\nhe best approach.  On the other hand, making changes in node density correl=\r\nated somewhat with fitness seems potentially sensible.  But it still doesn&#39;=\r\nt seem to answer the big question of where within the substrate to add the =\r\nnodes?  Or would you just increase overall density uniformly?  My concern i=\r\ns that biological brains did not increase in density (which for them may ju=\r\nst mean size) uniformly.  That is, some parts of the brain got bigger while=\r\n others did not.  That would seem to imply that a substrate should be able =\r\nto add density selectively to specific regions that evolution decides on it=\r\nself.  Or perhaps your idea incorporates that kind of regional growth someh=\r\now already?\n&gt; &gt; &gt; \n&gt; &gt; &gt; About saturation of the sigmoid- that is indeed an=\r\n important issue.  Right now we are investigating some techniques to mitiga=\r\nte saturation, which I think will end up being effective and also which wil=\r\nl facilitate the kind of massive substrate complexification that would be r=\r\neally cool to see in the future.\n&gt; &gt; &gt; \n&gt; &gt; &gt; Still, we still do not have a=\r\nny elegant algorithm to evolve the substrate, though I am confident it will=\r\n be possible.\n&gt; &gt; &gt; \n&gt; &gt; &gt; ken\n&gt; &gt; &gt; \n&gt; &gt; &gt; --- In neat@yahoogroups.com, &quot;p=\r\netar_chervenski&quot; &lt;petar_chervenski@&gt; wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Hi all!\n&gt; &gt; &gt; &gt;=\r\n \n&gt; &gt; &gt; &gt; I was gone for a while, but before a day or so I had some spare t=\r\nime to continue my research about automated substrate evolution. \n&gt; &gt; &gt; &gt; \n=\r\n&gt; &gt; &gt; &gt; My latest research so far ended up with a system capable of approxi=\r\nmating any spatial CPPN picture with a developing mesh based on the Growing=\r\n Neural Gas algorithm. While this worked well and could be used for evolvin=\r\ng substrate configurations right away, there was still a problem about deci=\r\nding the right number of nodes for particular individuals. With GNG, it is =\r\nmore like a problem of deciding when to stop development or approximation o=\r\nf the CPPN picture. \n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; When we discussed the issue some time=\r\n ago, I had the idea that CPPN complexity can be directly linked to substra=\r\nte density. More complex CPPN =3D more dense substrate. This seems like a s=\r\nolution but it I think it is actually a bad idea. A CPPN containing many no=\r\ndes and links does not always produce a complex pattern in space. It can be=\r\n an entirely white or black picture, due to genetic defects. Plus, it is no=\r\nt sure that the problem requires that many nodes to be solved - the CPPN ma=\r\ny have enormous complexity but producing a simple well-shaped picture that =\r\nsolves it. \n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; So what I think now is, that substrate density=\r\n should be related to fitness instead. How exactly? Well here is my idea. \n=\r\n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; All individuals start with a minimal number of nodes in th=\r\ne substrate, say 50. There will be a mutation increasing the number of node=\r\ns with about 0%-10% or decreasing with 0%-10%. The mutation rate will vary =\r\nacross species. Species that are stagnating for too long time will have the=\r\n probability of this mutation increased - because they may just lack the nu=\r\nmber of nodes to solve the problem. Or have too many nodes. \n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt;=\r\n &gt; You know, there is a problem with having the number of nodes increasing =\r\nand this is the over saturation of the sigmoid. Increasing the density with=\r\n 2x will have very big impact if the weights are not altered, especially in=\r\n case recurrence is present. How can we cope with that? \n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; I=\r\n don&#39;t have any experimental data yet, I am too busy programming some bulls=\r\nhit but please tell me if this ideas make sense to you. \n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; P=\r\neter\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n"}}