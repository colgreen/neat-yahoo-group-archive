{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"FGDciBIRssthU9SDVWaD-T4H8TfW8oC5zOuKPKnV-oGEoag79AiT-DBUhwf5y6J1uBBefhhMfGV6X4wwRWWfwMQyCPC6FRPwy75chNNniny2oFd8S7I","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: rtNEAT: max_depth() in an endless loop","postDate":"1225732079","msgId":4404,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdlbmI1ZitxZ3BzQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDQ5MEYxMzNCLjgwNDA5MDNAeWFob28uY29tPg=="},"prevInTopic":4403,"nextInTopic":4407,"prevInTime":4403,"nextInTime":4405,"topicId":4396,"numMessagesInTopic":16,"msgSnippet":"It is about the loop in which you calculate the longest path from an input node to an output node. Not the activation loop in which you activate the network. ","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 65888 invoked from network); 3 Nov 2008 17:08:00 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m42.grp.scd.yahoo.com with QMQP; 3 Nov 2008 17:08:00 -0000\r\nX-Received: from unknown (HELO n51c.bullet.mail.sp1.yahoo.com) (66.163.168.185)\n  by mta17.grp.scd.yahoo.com with SMTP; 3 Nov 2008 17:08:00 -0000\r\nX-Received: from [69.147.65.149] by n51.bullet.mail.sp1.yahoo.com with NNFMP; 03 Nov 2008 17:08:00 -0000\r\nX-Received: from [66.218.66.92] by t9.bullet.mail.sp1.yahoo.com with NNFMP; 03 Nov 2008 17:08:00 -0000\r\nDate: Mon, 03 Nov 2008 17:07:59 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;genb5f+qgps@...&gt;\r\nIn-Reply-To: &lt;490F133B.8040903@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: Re: rtNEAT: max_depth() in an endless loop\r\nX-Yahoo-Group-Post: member; u=283334584; y=KZ6mqj3eaRw-6weCldhQXHP-64G6E4sdNZl6jVmabO7yzc_m053DR8bHNw\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nIt is about the loop in which you calculate the longest path from an \ninput=\r\n node to an output node. Not the activation loop in which you \nactivate the=\r\n network. \n\nPeter\n\n--- In neat@yahoogroups.com, Jim O&#39;Flaherty &lt;jim_oflaher=\r\nty_jr@...&gt; \nwrote:\n&gt;\n&gt; Ken,\n&gt; \n&gt; I am confused how you could end up in an e=\r\nndless activation loop. If \nyou \n&gt; are moving from the input nodes forward =\r\nthrough the hidden nodes to \nthe \n&gt; output nodes as a state calculation pro=\r\ngression, there would be no \nneed \n&gt; to worry about activation loops - you =\r\nwould only calculate the value \nof \n&gt; each node once in a single pass. The =\r\npoint of a recurrent connection \nis \n&gt; to carry state between full network =\r\nactivations. So, the value \nprovided \n&gt; by a recurrent connection would not=\r\n be used until the next \nactivation \n&gt; pass (assuming all the nodes from th=\r\ne previous pass have not be \n&quot;zeroed \n&gt; out&quot;).\n&gt; \n&gt; How is it there is an e=\r\nndless loop?\n&gt; \n&gt; \n&gt; Jim\n&gt; \n&gt; \n&gt; Kenneth Stanley wrote:\n&gt; &gt;\n&gt; &gt; Yes I have =\r\nheard about this problem coming up in the XOR \nexperiment.\n&gt; &gt; Most neuroev=\r\nolution experiments are not classification experiments\n&gt; &gt; (i.e. they don&#39;t=\r\n have a &quot;final&quot; output), or they allow recurrent\n&gt; &gt; connections, and there=\r\nfore do not require depth to be computed.\n&gt; &gt; Therefore, this problem will =\r\nnot come up in most expeirments.\n&gt; &gt;\n&gt; &gt; However, XOR is a benchmark classi=\r\nfication problem that is only \nmeant\n&gt; &gt; to be attempted by feedforward net=\r\nworks so it needs to have depth\n&gt; &gt; computed. It appears that my attempts t=\r\no keep the network \nfeedforward\n&gt; &gt; in all cases is not perfect, so sometim=\r\nes when a loop arises, it \nsends\n&gt; &gt; the depth computation into an infinite=\r\n loop. I have not had time \nto\n&gt; &gt; think about the most elegant solution to=\r\n this problem: Maybe it \nshould\n&gt; &gt; be a stronger check on recurrence, perh=\r\naps entirely different from \nhow\n&gt; &gt; it works now. Or perhaps it should be =\r\na fixed abort-iteration for \nthe\n&gt; &gt; depth routine.\n&gt; &gt;\n&gt; &gt; If someone does=\r\n feel they have an elegant bit of code to address \nthe\n&gt; &gt; issue, I will be=\r\n happy to take a look.\n&gt; &gt;\n&gt; &gt; In any case, it should not cause serious pro=\r\nblems in general. I\n&gt; &gt; apologize for any inconvenience.\n&gt; &gt;\n&gt; &gt; ken\n&gt; &gt;\n&gt; =\r\n&gt; --- In neat@yahoogroups.com &lt;mailto:neat%40yahoogroups.com&gt;, \n&gt; &gt; &quot;petar_=\r\nchervenski&quot; &lt;petar_chervenski@&gt;\n&gt; &gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Hi Cesar,\n&gt; &gt; &gt;\n&gt; &gt; =\r\n&gt; I know of this problem. It is obvious that depth cannot be \ndetermined\n&gt; =\r\n&gt; &gt; in a recurrent network, but in general it depends, what is your \nway to=\r\n\n&gt; &gt; &gt; handle the situation. Try improving the add_link() code so that \nthe=\r\n\n&gt; &gt; &gt; right nodes are picked up when trying to add a forward or a \nrecurre=\r\nnt\n&gt; &gt; &gt; connection. This is a good solution but in general the problem \nwi=\r\nth\n&gt; &gt; &gt; looped networks cannot be avoided. Suppose you have 3 hidden \nnode=\r\ns, A,\n&gt; &gt; &gt; B, and C. If you link these like A-&gt;B, B-&gt;C, C-&gt;A, it is a loop=\r\n \nin the\n&gt; &gt; &gt; network, even though all connections are meant to be forward=\r\n.\n&gt; &gt; &gt; The best solution in my opinion is to put a limit on the \npossible\n=\r\n&gt; &gt; &gt; depth, say 32, if the depth exceeds 32, quit the recursion and\n&gt; &gt; &gt; =\r\nactivate the network 32 times. It slows things down but at least \nit\n&gt; &gt; &gt; =\r\nwill not hurt evolution as if you penalize looped networks.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Pet=\r\ner\n&gt; &gt; &gt;\n&gt; &gt; &gt; --- In neat@yahoogroups.com &lt;mailto:neat%40yahoogroups.com&gt;,=\r\n \n&quot;Cesar \n&gt; &gt; G. Miguel&quot; &lt;cesar.gomes@&gt;\n&gt; &gt; &gt; wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Hi all=\r\n,\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; I&#39;m not sure if someone else has notice this &quot;bug&quot; in rtN=\r\nEAT, \nbut\n&gt; &gt; &gt; the\n&gt; &gt; &gt; &gt; max_depth() method in network.cpp has the poten=\r\ntial to be \nforever in\n&gt; &gt; &gt; &gt; loop if a recurrent link is added in a feedf=\r\norward topology, \ne.g.,\n&gt; &gt; &gt; the\n&gt; &gt; &gt; &gt; XOR experiment (and that can happ=\r\nen even when the \nrecur_only_prob\n&gt; &gt; &gt; &gt; parameter is set to zero). A real=\r\n example is attached.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; It seems to happen in 1 out of 10 run=\r\ns. The max_depth() method \ncalls\n&gt; &gt; &gt; &gt; depth() in nnode.cpp, which should=\r\n return the max depth of \nthat\n&gt; &gt; &gt; node.\n&gt; &gt; &gt; &gt; But it can get trapped i=\r\nn a loop if any recurrent link is \npresent\n&gt; &gt; &gt; (as\n&gt; &gt; &gt; &gt; it is commente=\r\nd out in the source: DEPTH NOT DETERMINED FOR \nNETWORK\n&gt; &gt; &gt; &gt; WITH LOOP).\n=\r\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; For those cases I have to force a return if an endless loop=\r\n is\n&gt; &gt; &gt; &gt; detected and then set the chromosome&#39;s fitness to zero in \norde=\r\nr to\n&gt; &gt; &gt; &gt; continue.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Has anyone dealed with that before?\n=\r\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; []&#39;s\n&gt; &gt; &gt; &gt; Cesar\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n\n"}}