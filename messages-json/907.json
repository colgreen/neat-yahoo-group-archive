{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":82117382,"authorName":"Jim O&#39;Flaherty, Jr.","from":"&quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;","profile":"jim_oflaherty_jr","replyTo":"LIST","senderId":"fIB1-7ryVJeK8c0YhGt_TEQL_hRGQrK6K5WO6d_M_zOlY9eQ4KRyvgcJLDZ6C4Flm96GrX_poK0_x85vliPXOCiK_hrQlc3RlQsnUfzMtOrA41suynt9Jc8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Computation Time","postDate":"1085879921","msgId":907,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNDkwMWM0NDVlNCQ1YzY3NGJiMCQzMjAxYThjMEBORVdBR0U+","referencesHeader":"PEJBWTItRjZwYTUwVUl4Z3pnZ2YwMDAzNWI4MkBob3RtYWlsLmNvbT4gPDAwZWUwMWM0NDUyZCQzNGI0MWIwMCQzMjAxYThjMEBORVdBR0U+IDxXb3JsZENsaWVudC1GMjAwNDA1MjkxMTQyLkFBNDIwNDAxMzJAb2N0YWdhdGUuY29tPiA8MDAyOTAxYzQ0NTdiJDk5MDIxMTQwJDMyMDFhOGMwQE5FV0FHRT4gPFdvcmxkQ2xpZW50LUYyMDA0MDUyOTE4NDIuQUE0MjI2MDEzNEBvY3RhZ2F0ZS5jb20+"},"prevInTopic":906,"nextInTopic":910,"prevInTime":906,"nextInTime":908,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"Mattias, Ah.  Got it.  What you are talking about is taking the results of a long run and turning it into something optimal after you have a solution you find","rawEmail":"Return-Path: &lt;jim_oflaherty_jr@...&gt;\r\nX-Sender: jim_oflaherty_jr@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 99889 invoked from network); 30 May 2004 01:21:02 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m21.grp.scd.yahoo.com with QMQP; 30 May 2004 01:21:02 -0000\r\nReceived: from unknown (HELO smtp104.mail.sc5.yahoo.com) (66.163.169.223)\n  by mta1.grp.scd.yahoo.com with SMTP; 30 May 2004 01:21:02 -0000\r\nReceived: from unknown (HELO NEWAGE) (jim?oflaherty?jr@24.1.159.151 with login)\n  by smtp104.mail.sc5.yahoo.com with SMTP; 30 May 2004 01:20:57 -0000\r\nMessage-ID: &lt;004901c445e4$5c674bb0$3201a8c0@NEWAGE&gt;\r\nTo: &lt;neat@yahoogroups.com&gt;\r\nReferences: &lt;BAY2-F6pa50UIxgzggf00035b82@...&gt; &lt;00ee01c4452d$34b41b00$3201a8c0@NEWAGE&gt; &lt;WorldClient-F200405291142.AA42040132@...&gt; &lt;002901c4457b$99021140$3201a8c0@NEWAGE&gt; &lt;WorldClient-F200405291842.AA42260134@...&gt;\r\nDate: Sat, 29 May 2004 20:18:41 -0500\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_002E_01C445BA.22695AE0&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2720.3000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2739.300\r\nX-eGroups-Remote-IP: 66.163.169.223\r\nFrom: &quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;\r\nSubject: Re: [neat] Re: Computation Time\r\nX-Yahoo-Group-Post: member; u=82117382\r\nX-Yahoo-Profile: jim_oflaherty_jr\r\n\r\n\r\n------=_NextPart_000_002E_01C445BA.22695AE0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMattias,\n\nAh.  Got it.  What you are talking about is taking the results of=\r\n a long run and turning it into something optimal after you have a solution=\r\n you find desirable.  That makes sense.\n\nIt appears we have different goals=\r\n - yours is after you have done some number of NEAT runs and produced a res=\r\nult you then want to exploit in a completely separate way (apart from NEAT)=\r\n.  And mine is to further reduce the amount of time required *during* a NEA=\r\nT run so you can get to your result more quickly.  These goals are compatib=\r\nle with each other.  And with the XML description definitions, it is likely=\r\n they can even be complimentary.\n\n\nYou wrote:\n1. The precompiled code would=\r\n be (slightly) faster.\n\nI think this is accurate, if you are saying the Del=\r\nphi dynamic evaluation code would be slower than the Delphi pre-compiled co=\r\nde.\n\nHowever, you may be saying, precompiled code is faster than &quot;interpret=\r\ned&quot; code.  If this is an accurate view of your statement, I would recommend=\r\n you research the current IBM and Sun JVMs.  Their combined &quot;interpreted/co=\r\nmpiled&quot; environments are now consistently beating precompiled code.  Why?  =\r\nThe optimization is postponed to run time where all sorts of additional &quot;as=\r\nsumptions&quot; can be made about what can be safely inlined, discovering polymo=\r\nrphic routines that can be made static (removing the polymorphic indirectio=\r\nn cost), how memory can be managed on a completely separate thread (garbage=\r\n collection) such that the executing code has NO &quot;free()&quot; overhead in its e=\r\nxecution, etc.\n\nModern Java JVMs completely decouple many of the previous &quot;=\r\noptimization&quot; issues and then do run time discovery to optimize effectively=\r\n.  For example, Sun&#39;s Hotspot JVM focuses on code that is genuinely execute=\r\nd a larger percentage of the time and spends its optimization on just that =\r\ncode.  This is very consistent with the principle, &quot;Strongly prefer optimiz=\r\ne the constraint&quot; as that is where the largest gains for the smallest costs=\r\n are yielded.\n\nI used Delphi for years.  I think it is a great environment.=\r\n  It has a very efficient compiler core and excellent compile time optimiza=\r\ntions.  It is possible if you are exploiting Delphi code effectively, it ca=\r\nn reach speeds higher than most C++ compilers.  Borland has done a great jo=\r\nb with Delphi.  It is possible that Delphi could outperform Java in some ve=\r\nry specific instances.  All in all, I am looking to optimize other issues l=\r\nike distributed computation and minimize the amount of &quot;low level framework=\r\n&quot; code I must implement.  And thus far, Java has remained the better option=\r\n against, Delphi, VC++, Intel C++, C#.  I suspect that C# will eventually c=\r\natch Java as MS is so hyper competitive.  However, until they get code mobi=\r\nlity similar to RMI/JINI, even .Net still requires too much work...at least=\r\n for me.\n\nAnd now that the JVM is enables me to alter code *during executio=\r\nn* (very similar to how Visual Basic used to allow edits to the code while =\r\nit was running), it is just so bloody efficient to write Java code on the f=\r\nly now.\n\nUh...can you see I am enthralled with Java?!  ;^)\n\n\nJim\n\n\n  ----- =\r\nOriginal Message ----- \n  From: Mattias Fagerlund \n  To: neat@yahoogroups.c=\r\nom \n  Sent: Saturday, May 29, 2004 11:42 AM\n  Subject: Re: [neat] Re: Compu=\r\ntation Time\n\n\n  &gt; Maybe you have an environment that allows your\n  &gt; genera=\r\nted code to be compiled and then loaded in without stopping your\n  &gt; runtim=\r\ne environment.  Is that the case?  If so, what environment are\n  &gt; you usin=\r\ng?\n\n  No, I don&#39;t use this code for the evolving process - but if I ever \n =\r\n evolved a solution that I wanted to deploy with a stand alone program, \n  =\r\nI&#39;d rather generate the code and deploy that than deploy the entire NEAT \n =\r\n environment.\n\n  1. The precompiled code would be (slightly) faster.\n  2. T=\r\nhe complexity of the deployed code would be reduced.\n\n  Mostly I just wrote=\r\n it to test that it could be done.\n\n  Oh, I use Delphi for DelphiNEAT - Del=\r\nphi is an object pascal environment.\n\n  cheers,\n  m\n\n\n\n        Yahoo! Group=\r\ns Sponsor \n              ADVERTISEMENT\n             \n       \n       \n\n\n----=\r\n--------------------------------------------------------------------------\n=\r\n  Yahoo! Groups Links\n\n    a.. To visit your group on the web, go to:\n    h=\r\nttp://groups.yahoo.com/group/neat/\n      \n    b.. To unsubscribe from this =\r\ngroup, send an email to:\n    neat-unsubscribe@yahoogroups.com\n      \n    c.=\r\n. Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. \n\n\n\r\n------=_NextPart_000_002E_01C445BA.22695AE0\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1=\r\n&quot;&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2737.800&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE&gt;=\r\n\n&lt;/HEAD&gt;\n&lt;BODY bgColor=3D#ffffff&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Mattias,=\r\n&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;Ah.&nbsp; Got it.&nbsp; What you are talking about=\r\n \nis taking the results of a long run and turning it into something optimal=\r\n after \nyou have a solution you find desirable.&nbsp; That makes sense.&lt;/FO=\r\nNT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT f=\r\nace=3DArial size=3D2&gt;It appears we have different goals - yours is after \ny=\r\nou have done some number of NEAT runs and produced a result you then want t=\r\no \nexploit in a completely separate way (apart from NEAT).&nbsp; And mine i=\r\ns to \nfurther reduce the amount of time required *during* a NEAT run so you=\r\n can get to \nyour result more quickly.&nbsp; These goals are compatible wit=\r\nh each \nother.&nbsp; And with the XML description definitions, it is likely=\r\n they can \neven be complimentary.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DI=\r\nV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;You wrote:&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3D&quot;Courier New&quot;&gt;1. The precompiled code would be (slightly) \nfaster.&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT fac=\r\ne=3DArial size=3D2&gt;I think this is accurate, if you are saying the \nDelphi =\r\ndynamic evaluation code would be slower than the Delphi pre-compiled \ncode.=\r\n&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;However, you may be saying,&nbsp;precompiled code =\r\n\nis faster than &quot;interpreted&quot; code.&nbsp; If this is an accurate view of yo=\r\nur \nstatement, I would recommend you research the current IBM and Sun JVMs.=\r\n&nbsp; \nTheir combined &quot;interpreted/compiled&quot; environments are now consiste=\r\nntly beating \nprecompiled code.&nbsp; Why?&nbsp; The optimization is postpo=\r\nned to run time \nwhere all sorts of additional &quot;assumptions&quot; can be made ab=\r\nout what can be safely \ninlined, discovering polymorphic routines that can =\r\nbe made static (removing the \npolymorphic indirection cost), how memory can=\r\n be managed on a completely \nseparate thread (garbage collection) such that=\r\n the executing code has NO \n&quot;free()&quot; overhead in its execution, etc.&lt;/FONT&gt;=\r\n&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;Modern Java JVMs completely decouple many of the \npreviou=\r\ns &quot;optimization&quot; issues and then do run time discovery to optimize \neffecti=\r\nvely.&nbsp; For example, Sun&#39;s Hotspot JVM focuses on code that is \ngenuine=\r\nly executed a larger percentage of the time and spends its optimization \non=\r\n just that code.&nbsp; This is very consistent with the principle, &quot;Strongl=\r\ny \nprefer optimize the constraint&quot; as that is where the largest gains for t=\r\nhe \nsmallest costs are yielded.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;I used Delphi for=\r\n years.&nbsp; I think it is a \ngreat environment.&nbsp; It has a very effic=\r\nient compiler core and excellent \ncompile time optimizations.&nbsp; It is p=\r\nossible if you are exploiting Delphi \ncode effectively, it can reach speeds=\r\n higher than most C++ compilers.&nbsp; \nBorland has done a great job with D=\r\nelphi.&nbsp; It is possible that Delphi could \noutperform Java in some very=\r\n specific instances.&nbsp; All in all, I am looking \nto optimize other issu=\r\nes like distributed computation and minimize the amount of \n&quot;low level fram=\r\nework&quot; code I must implement.&nbsp; And thus far, Java has \nremained the be=\r\ntter option against, Delphi, VC++, Intel C++, C#.&nbsp; I suspect \nthat C# =\r\nwill eventually catch Java as MS is so hyper competitive.&nbsp; However, \nu=\r\nntil they get code mobility similar to RMI/JINI, even .Net still requires t=\r\noo \nmuch work...at least for me.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;And now that the =\r\nJVM is enables me to alter code \n*during execution* (very similar to how Vi=\r\nsual Basic used to allow edits to the \ncode while it was running), it is ju=\r\nst so bloody efficient to write Java code on \nthe fly now.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial s=\r\nize=3D2&gt;Uh...can you see I am enthralled with Java?!&nbsp; \n;^)&lt;/FONT&gt;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DAr=\r\nial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Jim&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT fac=\r\ne=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;BLOCKQUOTE \nstyle=3D&quot;PADDING-RIGHT:=\r\n 0px; PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; =\r\nMARGIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;----- Original Messag=\r\ne ----- &lt;/DIV&gt;\n  &lt;DIV \n  style=3D&quot;BACKGROUND: #e4e4e4; FONT: 10pt arial; fo=\r\nnt-color: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n  &lt;A title=3Dmattias@... \n  hre=\r\nf=3D&quot;mailto:mattias@...&quot;&gt;Mattias Fagerlund&lt;/A&gt; &lt;/DIV&gt;\n  &lt;DIV s=\r\ntyle=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A title=3Dneat@yahoogroups.com \n  hre=\r\nf=3D&quot;mailto:neat@yahoogroups.com&quot;&gt;neat@yahoogroups.com&lt;/A&gt; &lt;/DIV&gt;\n  &lt;DIV st=\r\nyle=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Saturday, May 29, 2004 11:42 \n  AM&lt;/D=\r\nIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject:&lt;/B&gt; Re: [neat] Re: Comput=\r\nation \n  Time&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3D=\r\nArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT \n  face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DAr=\r\nial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial \n  size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DAria=\r\nl size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial \n  size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial =\r\nsize=3D2&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;TT&gt;&gt; Maybe you have \n  an environment that al=\r\nlows your&lt;BR&gt;&gt; generated code to be compiled and then \n  loaded in witho=\r\nut stopping your&lt;BR&gt;&gt; runtime environment.&nbsp; Is that the \n  case?&nb=\r\nsp; If so, what environment are&lt;BR&gt;&gt; you using?&lt;BR&gt;&lt;BR&gt;No, I don&#39;t \n  us=\r\ne this code for the evolving process - but if I ever &lt;BR&gt;evolved a solution=\r\n \n  that I wanted to deploy with a stand alone program, &lt;BR&gt;I&#39;d rather gene=\r\nrate \n  the code and deploy that than deploy the entire NEAT \n  &lt;BR&gt;environ=\r\nment.&lt;BR&gt;&lt;BR&gt;1. The precompiled code would be (slightly) \n  faster.&lt;BR&gt;2. T=\r\nhe complexity of the deployed code would be \n  reduced.&lt;BR&gt;&lt;BR&gt;Mostly I jus=\r\nt wrote it to test that it could be \n  done.&lt;BR&gt;&lt;BR&gt;Oh, I use Delphi for De=\r\nlphiNEAT - Delphi is an object pascal \n  environment.&lt;BR&gt;&lt;BR&gt;cheers,&lt;BR&gt;m&lt;B=\r\nR&gt;&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_002E_01C445BA.22695AE0--\r\n\n"}}