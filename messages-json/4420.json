{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"O6aqBofdA5wLhfVFV15WdjzGU9A1AEZfl_GIh-eRw6PTj6IlVYpWHJR7TXJ8rQmwd93mPbKMIaQovJtV9JtZyzeIhR-83qF-ci2CDhwI8VQi","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: rtNEAT: max_depth() in an endless loop","postDate":"1225820946","msgId":4420,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdlcTF1aSs0ZG9mQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGRkZjEwMDc4MDgxMTAzMDc0MnMxZWJiMzk5OW83ODM4OTE0M2Q2ODg4NWRjQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":4414,"nextInTopic":0,"prevInTime":4419,"nextInTime":4421,"topicId":4396,"numMessagesInTopic":16,"msgSnippet":"Cesar, Yes that does sound like a good approach- better than my approach for identifying recurrent connections in rtNEAT.  My approach involves loop-checking,","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 85023 invoked from network); 4 Nov 2008 17:49:10 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m56.grp.scd.yahoo.com with QMQP; 4 Nov 2008 17:49:10 -0000\r\nX-Received: from unknown (HELO n14b.bullet.sp1.yahoo.com) (69.147.64.116)\n  by mta18.grp.scd.yahoo.com with SMTP; 4 Nov 2008 17:49:09 -0000\r\nX-Received: from [69.147.65.147] by n14.bullet.sp1.yahoo.com with NNFMP; 04 Nov 2008 17:49:06 -0000\r\nX-Received: from [66.218.66.77] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 04 Nov 2008 17:49:06 -0000\r\nDate: Tue, 04 Nov 2008 17:49:06 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;geq1ui+4dof@...&gt;\r\nIn-Reply-To: &lt;ddf100780811030742s1ebb3999o78389143d68885dc@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: rtNEAT: max_depth() in an endless loop\r\nX-Yahoo-Group-Post: member; u=54567749; y=V5Em3oaB08cmxxOdJDIsl_18lNKGGAkRpq-ylz_Vw2iWxmZR9Sng\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nCesar,\n\nYes that does sound like a good approach- better than my approach f=\r\nor\nidentifying recurrent connections in rtNEAT.  My approach involves\nloop-=\r\nchecking, which means that rtNEAT tries to find circles in the\ngraph caused=\r\n by adding a new connection.  If it finds such a loop, it\nmarks the connect=\r\nion as recurrent.  (Jim: So that does mean that the\nprogram attempts to mar=\r\nk the recurrent connections as you suggest.) \nThe problem is, as Joel point=\r\ned out, once in a rare while a loop seeps\ninto the network anyway, without =\r\nrtNEAT noticing it (and therefore\nwithout any new connection being marked a=\r\ns recurrent).  That&#39;s the\nbug.  Once a network has a loop that is made of c=\r\nonnections that are\nnot marked as recurrent, any attempt to compute its dep=\r\nth will get\ncaught in an infinite loop.  \n\nClearly the max_depth function s=\r\nhould just abort after some amount of\ntime, but that is more of a hack than=\r\n a real solution.  I think a\nbetter solution is to use the type of method t=\r\nhat you (Cesar) are\nproposing.  Others have also used similar approaches to=\r\n maintaining a\ndepth marking on each node, and once people started doing th=\r\nat I\nrealized that my way of loop-checking can be improved.\n\nA piece of his=\r\ntorical trivia about this issue is that I never\nconsidered max_depth to be =\r\n&quot;part&quot; of NEAT.  I was not mainly\ninterested in classification problems tha=\r\nt require a &quot;final&quot; output,\nso I just kind of hacked max_depth together for=\r\n the XOR test without\nany expectation of using it a lot.  I didn&#39;t realize =\r\nat the time how\nmany people would ultimately be using the software and pote=\r\nntially\nbeing confused by it.\n\nOf course, the issue of activation itself (e=\r\nspecially of\narbitrary-topology networks) is often confusing to ANN beginne=\r\nrs, and\nit can lead to long complicated discussions about what it means to\n=\r\n&quot;acitvate&quot; (i.e. length of one connection in one tick, or span of an\nentire=\r\n network?), and which way is best.  The difference between\nclassification t=\r\nasks and continual control tasks unfortunately only\nmakes it more confusing=\r\n.  Hopefully this discussion has not left\nanyone feeling confused- it&#39;s jus=\r\nt about how to compute the depth of a\nnetwork (which might be recurrent) in=\r\n an efficient manner. \n\nken\n\n--- In neat@yahoogroups.com, &quot;Cesar G. Miguel&quot;=\r\n &lt;cesar.gomes@...&gt; wrote:\n&gt;\n&gt; Hi Ken,\n&gt; \n&gt; While implementing NEAT-Python w=\r\ne had to solve the same problem and I\n&gt; wasn&#39;t sure how to do it efficientl=\r\ny for arbitrary feedforward\n&gt; networks (for recurrent nets it&#39;s easy). Then=\r\n we came up with an idea\n&gt; without using depth level: we have a &quot;list of or=\r\ndered nodes&quot; to follow\n&gt; when activating the network. The list is built whi=\r\nle augmenting the\n&gt; topology. Example:\n&gt; \n&gt; Consider the activation order: =\r\n[N1, N2, N7, N5, N3, N4]\n&gt; \n&gt; Node 7 depends on the activations coming from=\r\n N1 and N2. Node 5\n&gt; depends on N1, N2, and N7.\n&gt; N3 depends on N1 and N4 o=\r\nn N7, N3, and N5.\n&gt; \n&gt; If a mutation adds a new node (N8) between, say, N7 =\r\nand N5, the list\n&gt; is updated accordingly:\n&gt; \n&gt; New activation order: [N1, =\r\nN2, N7, N8, N5, N3, N4]\n&gt; \n&gt; In that context, depth would be the size of th=\r\ne activation list. But\n&gt; that&#39;s irrelevant when following the right order (=\r\nit&#39;s much like a\n&gt; simple MLP with several layers, but now the topology can=\r\n be\n&gt; arbitrary). I will try to explain our algorithm later (with the help\n=\r\n&gt; of some graphical representation) and post it here.\n&gt; \n&gt; []&#39;s\n&gt; Cesar\n&gt;\n\n=\r\n\n\n"}}