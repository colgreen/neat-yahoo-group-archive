{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":170210925,"authorName":"Ashot Petrosian","from":"&quot;Ashot Petrosian&quot; &lt;ashot@...&gt;","profile":"Ashot_Petrosian","replyTo":"LIST","senderId":"k9CipYPz36PQoVUa6_3kg_A6x1lNBVRmCkMzk0ZANe3k27BNt2RgH830YnKHrclCijuTv6KnOU-0kE7qr1jk24bLXRrM2vPKqnq9j4-kVfQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: Python NEAT","postDate":"1121514766","msgId":2098,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PG9wc3R6OGw4amd4NHAzM21AbWFpbC51dGV4YXMuZWR1Pg==","inReplyToHeader":"PFBpbmUuTE5YLjQuNjMuMDUwNzE1MTAyNDU2MC40OTIzQG9yYW5nZS1wZWtvZS5jcy51dGV4YXMuZWR1Pg==","referencesHeader":"PGRiN24xNit0OTM1QGVHcm91cHMuY29tPiA8UGluZS5MTlguNC42My4wNTA3MTUxMDI0NTYwLjQ5MjNAb3JhbmdlLXBla29lLmNzLnV0ZXhhcy5lZHU+"},"prevInTopic":2097,"nextInTopic":2101,"prevInTime":2097,"nextInTime":2099,"topicId":535,"numMessagesInTopic":47,"msgSnippet":"... I store the generation during which an innovation id was introduced, and at each epoch I count the number of networks each id occurs in. Then each network","rawEmail":"Return-Path: &lt;ashot@...&gt;\r\nX-Sender: ashot@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 5681 invoked from network); 16 Jul 2005 11:52:48 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m11.grp.scd.yahoo.com with QMQP; 16 Jul 2005 11:52:48 -0000\r\nReceived: from unknown (HELO wb2-a.mail.utexas.edu) (128.83.126.136)\n  by mta3.grp.scd.yahoo.com with SMTP; 16 Jul 2005 11:52:47 -0000\r\nReceived: (qmail 80154 invoked from network); 16 Jul 2005 11:52:46 -0000\r\nReceived: from pcp07743086pcs.nrockv01.md.comcast.net (HELO mail.utexas.edu) (ashot@69.138.172.137)\n  by wb2.mail.utexas.edu with RC4-SHA encrypted SMTP; 16 Jul 2005 11:52:46 -0000\r\nIn-Reply-To: &lt;Pine.LNX.4.63.0507151024560.4923@...&gt;\r\nReferences: &lt;db7n16+t935@...&gt; &lt;Pine.LNX.4.63.0507151024560.4923@...&gt;\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;opstz8l8jgx4p33m@...&gt;\r\nContent-Type: text/plain; format=flowed; delsp=yes; charset=iso-8859-15\r\nMIME-Version: 1.0\r\nContent-Transfer-Encoding: 8bit\r\nDate: Sat, 16 Jul 2005 06:52:46 -0500\r\nUser-Agent: Opera M2/7.50 (Win32, build 3778)\r\nX-eGroups-Msg-Info: 1:12:0\r\nX-eGroups-From: &quot;Ashot Petrosian&quot; &lt;ashot@...&gt;\r\nFrom: &quot;Ashot Petrosian&quot; &lt;ashot@...&gt;\r\nSubject: Re: [neat] Re: Python NEAT\r\nX-Yahoo-Group-Post: member; u=170210925; y=yUwqxpjv4sOC0Y_zxQyEWb-nLQY9gOuHABOKlnea4RsNQNHIlkZaDC6b\r\nX-Yahoo-Profile: Ashot_Petrosian\r\n\r\nOn Fri, 15 Jul 2005 10:36:01 -0500 (CDT), Joseph Reisinger &lt;joeraii@...&gt; wrote:\n\n&gt; On Fri, 15 Jul 2005, Ashot_Petrosian wrote:\n&gt;\n&gt;&gt; \tI have implemented a Python version of NEAT myself which is\n&gt;&gt; feature-complete and has been successfully tested on XOR and double\n&gt;&gt; pole balancing, and which I&#39;m using now to evolve controllers for some\n&gt;&gt; simple soccer playing bots.  I should say that my version is not a\n&gt;&gt; carbon copy of the original in implementation and is in fact different\n&gt;&gt; in a few areas by quite a bit (although I think functionally mostly\n&gt;&gt; equivalent).  The three biggest differences that I can think of are\n&gt;&gt; that speciation is done continuously without distinct species\n&gt;&gt; (individuals get fitness modifications depending on how new and how\n&gt;&gt; rare their innovations are, and probablistically mated based on\n&gt;&gt; similarity), there is no genotype - crossover and mutation is just\n&gt;&gt; done directly, and links don&#39;t have their own innovation ids (instead\n&gt;&gt; its a tuple of the innovation ids that they connect).   I can describe\n&gt;&gt; these in more detail, but I don&#39;t think they are very interesting.\n&gt;&gt; Suffice it to say that I can&#39;t guarantee that this will work\n&gt;&gt; identically to original NEAT on every problem, although it has done\n&gt;&gt; well thus far.\n&gt;\n&gt; This is very neat work (if you&#39;ll pardon the pun). Can you elaborate more\n&gt; on your speciation/fitness modification methods?\n\nI store the generation during which an innovation id was introduced, and at each epoch I count the number of networks each id occurs in. Then each network gets an average age score and an average &#39;rarity&#39; score.  Then I modify the fitness of the network based on these two numbers.  Right now I just essentially divide by the product, but there are many diffent options and there was some tuning involved in getting this right, and I still don&#39;t think I&#39;m done tuning.  Ultimately though you should be able to change how much you value new innovations (grow quickly), how much you value rarity (keep many different lines).  There are two reasons I did it this way.  First to make the code simpler by avoiding all the special cases with species with just one individual/stolen babies/etc.  Second, the idea was to be able to give really weird networks a longer leash.  With some sort of exponential mapping it would be easily possible to have a really diverse pool with some extremely long shots\nbeing explored, but still have the core search continue normally.  I am also still doing a regular speciation for the visualization.\n\n&gt;\n&gt;&gt; \tAlso, I have implemented a module to save and retrieve networks and\n&gt;&gt; evolutionary runs to and from a mySQL database, a module to visualize\n&gt;&gt; arbitrary parameters from the database, a 3d network visualizer, and a\n&gt;&gt; soccer domain with a monitor.  I ported the network evaluation code to\n&gt;&gt; Pyrex (C) to speed up the simulations some as well.  If Tom or anyone\n&gt;&gt; else is interested in any this the code it is relatively simple (the\n&gt;&gt; part that implements NEAT is ~500 lines), it will be here soon (once\n&gt;&gt; I&#39;m finished cleaning it):\n&gt;&gt;\n&gt;&gt; \thttp://www.freshraisins.com/neat\n&gt;&gt;\n&gt;&gt; \t(at the moment you can see a screenshot and some videos of evolved\n&gt;&gt; behaviour)\n&gt;\n&gt; This is a very nice network visualization, is the code python as well? And\n&gt; a bigger question, is it portable to linux? :)\n\nThanks, my original idea was to use the 3d dimension to plot some parameter on the nodes, but I never got to that.  It turns out its useful for really hairy networks and seeing recurrent connections.\nIts in python and I used VPython for all the 3d stuff.  All you&#39;d have to do is build Vpython for linux:\n\nhttp://vpython.org/linux_download.html\n\nI suggest you try it either way if you haven&#39;t as it is a great package for doing simple 3d stuff and is actually suprizingly scalable too.\n\n&gt;&gt; \tJoe (or anyone really) - I haven&#39;t had a chance to look at your code\n&gt;&gt; yet, but I am curious to know how you kept the GA and the network\n&gt;&gt; seperate and still had innovation numbers?  I found that this was the\n&gt;&gt; most difficult thing to deal with and essentially made any sort of\n&gt;&gt; strict meaningful OO seperation difficult to impossible.\n&gt;\n&gt; My most recent implementation uses a function like:\n&gt;\n&gt; network = genotype_to_phenotype( genome )\n&gt;\n&gt; I think Ken&#39;s implementation does this as well. MNEAT implemented networks\n&gt; as a class that took in a genome in the constructor. I&#39;m not sure if this\n&gt; meets the criterion of &quot;strict meaningful OO separation&quot; but it seems\n&gt; clean enough to me.\n\nYea, I don&#39;t really have a genotype, but I was trying to actually abstract completely the fact that the individuals were networks (so I could plug in different things later), but the interface between the individual and the GA was difficult because I couldn&#39;t just require that individuals implement mutate/crossover (as would be possible in a regular GA) because innovation numbers had to be kept track of across the entire population.  So it seems the difficulty in implementing an abstract NEAT framework into which one can plug in strucutres is that you can abstractly write the innovation-id code, you have to leave it to the structure. I&#39;ll take a look at your code later today, maybe I&#39;m missing something obvious.\n\n\n&gt;&gt; \tAlso, when I was first looking over Ken&#39;s code as a reference I\n&gt;&gt; massaged his comments into Natural Docs format, in case someone finds\n&gt;&gt; this useful it is here:\n&gt;&gt;\n&gt;&gt; \thttp://www.freshraisins.com/neatdoc\n&gt;\n&gt; This is very nice as well, though honestly I have very fond memories of\n&gt; printing out the original NEAT C source code and marking it up with a\n&gt; highlighter. :P You should petition Ken to get a link to this on his NEAT\n&gt; site.\n\nThats funny, I did the exact same thing. :)\n\n&gt;\n&gt; Joe\n&gt;\n\n"}}