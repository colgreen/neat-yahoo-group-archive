{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"He2LSn5URp2tCfNjNWhK40PcM-wjc_4UFmMi3o0dUgF1mHGaFGG1c9hXuWzueYhWpUnxat7y4cs25BSA6PZHNVChMn-baOgULg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Terminology - Genome/Phenome super system","postDate":"1133816310","msgId":2455,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzOTRBOUY2LjgwMDA1MDZAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMi4zLjQuMC4yMDA1MTIwNTExNTY1Ny4wMzNhZmMzOEBwb3AubWFpbC55YWhvby5jby51az4=","referencesHeader":"PDQzOTM2QUNCLjMwOTAxQGRzbC5waXBleC5jb20+IDw2LjIuMy40LjAuMjAwNTEyMDUxMTU2NTcuMDMzYWZjMzhAcG9wLm1haWwueWFob28uY28udWs+"},"prevInTopic":2453,"nextInTopic":2458,"prevInTime":2454,"nextInTime":2456,"topicId":2451,"numMessagesInTopic":11,"msgSnippet":"... These are fixed code/class interfaces I m talking about here. So as an example I might have interfaces defined as follows (partly taken from my existing","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 51026 invoked from network); 5 Dec 2005 20:59:22 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m30.grp.scd.yahoo.com with QMQP; 5 Dec 2005 20:59:22 -0000\r\nReceived: from unknown (HELO galaxy.systems.pipex.net) (62.241.162.31)\n  by mta4.grp.scd.yahoo.com with SMTP; 5 Dec 2005 20:59:22 -0000\r\nReceived: from [10.0.0.10] (81-86-161-87.dsl.pipex.com [81.86.161.87])\n\tby galaxy.systems.pipex.net (Postfix) with ESMTP id D2E21E0001EB\n\tfor &lt;neat@yahoogroups.com&gt;; Mon,  5 Dec 2005 20:58:28 +0000 (GMT)\r\nMessage-ID: &lt;4394A9F6.8000506@...&gt;\r\nDate: Mon, 05 Dec 2005 20:58:30 +0000\r\nUser-Agent: Mozilla Thunderbird 1.0.7 (Windows/20050923)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;43936ACB.30901@...&gt; &lt;6.2.3.4.0.20051205115657.033afc38@...&gt;\r\nIn-Reply-To: &lt;6.2.3.4.0.20051205115657.033afc38@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Terminology - Genome/Phenome super system\r\nX-Yahoo-Group-Post: member; u=127853030; y=3MTDOgWo_OMWfD2dena0ApIbh6Ttk_XmHAXQqFGJCSuQXF7Ph35S\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;Hi Colin,\n&gt;\n&gt;         Can you explain a little more what you mean by generic in \n&gt;this instance.  e.g. can you give examples of how implementations of \n&gt;those interfaces might vary, when different versions would be used, \n&gt;whether different versions would be expected to talk to one another...\n&gt;\n&gt;         Remember we use a variety of different languages and the \n&gt;exact meaning of some terms (e.g. &quot;interface&quot; may vary a little).\n&gt;\n&gt;  \n&gt;\nThese are fixed code/class interfaces I&#39;m talking about here. So as an \nexample I might have interfaces defined as follows (partly taken from my \nexisting code):\n\nIGenome\n{\n    // Some functions common to all genomes.\n    IGenome CreateOffspring_Asexual();\n    IGenome CreateOffspring_Sexual(IGenome parent);\n}\n\nINetwork or IPhenome\n{\n    void SetInputSignals(double[] signalArray);\n    void SingleActivation();\n}\n\nThe problem is that I currently have a NeatGenome class that implements \nIGenome, but in actual fact there are a few points in the code where I \nreally need to get access to data specific to a NeatGenome in order to \ndo things such as decoding it into a neural net. After all the whole \nproject is based around NEAT (at the moment). So basically my initial \nhalf hearted attempt at abstracting away what a genome is and what a \nphenome is just wasn&#39;t going to work, and in fact it can&#39;t be done at \nthat level because to decode a genome into a phenome you must know how \nthe genome is describing the phenome!\n\nE.g. Consider the case where I want a new genome [C# code] class that \ninstead of describing graphs of nodes (like the traditional NEAT genome) \nit describes a surface(say for the wing on an airoplane or someting) by \nway of a load of parameters into some fixed mathematical function, to \ndecode this (convert the parameters into a surface) I need to read the \ndata out of the genome and apply them to the function, I then get my \nphenome (the actual surface).\n\nSo I figure I&#39;m just going to move the abstraction up a level, so we end \nup with something like:\n\nISupernome\n{\n    IPhenome Decode(IGenome genome);\n    double Evaluate(IPhenome phenome);\n}\n\nok so in this example, within the decode function we still have to cast \nfrom IGenome to the specific genome class to do the decoding, I haven&#39;t \ngone into the implementation details yet. The point is that all of the \ngenome/phenome specific code (specifically decoding, but maybe other \nstuff as well) is encapsulated in one code class (a specific supernome) \nthat implements an interface common to all supernomes (ISupernome) which \ncan be plugged into the core SharpNEAT algorithm (which takes care of \nspeciation, selecting individuals for mating, etc).\n\n\nThe hope would be that I could then define a genome class for standard \nNEAT, one for for tree based GP, one for graph based GP, one for \nmodular-NEAT, etc. So the core algorithm is just a general purpose \nevolutionary search code library, which makes me think I should check \nsome existing evolutionary computing code libraries to see how they are \narranged.\n\nColin.\n\n\n\n\n"}}