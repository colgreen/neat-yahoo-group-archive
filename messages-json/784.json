{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":161472815,"authorName":"Kennon Lynn Ballou","from":"Kennon Lynn Ballou &lt;msc92klb@...&gt;","profile":"kennon42","replyTo":"LIST","senderId":"mhUYoL6cA6vpky-UrDG9KCeH5Gf7bFBq9i_bO8smmP_CFP-fc-v_91x-m5hE4c5HZQb6jIqNlaGoCi_ts15vtk1s8dZiGvDVbBJv2Y3W61vW5Q","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: multi-agent net inputs","postDate":"1084577808","msgId":784,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuNDQuMDQwNTE1MDAyNDU2MC4xOTYyMS0xMDAwMDBAdGlua3ktd2lua3kuY3MuYmhhbS5hYy51az4=","inReplyToHeader":"PGE5OTgwMWM0M2EwOSQ4NTZmNTg0MCQ3MGNiMDEwYUBtYWlsMndvcmxkLmNvbT4="},"prevInTopic":783,"nextInTopic":785,"prevInTime":783,"nextInTime":785,"topicId":780,"numMessagesInTopic":11,"msgSnippet":"well, the conceptually simple yet relatively computationally intense method would simply be for the system to take the bearing from the current agent to each","rawEmail":"Return-Path: &lt;msc92klb@...&gt;\r\nX-Sender: msc92klb@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 19898 invoked from network); 14 May 2004 23:36:53 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m24.grp.scd.yahoo.com with QMQP; 14 May 2004 23:36:53 -0000\r\nReceived: from unknown (HELO sun13.bham.ac.uk) (147.188.128.145)\n  by mta6.grp.scd.yahoo.com with SMTP; 14 May 2004 23:36:53 -0000\r\nReceived: from [147.188.128.127] (helo=bham.ac.uk)\n\tby sun13.bham.ac.uk with esmtp (Exim 4.10)\n\tid 1BOmEW-0003a5-00\n\tfor neat@yahoogroups.com; Sat, 15 May 2004 00:36:52 +0100\r\nReceived: from emily.cs.bham.ac.uk ([147.188.192.10])\n\tby bham.ac.uk with esmtp (Exim 4.24)\n\tid 1BOmEW-0004Qy-Of\n\tfor neat@yahoogroups.com; Sat, 15 May 2004 00:36:52 +0100\r\nReceived: from tinky-winky.cs.bham.ac.uk\n\tby emily.cs.bham.ac.uk (Exim 3.11 #1) with esmtp id 1BOmEO-00062w-00 \n\tfor neat@yahoogroups.com; Sat, 15 May 2004 00:36:44 +0100\r\nReceived:  from localhost by tinky-winky.cs.bham.ac.uk (8.12.8/submit/1.0)\n\twith ESMTP id i4ENanCO019654; Sat, 15 May 2004 00:36:49 +0100\r\nDate: Sat, 15 May 2004 00:36:48 +0100 (BST)\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;a99801c43a09$856f5840$70cb010a@...&gt;\r\nMessage-ID: &lt;Pine.LNX.4.44.0405150024560.19621-100000@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-Remote-IP: 147.188.128.145\r\nFrom: Kennon Lynn Ballou &lt;msc92klb@...&gt;\r\nSubject: Re: [neat] Re: multi-agent net inputs\r\nX-Yahoo-Group-Post: member; u=161472815\r\nX-Yahoo-Profile: kennon42\r\n\r\nwell, the conceptually simple yet relatively computationally intense \nmethod would simply be for the system to take the bearing from the current \nagent to each other agent, and then split them up into the different arcs.\n\na simple equation for the bearing is (in c) atan2( (x1-x2), (y1-y2) ). i \nthink there is a less computationally intense method (since apparently \natan2 is relatively expensive) but this way is much easier to code :)\n\nyou could just make an array of ints where each int is the count of agents \nin that part of the arc; run through all other agents, find the bearings, \nthen find which part of the arc they are in.\n\nit would be something like (again, in c++):\n\nint numArcs = 8;\nvector&lt;int&gt; arcCounts(8,0);\n\nfor(int i = 0; i &lt; numAgents; i++ ) {\n  if( i == curAgent ) continue;\n\n  float bearing = atan2( (agents[curAgent].x - agents[i].x), \n(agents[curAgent].y - agents[i].y) );\n\n  arcCounts[ (int) floor( (bearing / (2*M_PI)) * numArcs) ]++;\n}\n\nyou might have to do some fudging to account for the finite simplification \nof PI, but that should work.\n\nthat seems to be a pretty simple way to do that - although this is \nimplicitly giving the system itself god-like powers of knowing where \neverything is ... for a more realistic system i suppose it would make more \nsense to try to actually &quot;see&quot; things or something ...\n\n-KB-\n\nOn Fri, 14 May 2004, Chad Bohannan wrote:\n\n&gt; ken posted while I was typing, now I feel silly...\n&gt; I should have asked the same question earlier. How do you detect if\n&gt; something is inside the radar arc? I think ODE lets me draw a ray in\n&gt; space, and I can see if and where that ray intersects with something. Is\n&gt; that how to do it?\n&gt; This sounds exactly like a vision system, and it sounds easier than I\n&gt; thought to write.\n&gt; Chad\n&gt; \n&gt; &lt;-----Original Message-----&gt; \n&gt; From: Kenneth Stanley\n&gt; Sent: 5/14/2004 5:08:54 PM\n&gt; To: neat@yahoogroups.com\n&gt; Subject: Re: [neat] Re: multi-agent net inputs\n&gt; \n&gt; Hey Kennon, to answer your first question, dividing the senses into \n&gt; radar arc is the best solution. An arc can be activated in \n&gt; proportion to how close or how many other agents are in that arc. I \n&gt; have used this kind of sensor alot. It&#39;s nice since it&#39;s egocentric.\n&gt; \n&gt; As for a &quot;drop-in&quot; NEAT, you can check all the versions of NEAT that \n&gt; are out now, but I don&#39;t know that any are so simple you can just \n&gt; drop them into any code without some coding yourself to hook things \n&gt; up. It shouldn&#39;t be too complicated, even with my code (since you \n&gt; don&#39;t actually have to edit the NEAT code itself). The one real \n&gt; problem with my code is getting it to compile on different \n&gt; platforms. But there is a windows version of my code now in the \n&gt; files section which may be easier, and a lot of people here have \n&gt; compiled it on different platforms, so they may be able to help.\n&gt; My homepage has a list of NEATs that are now available.\n&gt; \n&gt; ken\n&gt; \n&gt; --- In neat@yahoogroups.com, Kennon Lynn Ballou \n&gt; wrote:\n&gt; &gt; hi, i&#39;m making a multi-agent sim thingy where i&#39;m hoping to evolve \n&gt; agents \n&gt; &gt; that can play tag -- although i seem to remember seeing a paper \n&gt; about this \n&gt; &gt; somewhere, but i&#39;m enjoying doing it on my own.\n&gt; &gt; \n&gt; &gt; the basic idea is to have a finite size area, agents with \n&gt; &gt; position/velocity, and at any one time, an &quot;it&quot; - which can change \n&gt; if the \n&gt; &gt; current It touches another. I figure that this would be an \n&gt; interesting \n&gt; &gt; thing to learn, since when an agent is not It they will be trying \n&gt; to run \n&gt; &gt; away from It, and when they are It they will try to run towards \n&gt; another \n&gt; &gt; agent. i want to use competitive co-evolution and NN controllers \n&gt; &gt; (eventually using neat, although i&#39;m using a simple \n&gt; crossover+mutation GA \n&gt; &gt; with binary tournament selection right now). fitness is the \n&gt; average \n&gt; &gt; distance from the target over a certain number of time steps.\n&gt; &gt; \n&gt; &gt; my first task was just for agents to follow around a moving \n&gt; target, where \n&gt; &gt; their input is a bearing to the target and their outputs is a \n&gt; change to \n&gt; &gt; their current x and y velocities - this is basically evolving sin \n&gt; and \n&gt; &gt; cosine in the network. with a population size of 10, with 5 new \n&gt; offspring \n&gt; &gt; each turn, it readily solves this problem within a couple hundred \n&gt; &gt; generations. even though ive done all sorts of evolutionary \n&gt; algorithms, \n&gt; &gt; its still DAMN cool to see the little dots start out moving \n&gt; randomly and \n&gt; &gt; then over time start swarming around the target ... hehe this \n&gt; stuff is so \n&gt; &gt; cool. anyway, i then changed their output to be their new heading \n&gt; and \n&gt; &gt; velocity, and they also learn how to follow the target fairly \n&gt; easily, \n&gt; &gt; although now that i think about it since one of the inputs is the \n&gt; bearing \n&gt; &gt; they pretty much just need to learn to turn to the bearing.\n&gt; &gt; \n&gt; &gt; anyway, my question is this: what do you use as inputs for \n&gt; something \n&gt; &gt; like the tag \n&gt; &gt; problem? i mean \n&gt; &gt; i guess \n&gt; &gt; technically i could have an input which gives the bearing for each \n&gt; other \n&gt; &gt; agent and then a binary input whether or not they are It. i don&#39;t \n&gt; really \n&gt; &gt; like this, though, because you have to change the number of inputs \n&gt; based \n&gt; &gt; on the current number of agents in the simulation. other ideas ive \n&gt; had \n&gt; &gt; were to divide the circle around the agent into a discrete number \n&gt; of arcs \n&gt; &gt; and then flag the inputs that have something in their field of \n&gt; vision ... \n&gt; &gt; has anyone tried anything with that kind of thing?\n&gt; &gt; \n&gt; &gt; --\n&gt; &gt; \n&gt; &gt; a separate question, what is the best solution for a light-weight, \n&gt; drop-in \n&gt; &gt; with as little change as possible c++ implementation of neat? hehe \n&gt; no \n&gt; &gt; offense, \n&gt; &gt; Ken, but i saw your code a few years ago - hope you cleaned it up \n&gt; since \n&gt; &gt; then :) if there isn&#39;t an existing implementation that has a very \n&gt; clean \n&gt; &gt; interface, are there any plans to develop one?\n&gt; &gt; \n&gt; &gt; anyway, i really should be studying for my exams, but i&#39;ve \n&gt; convinced \n&gt; &gt; myself that this really is revision -- which, actually, it is, \n&gt; since \n&gt; &gt; monday&#39;s exam is neural computation and tuesday&#39;s is nature \n&gt; inspired \n&gt; &gt; design, so i&#39;m actually using concepts from both of those classes \n&gt; in this \n&gt; &gt; little system.\n&gt; &gt; \n&gt; &gt; cheers,\n&gt; &gt; -KB-\n&gt; &gt; \n&gt; &gt; -- \n&gt; &gt; --------------------------------------------------------\n&gt; &gt; k e n n o n b a l l o u\n&gt; &gt; msc natural computation : the university of birmingham \n&gt; &gt; http://studentweb.cs.bham.ac.uk/~msc92klb/ \n&gt; &gt; --------------------------------------------------------\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; . \n&gt; \n\n-- \n--------------------------------------------------------\n k e n n o n  b a l l o u\n msc natural computation : the university of birmingham \n http://studentweb.cs.bham.ac.uk/~msc92klb/             \n--------------------------------------------------------\n\n\n"}}