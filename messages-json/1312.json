{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"3liApKP69yT0SixtUeXUQYQeU84bv2NsNES5qQL6VAiy5CmYumxcth6ZD7ao0OxpEKnVwdYaWbHWCG6hI64vS4CsCecqVq8UzQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: 3D cross product domain","postDate":"1091576947","msgId":1312,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxMTAyNDczLjEwMDAxMDFAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PGNlbWJzNitoNXU0QGVHcm91cHMuY29tPg==","referencesHeader":"PGNlbWJzNitoNXU0QGVHcm91cHMuY29tPg=="},"prevInTopic":1302,"nextInTopic":1324,"prevInTime":1311,"nextInTime":1313,"topicId":1298,"numMessagesInTopic":17,"msgSnippet":"... Yeh you need a spread of test cases that represent the range of input values you want the resulting network to accept, and you need to to test against all","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 55644 invoked from network); 3 Aug 2004 23:49:05 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m23.grp.scd.yahoo.com with QMQP; 3 Aug 2004 23:49:05 -0000\r\nReceived: from unknown (HELO colossus.systems.pipex.net) (62.241.160.73)\n  by mta6.grp.scd.yahoo.com with SMTP; 3 Aug 2004 23:49:05 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby colossus.systems.pipex.net (Postfix) with ESMTP id 54F211C000BB\n\tfor &lt;neat@yahoogroups.com&gt;; Wed,  4 Aug 2004 00:49:04 +0100 (BST)\r\nMessage-ID: &lt;41102473.1000101@...&gt;\r\nDate: Wed, 04 Aug 2004 00:49:07 +0100\r\nUser-Agent: Mozilla Thunderbird 0.7.1 (Windows/20040626)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;cembs6+h5u4@...&gt;\r\nIn-Reply-To: &lt;cembs6+h5u4@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.73\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: 3D cross product domain\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\n&gt;\n&gt;\n&gt;--- In neat@yahoogroups.com, &quot;Chad Bohannan&quot; &lt;chad@b...&gt; wrote:\n&gt;  \n&gt;\n&gt;&gt; &lt;&gt;so in general, it&#39;s better to measure fitness in such a way that \n&gt;&gt; the fitness graph for the entire run is a single logarithmic curve, not\n&gt;&gt;\n&gt;&gt;repeated curves, with the hope that the curves will get smaller \n&gt;&gt;\n\nKenneth Stanley wrote:\n\n&gt;That is generally the way classification training works.  I don&#39;t \n&gt;know any exceptions.  The problem is if you only train for one \n&gt;example at a time, the system doesn&#39;t need to remember what it \n&gt;previously learned in order to get the next example right.\n&gt;\n&gt;  \n&gt;\nYeh you need a spread of test cases that represent the range of input \nvalues you want the resulting network to accept, and you need to to test \nagainst all of these test cases per fitness evaluation. If there are \ntricky parameter spaces you might want to increase the number of test \ncases in certain areas, e.g. with the cross product you might want to \ninclude the special case of parallel vectors which return the zero \nvector, and to include other nearby test cases for almost parallel \nvectors. Elsewhere you might get away with a thin spread of test cases.\n\nAs for the fitness curve, the only exception I know of is when using \nincremental evolution. I have used this for a prey capture domain where \nthe speed of the prey is incrementally increased as the agent gets \nbetter at capturing it. The fitness drops immediately following the \nprey&#39;s speed increase, but because the new task is very closely related \nto the previous task the evolved networks don&#39;t loose (forget) any \nfunctionality so far learned. Put another way, the more difficult tasks \nare &#39;super&#39; tasks of the easier &#39;sub&#39; tasks.\n\nChad, I&#39;d be interested in having a quick attempt at finding a network \nthat performs the x product. Do you have some code handy that I could \nuse? if not, not to worry, it&#39;s just it will save me having to revise my \nvector maths - let&#39;s just say it&#39;s a tad rusty :)\n\nColin\n\n\n\n\n\n\n"}}