{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"_2Zdu_F_4kluy-q2_UdlDKhp7rgx2LGgv16S2zOWMZAKBxlpWqkyAeZWsHbF84TVKK0rtFiWWHvhbSi4MQeBpn553wGHJY9DNA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Benchmarks?","postDate":"1121290339","msgId":2074,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyRDU4ODYzLjEwMzAwMDNAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMi4wLjE0LjAuMjAwNTA3MTMxMjI1NTIuMDMyY2M4MThAcG9wLm1haWwueWFob28uY28udWs+","referencesHeader":"PDQyQ0M1MDE5LjMwNDA4MDlAZHNsLnBpcGV4LmNvbT4gPFBpbmUuTE5YLjQuNjMuMDUwNzA3MTIyMzIxMC4yODk4OUBvcmFuZ2UtcGVrb2UuY3MudXRleGFzLmVkdT4gPDQyRDA4OTgwLjkwNjAwMDdAZHNsLnBpcGV4LmNvbT4gPDYuMi4wLjE0LjAuMjAwNTA3MTExNzI0MTcuMDMyMGRkMDBAcG9wLm1haWwueWFob28uY28udWs+IDw0MkQyRUQ2NC41MDAwMzA0QGRzbC5waXBleC5jb20+IDw2LjIuMC4xNC4wLjIwMDUwNzEyMTE1NTE4LjAzMjk1OTA4QHBvcC5tYWlsLnlhaG9vLmNvLnVrPiA8NDJENDJFRjguMzAxMDIwNUBkc2wucGlwZXguY29tPiA8Ni4yLjAuMTQuMC4yMDA1MDcxMzEyMjU1Mi4wMzJjYzgxOEBwb3AubWFpbC55YWhvby5jby51az4="},"prevInTopic":2069,"nextInTopic":2076,"prevInTime":2073,"nextInTime":2075,"topicId":2028,"numMessagesInTopic":33,"msgSnippet":"... I m having trouble decoding your english, I think your brain is working faster than you can type :) I get the essence of what you re suggesting, I suppose","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 21361 invoked from network); 13 Jul 2005 21:32:29 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m25.grp.scd.yahoo.com with QMQP; 13 Jul 2005 21:32:29 -0000\r\nReceived: from unknown (HELO blaster.systems.pipex.net) (62.241.163.7)\n  by mta2.grp.scd.yahoo.com with SMTP; 13 Jul 2005 21:32:29 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby blaster.systems.pipex.net (Postfix) with ESMTP id 328EFE00004F\n\tfor &lt;neat@yahoogroups.com&gt;; Wed, 13 Jul 2005 22:31:57 +0100 (BST)\r\nMessage-ID: &lt;42D58863.1030003@...&gt;\r\nDate: Wed, 13 Jul 2005 22:32:19 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;42CC5019.3040809@...&gt; &lt;Pine.LNX.4.63.0507071223210.28989@...&gt; &lt;42D08980.9060007@...&gt; &lt;6.2.0.14.0.20050711172417.0320dd00@...&gt; &lt;42D2ED64.5000304@...&gt; &lt;6.2.0.14.0.20050712115518.03295908@...&gt; &lt;42D42EF8.3010205@...&gt; &lt;6.2.0.14.0.20050713122552.032cc818@...&gt;\r\nIn-Reply-To: &lt;6.2.0.14.0.20050713122552.032cc818@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Benchmarks?\r\nX-Yahoo-Group-Post: member; u=127853030; y=Y5nWMAx3a1q3oUXHNrMhrTb6bWonYJqEfaaOYgiZjyLeRV1oU7TP\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;At 21:58 12/07/2005, you wrote:\n&gt;\n&gt;\n&gt;  \n&gt;\n&gt;&gt;I&#39;m not sure I understand this point. Are you hinting at some higher\n&gt;&gt;level representation of the game where rotation is factored out.\n&gt;&gt;\n&gt;&gt;[...]\n&gt;&gt;\n&gt;\n&gt;Sort of.  All I really mean is that all rotations and transforms of a board \n&gt;are actually identical and have the same correct move.  So there is no need \n&gt;for your net to learn them each separately.  I&#39;ve need doing to analysis of \n&gt;TTT and to avoid processing identical boards twice I&#39;ve simply:\n&gt;\n&gt;1) define each board as a base-3 code number (top-left is first digit, \n&gt;top-middle is second..., empty = 0, cross = 1, naught = 2)\n&gt;2) when a board appears calculate than number for each of its 8 transforms\n&gt;3) then file and process the board only under the _lowest_ of those codes\n&gt;  \n&gt;\nI&#39;m having trouble decoding your english, I think your brain is working \nfaster than you can type :) I get the essence of what you&#39;re suggesting, \nI suppose it&#39;s a little like the ego-centric agent idea where you \neffectively reduce the number of input signal combinations by ensuring \nthat the agent is always oriented in a certain way with respect to some \nobject of interest. Here you are collapsing the complete set of possible \nboard states into a more compact set that still represents the same \nnumber of strategic states. Actually if this concept could be applied to \nthe &#39;Go&#39; board state then we might have the basis of a real advance in \nAI Go playing - something of a holy grail.\n\n\n&gt;So the simplest way I would remove mirroring and rotation from a network&#39;s \n&gt;consideration would be just to do the same thing.  Always transform the \n&gt;board to its lowest coded variant before showing it to the network.  \n&gt;\nThis idea sounds vaguely like a technique used in designing logic \ncircuits or something. I almost get it but I think I need to absorb some \nconcrete examples.\n\n&gt;Of \n&gt;course, this is assuming your networks are state-driven off only the \n&gt;current board and don&#39;t remember their previous moves...\n&gt;  \n&gt;\nI always reset state for my TTT experiments. In other types of game \nthere is real benefit to be had by monitoring your opponent&#39;s (and your \nown) strategy, in fact in some games it is absolutely essential to do so \n(e.g. Poker). But for TTT? nah. The perfect strategy can be represented \nby a lookup table!\n\n\n&gt;&gt;&gt;I&#39;d like to work in C++, what NEAT version would be best.  Just scanning\n&gt;&gt;&gt;the list there&#39;s Ken&#39;s and Mat&#39;s.  I&#39;m generally on Windows, OTOH I don&#39;t\n&gt;&gt;&gt;especially care about graphics for this, so....\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;      \n&gt;&gt;&gt;\n&gt;&gt;Hey look, I just spent a day of my life chasing correct combinations of\n&gt;&gt;unix packages to build mono, which just re-affirms my faith in Java and\n&gt;&gt;.Net - you can actually get on and do what you want to do, instead of\n&gt;&gt;scanning google for references to some obscure error from a makefile or\n&gt;&gt;config script! [takes deep breath... and relax]  ;)\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Not sure I follow you here.  But C++ is my language and if I were to switch \n&gt;to another I would probably want something really different like python or \n&gt;lisp....\n&gt;  \n&gt;\nSorry I was just ranting.  I  was trying to make the point that using \none of the higher-level programming frameworks generally equates to an \neasier life. I once spent a whole week searching for a bug that turned \nout to be caused by a bug in the implementation of the STL I was using \nin combination with later, more strict versions of GCC. Experiences like \nthat lead me to the world of Java and .Net.\n\n\n&gt;[...]\n&gt;\n&gt;Another angle is that my (brief) studies show only 746 unique boards that \n&gt;can come up in TTT.  135 of them are winning positions and 3 are stalemates \n&gt;(that seems low, I&#39;ll check it later) so that leaves only 608 that the \n&gt;network needs to generate a move for.  And there is one or more correct \n&gt;answer(s) for each (at least if we include &quot;resign&quot; for those where we know \n&gt;we already lost).  So how about ordering those 608 in reverse order of how \n&gt;&quot;simple&quot; they are to answer and then just testing the network against each \n&gt;of those in order, the score being the number of boards the network gets \n&gt;through before giving a wrong answer.\n&gt;\n&gt;I know this may not seem in the spirit of what you&#39;re after.  e.g. just \n&gt;chasing the perfect game and ignoring any question of alternative \n&gt;strategies along the way, but the fact that it would be possible to chase \n&gt;the perfect game in this way might suggest that there may be no alternative \n&gt;strategies to find.  e.g. that the game is too simple...\n&gt;  \n&gt;\nI /think/ the approach you describe is one step away from using \nbackpropogation to learn all of the correct responses! If a NEAT search \nhas found it&#39;s own strong strategies for playing then that is really \ncool because an algorithm has learned something all by itself. Perhaps \nwe can then apply our approach to other games for which no known strong \nalgorithmic strategies exist, e.g. Go. Unlikely right now, but these are \nthe sort of things that motivate me. If we place knowledge of a good \nstrategy into the system and then NEAT finds this then what have we \nreally achieved? Sorry if I&#39;m emitting anti-motivational vibes today ;)\n\nCheers,\n\nColin\n\n&gt;\n&gt;In fifteen minutes, everybody will be in the future.\n&gt;  \n&gt;\nI bet I can get there before you... 2mins :)\n\n\n"}}