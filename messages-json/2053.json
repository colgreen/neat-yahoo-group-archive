{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"R40L6-AWdUw-bjveOWxoJZwd9FvKS6QSX7RXWKHaOwTmbV7BFhLXcG1AlG3agZmymmVOhrMiWmkNeg1W6FE9phKhJcKwgkuCKA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Benchmarks?","postDate":"1120962944","msgId":2053,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyRDA4OTgwLjkwNjAwMDdAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PFBpbmUuTE5YLjQuNjMuMDUwNzA3MTIyMzIxMC4yODk4OUBvcmFuZ2UtcGVrb2UuY3MudXRleGFzLmVkdT4=","referencesHeader":"PDQyQ0M1MDE5LjMwNDA4MDlAZHNsLnBpcGV4LmNvbT4gPFBpbmUuTE5YLjQuNjMuMDUwNzA3MTIyMzIxMC4yODk4OUBvcmFuZ2UtcGVrb2UuY3MudXRleGFzLmVkdT4="},"prevInTopic":2052,"nextInTopic":2054,"prevInTime":2052,"nextInTime":2054,"topicId":2028,"numMessagesInTopic":33,"msgSnippet":"... I suspect the same problem is still present in game playing since you can only evaluate a small proportion of the possible paths in the game - usually","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 57025 invoked from network); 10 Jul 2005 02:35:35 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m3.grp.scd.yahoo.com with QMQP; 10 Jul 2005 02:35:35 -0000\r\nReceived: from unknown (HELO galaxy.systems.pipex.net) (62.241.162.31)\n  by mta1.grp.scd.yahoo.com with SMTP; 10 Jul 2005 02:35:35 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby galaxy.systems.pipex.net (Postfix) with ESMTP id B6941E00008D\n\tfor &lt;neat@yahoogroups.com&gt;; Sun, 10 Jul 2005 03:35:23 +0100 (BST)\r\nMessage-ID: &lt;42D08980.9060007@...&gt;\r\nDate: Sun, 10 Jul 2005 03:35:44 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;42CC5019.3040809@...&gt; &lt;Pine.LNX.4.63.0507071223210.28989@...&gt;\r\nIn-Reply-To: &lt;Pine.LNX.4.63.0507071223210.28989@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Benchmarks?\r\nX-Yahoo-Group-Post: member; u=127853030; y=Eu3JMQ68jVOp5sXOFvR0p8k3RoVHNFj8vutm2i-jt9qvfdDkqrL3\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nJoseph Reisinger wrote:\n\n&gt;&gt;I do foresee one problem though which became apparent in my multiplexer\n&gt;&gt;experiments. If we tesselate multiple functions together (and they need\n&gt;&gt;not be repetitions of the same function) then we now have a far larger\n&gt;&gt;combination of input values to test against, e.g. in binary input\n&gt;&gt;problems such as XOR the number of test cases doubles with each extra\n&gt;&gt;input we add. This of course corresponds to more time per network\n&gt;&gt;evaluation and so the idea doesn&#39;t scale quite as well as might be\n&gt;&gt;apparent at first.\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Yes, this becomes very time-consuming, and is precisely the reason why I \n&gt;switched over to learning a controller for a board game instead. The game \n&gt;domain allowed even larger input/output spaces (i.e. the kind of problem \n&gt;MNEAT could excel at), but performance could be evaluated after letting \n&gt;the network play a few games.\n&gt;  \n&gt;\nI suspect the same problem is still present in game playing since you \ncan only evaluate a small proportion of the possible paths in the game - \nusually determined by the opponents you are playing against. In fact \nwith co-evolution the networks will normally (I think) end up playing \nwithin a very narrow range of game strategies - which means they perform \npoorly when played against humans or even simple algorithmic strategies \nthey have never encountered before. Although I&#39;m happy to be proved \nwrong on this, that partly my experience so in some limited Tic-Tac-Toe \nco-evolution experiments I&#39;ve been working on (more on those another time).\n\n&gt;&gt;So what we now have is a framework for defining benchmarking problems in\n&gt;&gt;terms of functional &#39;circuits&#39; and repetition of those circuits. But now\n&gt;&gt;I&#39;m thinking that the repetition element is unnecessary, we can just\n&gt;&gt;hand craft a set of funtional circuits that define a whole range of\n&gt;&gt;complexity.\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Yeah I didn&#39;t mean to suggest using repetition as a panacea for generating \n&gt;benchmarks;\n&gt;\nSure. I was just showing my thought processes...\n\n&gt; rather, tesselated functions is one area where we can find \n&gt;conceptually simple benchmark problems that are surprisingly difficult for \n&gt;NEAT. Hence I think they are important because they point out areas in \n&gt;which NEAT can be improved.\n&gt;  \n&gt;\nI agree. I&#39;m just making the point that the number of test cases and \ntherefore the time per evaulation increases exponentially with repect to \nthe number of inputs. More on this futher down...\n\n&gt;Anyway, analogous to your circuit idea is using NNs to fit arbitrarily \n&gt;complex curves. These can range from easy (composing gaussians) to \n&gt;insanely difficult (functions with NK-level ruggedness or other \n&gt;nonlinearities). Mattias I think has done some work in this area.\n&gt;  \n&gt;\nYes I can see that if say a circuit contains some feedback, that this \ncan be represented as a &#39;flat&#39; function by repeating sub-expressions. \nJust to be clear thoughthat I think it&#39;s important that we combine logic \nfunctions (basically an  &#39;if&#39; function) with continuous functions - \nwhich is what I usually think of when curve fitting is mentioned. Also \nnote that I&#39;m suggesting mapping the input signals to a seperate \nfunction per output node, some of the output values may be related, but \nsome may be completely independent.\n\n&gt;It might help to set up some goals for doing NEAT benchmarking. Is it just \n&gt;for the sake of comparability?\n&gt;  \n&gt;\nNEAT Benchmarking can/could be useful for:\n\n1) Comparing various NEAT implementations&#39; relative strengths / weaknesses.\n2) Tracking the effects of any given change to a NEAT based algorithm. \nPositive / negative, better or worse for certain types of problem, etc.\n3) High level testing following code changes & bug fixes. Is the NEAT \nalgorithm broken and/or weakened.\n4) Comparison with none-NEAT techniques and the evolutionary computing \nfield as a whole. Are we ahead or behind other techniques.\n\n\nLet me just get back to the issue of repetition/tesselation and the \ngrowth in test cases that this causes. Philip asks:\n\nPhilip Tucker wrote:\n\n&gt;\n&gt;Why not just have a complete set of test cases, and use a random\n&gt;subset of those for each evaluation?  Evolution will be noisier, but\n&gt;should still converge with fewer evaluations.\n&gt;\nUsing this technique you still have to test some significant proportion \nof the complete set of test cases per evaluation, and therefore I see it \nas extending the number of test cases we can handle a little, but not as \na way of solving the overall problem of increasingly large test case \nsets. Partly this depends on the domain, so if you are trying to \napproximate a nice smooth curve then you can get away with a small \nrandom sampling and hopefully generalisation will fill in the gaps. If \nhowever you were approximating a highly chaotic function who&#39;s value \nfluctuates wildly from one input set to the next, then you really need \nto evaluate a large proportion of the test cases if not all of them. \nOtherwise you are requiring NEAT to not only find an approximation to \nthis complex function with all of its inherent misleading local optima - \nbut in addition to this you are introducing extra misleading local \noptima&#39;s by not evaluating all of the test cases. In order to avoid \nfalling into these traps in the fitness landscape you need to increase \nthe population size and maintain more species, which in turns slows down \nprogress on a search. So in a sense the approach of random sampling can \nbe a false economy for certain types of problem.\n\nIn addition I think we should try to construct benchmark tasks that can \nboth be executed to completion relatively quickly, and that give \nreasonably consistent results. Obviously the nature of evolutionary \nbased searches means we will always have to run a benchmark test several \ntimes and take an average of performance, but by introducing an extra \nrandom factor in the form a non-deterministic fitness function we now \nhave to run benchmark tests even more times to get a reasonable \nassesment of performance.\n\nOne last point. Actually growth in the number of test cases can come \nabout without extra input data sets, e.g. Consider control problems \nwhere the network&#39;s internal state is not reset between each timestep. \nThe network&#39;s internal state now combines with the input signals to give \neven more scenarios to be tested. The controller I evolved for PTSP \nrecently reset it&#39;s state per timestep, but by doing this we may \nsometimes be throwing away useful information thus limiting the best \nsolution that can be found.\n\nColin\n\n\n\n\n\n\n\n"}}