{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"x_IJtrfpLaQ-AZLic5iJJ_FuFjsfawu3-tLXUePA9G8z80U0Z2Lvts1kgcH8d38m3IpdzKOu2WovZiej-zH9Tt6X3ny8ssnTsWxkUdkp-7uI","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: NEAT implementation details","postDate":"1077086473","msgId":391,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGMwdjFlOStrMWMzQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGMwcmtxMitpZWUxQGVHcm91cHMuY29tPg=="},"prevInTopic":386,"nextInTopic":393,"prevInTime":390,"nextInTime":392,"topicId":386,"numMessagesInTopic":10,"msgSnippet":"Hi Colin, absolutely feel free to ask questions.  I think a C# implementation of NEAT would be great, and also I agree doing you own implementation will be","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 5246 invoked from network); 18 Feb 2004 06:41:17 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m10.grp.scd.yahoo.com with QMQP; 18 Feb 2004 06:41:17 -0000\r\nReceived: from unknown (HELO n21.grp.scd.yahoo.com) (66.218.66.77)\n  by mta4.grp.scd.yahoo.com with SMTP; 18 Feb 2004 06:41:16 -0000\r\nReceived: from [66.218.67.185] by n21.grp.scd.yahoo.com with NNFMP; 18 Feb 2004 06:41:14 -0000\r\nDate: Wed, 18 Feb 2004 06:41:13 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;c0v1e9+k1c3@...&gt;\r\nIn-Reply-To: &lt;c0rkq2+iee1@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 4363\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-eGroups-Remote-IP: 66.218.66.77\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: NEAT implementation details\r\nX-Yahoo-Group-Post: member; u=54567749\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nHi Colin, absolutely feel free to ask questions.  I think a C#\nimplementation of NEAT would be great, and also I agree doing you own\nimplementation will be educational. \n\nI would also encourage others on this group with their own experiences\nimplementing their own versions of NEAT to offer advice as well- it is\nlikely a lot of you can relate to questions from people who are just\nstarting out trying to do the same thing and so your insights are\nlikely quite helpful.\n\n--- In neat@yahoogroups.com, &quot;Colin Green&quot; &lt;cgreen@d...&gt; wrote:\n&gt; Hi Ken,\n&gt; \n&gt; If it&#39;s not to much trouble I&#39;d like to ask you a few basic \n&gt; questions about specific implementation details in NEAT. Just to \n&gt; explain where I&#39;m coming from. I sat down last night with the \n&gt; intention of porting one of the available NEAT projects (yours, \n&gt; JNEAT, etc) to C#. However, for now I have decided to attempt my\nown \n&gt; implementation rather than a direct port, for my own education as \n&gt; much as anything. I also have a quantity of existing code that can \n&gt; be restructured to implement NEAT so hopefully it shouldn&#39;t\nactually \n&gt; require much effort.\n&gt; \n&gt; Anyway, I was looking through your code and couldn&#39;t quite\ndetermine \n&gt; how you treat node genes and specifically input node genes during \n&gt; evolution.\n&gt; \n\nBefore I answer your questions, the general rule should be that all\ninput nodes and all output nodes are always copied from parent(s) to\nchild.  However, only hidden nodes that are connected to an inherited\nlink should be copied to children.  \n\n&gt; Some questions then:\n&gt; \n&gt; 1) I see from your recent email that you (optionally) allow input \n&gt; nodes to be removed. Do you also allow input nodes to be added?\n&gt; \n\nIn general, the previous posting was not meant to imply that input\nnodes are allowed to be removed.  They really should never be removed\nor added.  There should always be a constant set of possible inputs. \nHowever, it is possible to start out with some *disconnected* input\nnodes, which later get &quot;added&quot; in the sense that a new connection\nappears that links them into the network.\n\n&gt; 2) Can I assume that you do not allow connections back *to* input \n&gt; nodes? and that therefore the connections you generate during \n&gt; evolution ignore input nodes as possible targets?\n&gt; \n\nYes right, never connect into an input node.\n\n&gt; 3) How do you &#39;inject&#39; input signals into a network? Do you simply \n&gt; obtain a list of all the input nodes (in the order they exist\nwithin \n&gt; the genome) and directly set their output value? \n&gt; \n\nYes right, input nodes are not like other neurons, i.e. they do not\napply a sigmoid to their values.  Rather, the value given to them is\ndirectly copied to their outputs.\n\n&gt; 4) Not really a question, just an observation. In your original\nNEAT \n&gt; paper you do not mention whether both node and connection genes \n&gt; feature in the compatibilty function. A brief look at your code \n&gt; seems to indicate that only connection genes are considered. I\nguess \n&gt; this makes sense so long as mutation never changes a connection&#39;s \n&gt; end points - the connections therefore describe the network, the \n&gt; node genes are just placeholders. In fact I see you combined the \n&gt; function of node gene and working neuron, thus increasing \n&gt; efficiency - as there is no need to rebuild nn&#39;s at each evaluation.\n&gt;\n\nIt is true that only connection genes are used in measuring\ncompatibility, since as you observe connections never change the nodes\nto which they connect.  Thus they are a sufficient set to determine\nthe network topology and compatibility.  \n\nIt is also true that I used the same class NNode for node genes and\nfor actual neurons.  However, it is a subtle, but actually the NNodes\ninside actual NN&#39;s are not literally the same NNodes in the genome. \nIn other words, the NNodes in the networks are created separately,\nalthough they do contain an &quot;analogue&quot; pointer back to the node gene\nfrom which they were created.  Actually, I regret this slightly\nconfusing programming decision.  It would have been easier to\nunderstand had a used a separate class for &quot;node genes&quot; and &quot;actual\nneurons.&quot;\n\n&gt; \n&gt; Any assistance gratefully received!\n&gt; \n&gt; \n\nGood luck with your project.   Don&#39;t be discouraged if it&#39;s a bit of a\nlearning curve starting up.  I&#39;m sure several here can vouch that\nafter the initial framework gets put in place things get easier and \nmore interesting.\n\nken\n\n\n"}}