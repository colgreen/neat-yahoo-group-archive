{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"ZTe3RaadwdqDILSwoPmvZtwEpKl7hOSrm11ZsrOFFbNcon_LzMvD3eES87I1ixHPpI6HQhooKNTcbUdaOMTM_RfldLGarrK15S0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] 3D cross product domain","postDate":"1092155071","msgId":1354,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4yLjAuMC4yMDA0MDgxMDE3MjA1MS4wMjU2MmFjMEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDY4NDIwMWM0NzgxMyRmNjgwYmI4MCQ2Y2NiMDEwYUBtYWlsMndvcmxkLmNvbT4=","referencesHeader":"PDY4NDIwMWM0NzgxMyRmNjgwYmI4MCQ2Y2NiMDEwYUBtYWlsMndvcmxkLmNvbT4="},"prevInTopic":1341,"nextInTopic":1359,"prevInTime":1353,"nextInTime":1355,"topicId":1298,"numMessagesInTopic":17,"msgSnippet":"Hi, Since to do a cross-product you need multiplies and adds, do you have background information on how hard A*B and A+B are to evolve networks for. Also,","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 59069 invoked from network); 10 Aug 2004 16:15:52 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m1.grp.scd.yahoo.com with QMQP; 10 Aug 2004 16:15:52 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta5.grp.scd.yahoo.com with SMTP; 10 Aug 2004 16:15:51 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 10 Aug 2004 16:15:50 -0000\r\nMessage-Id: &lt;6.1.2.0.0.20040810172051.02562ac0@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.2.0\r\nDate: Tue, 10 Aug 2004 17:24:31 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;684201c47813$f680bb80$6ccb010a@...&gt;\r\nReferences: &lt;684201c47813$f680bb80$6ccb010a@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.33\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] 3D cross product domain\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi,\n\nSince to do a cross-product you need multiplies and adds, do you have \nbackground information on how hard A*B and A+B are to evolve networks for.\n\nAlso, given that sigmoid activation functions don&#39;t naturally lend \nthemselves to implementing these basic functions, you may find that an \nevolved solution is suited only to the range of values in the training \nset.  e.g. adding can be achieved by setting a nodes input weights low (to \nkeep things in the linear portion of the curve) and the output weight high \n(to undo the scaling on the input) but how low and high these need to be is \nconstrained by the highest magnitude number in the training data.\n\nAlso, of course, if it scales the inputs too low then you may lose precision.\n\n         Ian Badcoe\n\n\nAt 23:07 01/08/2004, you wrote:\n&gt;hey group,\n&gt;I&#39;m having a terrible time searching the space for solving a cross product.\n&gt;\n&gt;Fitness is measured by giving it six inputs, one for x,y and z for each \n&gt;input vector, and then measuring the absolute error of each of the three \n&gt;output components.\n&gt;\n&gt;Every individual is tested on two different cross products every generation.\n&gt;\n&gt;Every some number of generations ( I call ticks ) the cross product inputs \n&gt;are randomly generated, and the new correct cross product calculated.\n&gt;\n&gt;I limited the network size to 20 neurons, as I figure more than this would \n&gt;be bloat.\n&gt;\n&gt;I&#39;ve been plotting best fitness and average fitness, and it doesn&#39;t look \n&gt;like it will ever converge on a solution (have run 4000 generations, pop \n&gt;size 128). The algorithm does it&#39;s thing before I change the inputs, where \n&gt;the error starts off big, then gets small on an asymptotic curve, but it \n&gt;exactly the same way, over and over, every time I change the inputs. The \n&gt;average fitness looks similar, but is generally moving down from bad to worse.\n&gt;I think this should be a straight forward domain, as the math is only six \n&gt;calculations. What am I doing wrong?\n&gt;\n&gt;chad\n\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n\n"}}