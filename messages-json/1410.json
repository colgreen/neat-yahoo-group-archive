{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":115403844,"authorName":"John Arrowwood","from":"&quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;","profile":"jarrowwx","replyTo":"LIST","senderId":"cbSv3VSdXFHB_APVmSYpFpDfzFTq9aNZ0y6C7YzVtX01vwfSdwQ_BfSTb3Sv-57hMfegiprwPPD-TukxDKaoXfBwgQTNCvT1IDuOZOEG","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Avoiding shortcut optimizations?","postDate":"1092779828","msgId":1410,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTItRjIyMVd5OWVhYnBBcHIwMDAwMzVhZkBob3RtYWlsLmNvbT4="},"prevInTopic":1408,"nextInTopic":0,"prevInTime":1409,"nextInTime":1411,"topicId":1360,"numMessagesInTopic":18,"msgSnippet":"... Yep.  A deterministic formula walks the genome and generates a distinct string that encapsulates the topology.  Because of historical markings that go back","rawEmail":"Return-Path: &lt;jarrowwx@...&gt;\r\nX-Sender: jarrowwx@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 26498 invoked from network); 17 Aug 2004 21:57:08 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m10.grp.scd.yahoo.com with QMQP; 17 Aug 2004 21:57:08 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.247.22)\n  by mta5.grp.scd.yahoo.com with SMTP; 17 Aug 2004 21:57:08 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Tue, 17 Aug 2004 14:57:08 -0700\r\nReceived: from 64.122.44.102 by by2fd.bay2.hotmail.msn.com with HTTP;\n\tTue, 17 Aug 2004 21:57:08 GMT\r\nX-Originating-Email: [jarrowwx@...]\r\nX-Sender: jarrowwx@...\r\nTo: neat@yahoogroups.com\r\nBcc: \r\nDate: Tue, 17 Aug 2004 14:57:08 -0700\r\nMime-Version: 1.0\r\nContent-Type: text/plain; format=flowed\r\nMessage-ID: &lt;BAY2-F221Wy9eabpApr000035af@...&gt;\r\nX-OriginalArrivalTime: 17 Aug 2004 21:57:08.0462 (UTC) FILETIME=[242D10E0:01C484A5]\r\nX-eGroups-Remote-IP: 65.54.247.22\r\nFrom: &quot;John Arrowwood&quot; &lt;jarrowwx@...&gt;\r\nReply-To: john@...\r\nSubject: Re: [neat] Avoiding shortcut optimizations?\r\nX-Yahoo-Group-Post: member; u=115403844\r\nX-Yahoo-Profile: jarrowwx\r\n\r\n&gt;From: &quot;Chad Bohannan&quot; &lt;chad@...&gt;\n&gt;\n&gt; &gt;Basically, I didn&#39;t want to mess with &#39;speciation&#39; which is why I opted\n&gt;for\n&gt; &gt;treating each topology as a distinct species.\n&gt;\n&gt;I assume your still using the historical markings idea, but you then\n&gt;ditched the &#39;compatibility formala&#39; ken wrote about, and simply grouped\n&gt;identical sets of historic markings together?\n\nYep.  A deterministic formula walks the genome and generates a distinct \nstring that encapsulates the topology.  Because of historical markings that \ngo back all the way to the beginning of time (if you will), any two networks \nthat produce the same string are topologically identical.\n\nI went this route primarily because if you make a small topological \nmutation, even if it is a step in the right direction, it can and likely \nwill cause a drop in fitness initially.  But if it is a step in the right \ndirection, you want to protect it and keep it around.  How do you do that?   \nHow do you ensure that it passes its genes on to the next generation? By \nputting it in its own species.  Which means that in order to protect every \nsingle innovation in case it is a good one, you must have a species \ncompatability threshold of 1...one change, and it&#39;s not compatible any more. \n  Of course, if you are going to do that, you might as well skip the whole \ncompatibility threshold and all the things related to the possibility of \nmixing and matching networks that are slightly diffrent.\n\nBut the fewer networks of a particular species there are, the fewer \nopportunities there are for optimizing it.  So, in order to be able to \ncontrol both the population size and the number of networks per topology, I \ndecided to use a different approach to creating new topologies.  Rather than \nrandom chance creating new topologies, whether I have room for them or not, \nI deliberately create new topologies whenever I have room.\n\nIt does change the dynamics.  Current NEAT will create a range of complexity \nin a stagnant species.  But that means that there are fewer examples of each \ntopology, and so it is (potentially) harder to optimize the weights on any \ngiven topology.  My approach will create a range of complexity up to some \nlimit, and then require existing topologies to optimize, stagnate, then die \nout before it creates any more.  I would not be surprised if my approach \nslows down the search overall, but I think it gives me a better chance of \nfinding an optimal solution within a given topology.\n\nI&#39;m open to a discussion of the merits of one approach over the other.  And \nI&#39;m open to suggestions on alternatives, as well...\n\nFor instance, I&#39;m kicking around the idea of breaking the process into two \npieces:  One that adds topology, and another that optimizes the weights of \nthat topology using whatever shortcuts I can find.  A client machine \nrequests a work packet, and that work packet is a network topology.  It then \noptimizes those weights and returns the optimum weights it was able to come \nup with, and the fitness of that weight configuration.  The server then \ntakes that into consideration when deciding which topology to mutate to make \na new topology.  Such a thing might be a case of &#39;six of one, half-dozen of \nthe other&#39;, but I&#39;m wondering if it won&#39;t let me optimize faster, simply \nbecause I could potentially make weight changes faster.  Thoughts?\n\n\n\n"}}