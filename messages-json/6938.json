{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":582233554,"authorName":"Andrew Engelbrecht","from":"Andrew Engelbrecht &lt;ae@...&gt;","replyTo":"LIST","senderId":"OBLAfzRQNIN3iXlNhv8TnZx-15YvyeSLcu6tQlJ3JEerzIjWA1WsPITR8xnLTT3WmwBQsN1ee2PQjzSWWnrRfdrBkkM2","spamInfo":{"isSpam":false,"reason":"0"},"subject":"A new JavaScript library, demo, and ideas for tweaking the NEAT algorithm","postDate":"1515369661","msgId":6938,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGNlZDQ3ZWUxLTgyOWQtNDhkNy01NmJiLTk4ZWZmODk5OGNkM0BuMHIuY28+"},"prevInTopic":0,"nextInTopic":0,"prevInTime":6937,"nextInTime":6939,"topicId":6938,"numMessagesInTopic":1,"msgSnippet":"Hello NEAT users group, A while back I wrote a JavaScript library based on NEAT. I waited before posting because I wanted to show a nice physics demo and had","rawEmail":"Return-Path: &lt;ae@...&gt;\r\nX-Sender: ae@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 18825 invoked by uid 102); 8 Jan 2018 00:01:03 -0000\r\nX-Received: from unknown (HELO mtaq3.grp.bf1.yahoo.com) (10.193.84.142)\n  by m4.grp.bf1.yahoo.com with SMTP; 8 Jan 2018 00:01:03 -0000\r\nX-Received: (qmail 30395 invoked from network); 8 Jan 2018 00:01:03 -0000\r\nX-Received: from unknown (HELO mta1005.groups.mail.ne1.yahoo.com) (98.138.100.120)\n  by mtaq3.grp.bf1.yahoo.com with SMTP; 8 Jan 2018 00:01:03 -0000\r\nX-Original-Return-Path: &lt;ae@...&gt;\r\nX-Received-SPF: none (domain of n0r.co does not designate permitted sender hosts)\r\nX-YMailISG: DU1tW7MWLDtYrX3QOlyo38Dq4FJgZFNytbDj1FvCI5x3NuV0\n znFECk6O.e7rduRHuqN36iTAwS.Pw5_MUKZO_dNqm.jkmxB3Y6KyQLKXwWh6\n lkfNLmFOVwk5JuV1aY6aIM7IqSDlvV2EH4yKLBIZFf20Mn9gJQGVFHChv0iG\n vUyx55uixJzzzIgNyUc8ja7Kplwqoq30YJAJaGB5JQbmWvT8yAsZCloIIQ4F\n w3J_NYiO8tOBnMfJna4yjGZMFlI0SdrNzCBnPWI6dH2ROUrPyfS6CcJ7uDys\n OhsnlfGBixYXQL5W8rcZDsN.mO.G3OyjWfO8gwnNH3N0XPCe5_iqNY2CY8yH\n v5HVe45Q3gcaHcHuHchSslUnuitYcypI1HwAFHYaQq0jZ.P0Vq00iuyNc8sO\n 6gumcex5foC66OI0wnO0jtHT.1rW2GVLe_XZDdDckQkj4pSdssRe9tAX3CDz\n PM5GwqldzdHHmGFwKyMThDvTGplikpvuakxEwMR_0I4zkruu0D1AUyx53Pw3\n Qh.ZAUw9xc_6ddA.CqLQ.UVEZwS.V8bi3.wHxoDjrQaZlc498gkdCKgIr9J5\n dSV4dqAkJDjNFIuUoEK.tr5REn8QdKG9vr4STv41STqGtoHaf.8GdlO6kGnU\n yRyktz3u4ZRsWQcU1t0YUM.4Uj3mJAFfbtDFwtVjJ6oNKbeT_GUH6mN3Ryi4\n USCp3dBlnO_UbJx5qTSK_x.w54kiiSnnIZXeW5BIVZ5JQL0OY4xbLox8rLtv\n M_RhYDN.motEiurLqyA9nNlMutMB2vJjRN4FPFZcyRpJGrHbuVproIK_nk9A\n LOueYC77nZYuMy.61FMZJtMYwxzNvr27f4djdQKHIsGqHzX2RVd45fnJhUcL\n OJRzz0JzHDWKr7gxemfDug.nx1ENs5cth5S8_QOM_kMuyMha0vVlMZvFJGDH\n jqawpzGjtGvgz8cVN2qxQMN9HZWkeajZOosGy_KQc.1PNefI75jQDR8B5z_x\n GmQpqLyJQJTYlZa0E6NdBrtQ_j0gdyyRS1a4RLrZmogMtNhYaQLmjBv16O8y\n V4KOeDKWx9DcWqohkygCrpfyYvTBftEc3tfEqRpaAa4xaBQHZ2a3KPb5UEMi\n PvMZ2BxAigRoXR_2KvCd4CBpacM_IsRMlZgUY.foYC..dXQ4nQzRQDPl1i_0\n tl2dj_KagaeJOlFXFzS4XA72yJGXNK0s4hI-\r\nAuthentication-Results: mta1005.groups.mail.ne1.yahoo.com  from=n0r.co; domainkeys=neutral (no sig);  from=n0r.co; dkim=neutral (no sig)\r\nX-Received: from 127.0.0.1  (EHLO n0r.co) (162.243.217.159)\n  by mta1005.groups.mail.ne1.yahoo.com with SMTPS; Mon, 08 Jan 2018 00:01:02 +0000\r\nX-Received: from 146-115-83-102.s2653.c3-0.sbo-ubr1.sbo.ma.cable.rcncustomer.com ([146.115.83.102] helo=[192.168.1.133])\n\tby n0r.co with esmtpsa (TLS1.2:ECDHE_RSA_AES_128_GCM_SHA256:128)\n\t(Exim 4.84_2)\n\t(envelope-from &lt;ae@...&gt;)\n\tid 1eYKs8-0005l5-Ow\n\tfor neat@yahoogroups.com; Sun, 07 Jan 2018 19:01:00 -0500\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;ced47ee1-829d-48d7-56bb-98eff8998cd3@...&gt;\r\nDate: Sun, 7 Jan 2018 19:01:01 -0500\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101\n Thunderbird/52.5.0\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Language: en-US\r\nContent-Transfer-Encoding: 8bit\r\nSubject: A new JavaScript library, demo, and ideas for tweaking the NEAT\n algorithm\r\nX-Yahoo-Group-Post: member; u=582233554\r\nFrom: Andrew Engelbrecht &lt;ae@...&gt;\r\n\r\nHello NEAT users group,\n\nA while back I wrote a JavaScript library based on NEAT. I waited before\nposting because I wanted to show a nice physics demo and had to work out\na dependency issue. The demo is here:\n\nhttps://n0r.co/swirlnet/\n\nIn addition to the demo, I&#39;d like to share some of my ideas about how to\ntweak the NEAT algorithm. I&#39;ve included those proposed tweaks below.\n\nIf you would like to see the evolutionary algorithm in my source code,\nyou could start by looking here:\n\nhttps://gitlab.com/sudoman/swirlnet.make-population/blob/master/src/reproduction.js\n\nThe code is split up into multiple git repos and can be installed via\nnpm, as described here:\n\nhttps://gitlab.com/sudoman/swirlnet\n\nI wrote a library for multi-core net testing that sends genomes to\nsubprocesses. You can try out the single-threaded and multi-core\nvariants of XOR in the swirlnet repository. The source code of the\ndouble pendulum demo is available here:\n\nhttps://gitlab.com/sudoman/swirlnet-demos\n\nI planned on making generations serializable so that they could be\nreloaded back into the evolutionary algorithm at a later time, but still\nhaven&#39;t implemented it.\n\nI hope that my code is of interest, at least for some of the ideas I\ncame up with in the process.\n\nThanks, :)\nAndrew\n\n\n# Differences between swirlnet and NEAT\n\nWhile some features in NEAT are currently missing, others are\nintentionally excluded or changed.\n\n## Expanded options for disablement during crossover\n\nThe original [NEAT](http://www.cs.ucf.edu/~kstanley/neat.html)\n[paper](http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf)\nseems to suggest that new genomes produced through crossover should\nrandomly inherit the disablement of a connection gene if it is\ndisabled in either parent, regardless of the relative fitness of the\nparent carrying the disabled gene.\n\nThis leads to a choice between, at one extreme, allowing rather\nfrequent inheritance of disablement from weak parents, or rarely\ninheriting disablement from fit parents, at the other. Since\nrelative fitness determines which parent passes on excess and\ndisjoint genes, neither option is appealing as both options\nfrequently disrupt effective structure. Attempting to compromise\nwith a fifty percent chance of inheriting disablement from either\nparent leads to frequently disrupted structure in both of these\nproblematic scenarios. This is caused by an effective double bind\ndue to there being only one probability covering multiple scenarios.\n\nswirlnet gives you flexible options through seven probability\nsettings.\n\n* Firstly, you have the option of of using these settings to disable\n  the special inheritance rules for gene disablement.\n\n    * This causes disablement and enablement to be inherited along\n      with connection weight according to the gene inheritance\n      rules.\n\n* You can set gene disablement status to always be inherited from\n  the gene of the fitter parent, along with other structural\n  differences.\n\n    * In the case of the XOR challenge, this setting and settings\n      with similar probabilities are the most effective options I&#39;ve\n      tried since they reduce attraction to the the local minimum of\n      creating genomes with every connection gene disabled. Without\n      this type of inheritance, connections often become disabled\n      when a weak genome with an added (and reconnected) node and\n      disabled (short) connection reproduces with a fitter genome.\n      The additional connected node is not inherited from the weaker\n      genome since it is either disjoint or excess; if the disabled\n      connection is randomly inherited from the weaker genome then\n      the result is a new genome with a missing connection. Once all\n      connections are deleted, genomes always create the same output\n      that is situated half way between the correct and incorrect\n      answer for every XOR test case. In early stages of evolution,\n      this disconnected genome may outperform connected genomes.\n      Using the above approach solves this particular issue.\n\n* By changing four settings in swirlnet you may differentiate the\n  probabilities of inheriting disablement, inheriting enablement or\n  non-interference, each according to whether the fitter or weaker\n  parent has the disabled gene.\n\n* You may set the gene enablement rate for cases in which both\n  parents&#39; genes are disabled.\n\n* You can also set the frequency of asexual gene disablement\n  toggling with two settings, one for the rate of enablement, the\n  other for the rate of disablement.\n\n* Tweaking these settings allows you to follow the same, or a\n  similar, approach as the one outlined in the original NEAT paper.\n\nThe additional rules for sexually inherited disablement occur after\neach connection weight is randomly inherited from either parent.\n\n## Genomes with equal fitness\n\nIf two genomes with equal fitness scores are undergoing crossover,\none of them is treated as the fitter genome by swirlnet. Excess and\ndisjoint genes are inherited from the &#39;fitter&#39; parent instead of\nrandomly inheriting disjoint and excess genes from both.\n\nRemoving this feature decreased code complexity and increased the\nrate at which solutions to a prior (albeit naive) version of the XOR\nproblem were found. The prior behavior may be re-added later if\nfound to be useful.\n\n## Weight mutation control\n\nswirlnet offers expanded options for controlling weight mutation\ncompared to suggestions in the original NEAT paper. One has the\noption of setting the uniform gene perturbation, unique gene\nperturbation and unique gene weight reset rates. The sum of these\nrates may be less than 1 in order to allow some weights in a genome\nundergoing weight mutation to remain unmutated.\n\nswirlnet uses Gaussian distributions to set new weights and perturb\nexisting ones.\n\n## Other differences\n\nThere are likely many other undocumented ways in which this library\ndiffers from other implementations of NEAT.\n\n"}}