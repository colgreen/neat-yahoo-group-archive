{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"w6S24yqqfMhDI_g6giunzxbNmHIV422NF3bdDZSaJzDkD4erk-pLa-KcvqwfgoGdgGfrG37t9njGaPdF1Iv-lvkHSiLoHBNAalU","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Computation Time","postDate":"1088590011","msgId":1171,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4wLjYuMC4yMDA0MDYzMDEwNDgzMS4wMjRiN2U5OEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PEJBWTItRjMyclQxanlwWHJYZWUwMDA0ZmU4YUBob3RtYWlsLmNvbT4=","referencesHeader":"PEJBWTItRjMyclQxanlwWHJYZWUwMDA0ZmU4YUBob3RtYWlsLmNvbT4="},"prevInTopic":1170,"nextInTopic":3162,"prevInTime":1170,"nextInTime":1172,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"... In addition to that, you ll need to cast the exp() output back to float (unless your local math library has an fexp in it).  But I m not sure I d expect to","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 23837 invoked from network); 30 Jun 2004 10:00:58 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m21.grp.scd.yahoo.com with QMQP; 30 Jun 2004 10:00:58 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta3.grp.scd.yahoo.com with SMTP; 30 Jun 2004 10:00:57 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 30 Jun 2004 10:00:51 -0000\r\nMessage-Id: &lt;6.1.0.6.0.20040630104831.024b7e98@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.0.6\r\nDate: Wed, 30 Jun 2004 11:06:51 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;BAY2-F32rT1jypXrXee0004fe8a@...&gt;\r\nReferences: &lt;BAY2-F32rT1jypXrXee0004fe8a@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.33\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Computation Time\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 21:22 29/06/2004, you wrote:\n&gt; &gt;From: Ian Badcoe &lt;ian_badcoe@...&gt;\n&gt; &gt;\n&gt; &gt; &gt;I&#39;ll have to do some poking around to see if I can get away with floats\n&gt; &gt; &gt;instead of doubles...  I&#39;ll try making a copy of one and converting all\n&gt; &gt; &gt;&#39;double&#39; to &#39;float&#39; and seeing if it outputs identical results.\n&gt; &gt;\n&gt; &gt;You won&#39;t get &quot;identical&quot; results.  But you may get ones which are\n&gt; &gt;different but as good.\n&gt;\n&gt;All right, I tested it.  I took an existing generated code and converted\n&gt;&#39;double&#39; to &#39;float&#39; and added an &#39;F&#39; to the end of every constant (excpet\n&gt;integers).\n\nIn addition to that, you&#39;ll need to cast the exp() output back to float \n(unless your local math library has an fexp in it).  But I&#39;m not sure I&#39;d \nexpect to see much difference yet, like we discussed way back, it&#39;s not the \nspeed of the FPU, which is the same for each, but the memory throughput, \nand that will get more important as your networks grow.\n\nBut it may never be significant, it depends how large your networks grow, \nbut from the problem spec I&#39;d think you must be ultimately looking at a \nthousand neurones.  e.g. one neurone per input channel is 81, if you get \nany sort of differentiation of adjacent pixels that would be another 144 \n(288 with diagonals), and that&#39;s still not doing anything with the \ncorner-data...\n\nSo 1000 neurones, how many average connections on each would we say?  Maybe \n10?  And a population size of 500, so that&#39;s 40 megabytes of weights, \nreducing that to 20 megs must be worthwhile?\n\n&gt;   The resultant code was less than 5% faster.  And the error was\n&gt;about 5% less with floats than with doubles.\n&gt;\n&gt;Since the whole purpose was to be anal retentive about image quality, trying\n&gt;to do better than the current state-of-the art enlargement techniques, I\n&gt;think I&#39;m going to stick with the higher accuracy for now, and just throw\n&gt;more CPU&#39;s at the problem! :)\n\nHmm, is there any point being overly precise?  Since what you are actually \nabout is trying to develop networks which will &quot;guess&quot; the missing \ninformation, I&#39;d say that precision was not really the issue.\n\nIn fact, I&#39;d consider weighting the errors so that small errors were all \nvery-fit, medium one&#39;s moderately fit, and big ones very unfit.  That way \nyou prioritize the system to first concentrate on removing bad errors, and \nonly then look towards improving the lesser problems...\n\n&gt;I&#39;ll check it out.  After I figure out exactly (without any ambiguity) how\n&gt;many decimal places before I am just being wasteful, I&#39;ll adjust the\n&gt;generated code accordingly.\n\nCould you go to a binary format?  I know it&#39;s less user friendly but then \nyour numbers could be double (float) format throughout, and there would be \nno questions of variation in precision.  It will also be much smaller for \ntransmission through the web.\n\n         Ian Badcoe\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n\n"}}