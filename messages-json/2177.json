{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"D5rQu3AaEB67Rn17L9Ux4N3ar1FU2tzX2kCBQktyv_ShqmeoAa0NhTIw8NqhSm_du0tV--hoUoQwrxJFEOOhWVYvXXnriLX6sRU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Tic-Tac-Toe w/ board state normalisation - Update","postDate":"1123241733","msgId":2177,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4wLjE0LjAuMjAwNTA4MDUxMjI2NTguMDMzMzlhMzBAcG9wLm1haWwueWFob28uY28udWs+","inReplyToHeader":"PDQyRjI4NEFDLjkwMjA3MDZAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDQyRjEzN0Y5LjkwNzA3MDhAZHNsLnBpcGV4LmNvbT4gPDYuMi4wLjE0LjAuMjAwNTA4MDQxMTU4NDUuMDMzMzE2NTBAcG9wLm1haWwueWFob28uY28udWs+IDw0MkYyODRBQy45MDIwNzA2QGRzbC5waXBleC5jb20+"},"prevInTopic":2176,"nextInTopic":0,"prevInTime":2176,"nextInTime":2178,"topicId":2160,"numMessagesInTopic":14,"msgSnippet":"","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 79133 invoked from network); 5 Aug 2005 11:33:58 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m28.grp.scd.yahoo.com with QMQP; 5 Aug 2005 11:33:58 -0000\r\nReceived: from unknown (HELO smtp006.mail.ukl.yahoo.com) (217.12.11.95)\n  by mta5.grp.scd.yahoo.com with SMTP; 5 Aug 2005 11:33:58 -0000\r\nReceived: (qmail 63786 invoked from network); 5 Aug 2005 11:32:57 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp006.mail.ukl.yahoo.com with SMTP; 5 Aug 2005 11:32:56 -0000\r\nMessage-Id: &lt;6.2.0.14.0.20050805122658.03339a30@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.0.14\r\nDate: Fri, 05 Aug 2005 12:35:33 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;42F284AC.9020706@...&gt;\r\nReferences: &lt;42F137F9.9070708@...&gt;\n &lt;6.2.0.14.0.20050804115845.03331650@...&gt;\n &lt;42F284AC.9020706@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Tic-Tac-Toe w/ board state normalisation - Update\r\nX-Yahoo-Group-Post: member; u=7192225; y=FRwUB4CbEB7232jt12bPXLMPCifEceWNlh8hT0-dM2WC5xGwQg\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\n\n&gt; &gt;As another option, I could give you some code that for any board and\n&gt; &gt;proposed move will tell you whether against a perfect minimax player that\n&gt; &gt;move would lead to a win, lose or draw...\n\n\n\n&gt; &gt;Or maybe, using normalisation to reduce the number of boards, it would now\n&gt; &gt;be possible to iterate over all possible games and just count the\n&gt; &gt;proportion of win/lose/draw.\n\n\n&gt;I like the idea. I can probably cobble somthign together using the\n&gt;&#39;BestPlayer&#39; strategy I borrowed from Derek & Philip. I don&#39;t know how\n&gt;that strategy compares with a perfect minimax player - I&#39;ll read up on\n&gt;minimax first.\n\nIf it helps, this is from my program that generated that file:\n\nint Generate(Board b, int who, int tabs) {\n         long code = FindLowestEnantiomer(b);\n         int board_num = AlreadyProcessed(code);\n\n         int iWhoWon;\n         if (board_num != -1) {\n                 iWhoWon = WinRecord(board_num);\n                 printf(&quot;%sTransform of board:%i where %s will win&#92;n&quot;, \nTabbage(tabs), board_num, PrettyName(iWhoWon));\n                 return iWhoWon;\n         }\n\n         iWhoWon = b.Winner();\n         board_num = StoreBoard(code, who);\n\n         PrintBoard(b, tabs, who, board_num, iWhoWon);\n\n         if (!iWhoWon && b.GetCount() &lt; 9) {\n                 iWhoWon = 3 - who;\n                 for(int i = 0; i &lt; 9; i++) {\n                         if (b.GetCell(i) == 0) {\n                                 Board b2(b);\n                                 b2.SetCell(i, who);\n                                 printf(&quot;%s  %s plays %i&#92;n&quot;, Tabbage(tabs), \nPrettyName(who), i);\n\n                                 int temp = Generate(b2, 3 - who, tabs + 1);\n\n                                 if (temp == who) {\n                                         iWhoWon = temp;\n                                 }\n                                 if (iWhoWon != who && temp == 0) {\n                                         iWhoWon = 0;\n                                 }\n                         }\n                 }\n         }\n\n         StoreResult(board_num, iWhoWon);\n\n         printf(&quot;%sEnd of board:%i where %s will win&#92;n&quot;, Tabbage(tabs), \nboard_num, PrettyName(iWhoWon));\n\n         return iWhoWon;\n}\n\nMost of this is not minimax, but rather the code to store and retrieve \nalready known results\n\nFindLowestEnantiomer finds the normalised form of each board.  This is only \nused to look-up and store the results.\nAlreadyProcessed looks up boards by normalised forms and returns an index \nthe record can be accessed by.\nWinRecord looks up the ultimate result if a board has already been seen.\nStoreBoard stores the board for future reference.\nStoreResult stores the result associated with the same board.\n\nOther than that, all you need to know is that the players are represented \nby 1 and 2 and nobody by zero, and that the same representation is used on \nthe board and for returning who won...\nAnd in the core of the main loop, we assume the current player has lost, \nthen we look at whether his current move can force a win, and if not \nwhether it can force a draw.\n\n         Ian\n\nIn fifteen minutes, everybody will be in the future.\n\n\n\n\t\t\n___________________________________________________________ \nHow much free photo storage do you get? Store your holiday \nsnaps for FREE with Yahoo! Photos http://uk.photos.yahoo.com\r\n\n"}}