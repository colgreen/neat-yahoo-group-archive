{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":151231063,"authorName":"Joseph Reisinger","from":"Joseph Reisinger &lt;joeraii@...&gt;","profile":"joeraii","replyTo":"LIST","senderId":"ZXxphF1Psl_zz2G_igdtjLf6J8Qh_pzZ640nyLyT40Bw0-slUuoCBl57FHPbflMXMf9llz7GS5USMVlH8vgBjJmXzkVZpoAFPp3edTYdCQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Tile Coding and HyperNEAT","postDate":"1179379986","msgId":3305,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEYyNzM1NENGLTY0OEItNDQzQS04Nzc2LTA2NjYwRTA0RUY0M0Bjcy51dGV4YXMuZWR1Pg==","inReplyToHeader":"PGYyZTdpMis5cmV0QGVHcm91cHMuY29tPg==","referencesHeader":"PGYyZTdpMis5cmV0QGVHcm91cHMuY29tPg=="},"prevInTopic":3287,"nextInTopic":3319,"prevInTime":3304,"nextInTime":3306,"topicId":3214,"numMessagesInTopic":27,"msgSnippet":"... The thing is, though, tile-coding can be used in conjunction with RAM and other geometry learning methods. So tile-coding itself is not a misdirection. It","rawEmail":"Return-Path: &lt;joeraii@...&gt;\r\nX-Sender: joeraii@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 90453 invoked from network); 17 May 2007 05:33:43 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m44.grp.scd.yahoo.com with QMQP; 17 May 2007 05:33:43 -0000\r\nReceived: from unknown (HELO spunkymail-a6.g.dreamhost.com) (208.97.132.119)\n  by mta7.grp.scd.yahoo.com with SMTP; 17 May 2007 05:33:43 -0000\r\nReceived: from [192.168.1.133] (ZQ124172.ppp.dion.ne.jp [222.13.124.172])\n\tby spunkymail-a6.g.dreamhost.com (Postfix) with ESMTP id 37943109F28\n\tfor &lt;neat@yahoogroups.com&gt;; Wed, 16 May 2007 22:33:12 -0700 (PDT)\r\nMime-Version: 1.0 (Apple Message framework v752.2)\r\nIn-Reply-To: &lt;f2e7i2+9ret@...&gt;\r\nReferences: &lt;f2e7i2+9ret@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;F27354CF-648B-443A-8776-06660E04EF43@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Thu, 17 May 2007 00:33:06 -0500\r\nTo: neat@yahoogroups.com\r\nX-Mailer: Apple Mail (2.752.2)\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Joseph Reisinger &lt;joeraii@...&gt;\r\nSubject: Re: [neat] Re: Tile Coding and HyperNEAT\r\nX-Yahoo-Group-Post: member; u=151231063; y=ZEtra43xAnyvT4q6nwdDpO6xPrXURKQcrKqNvzzzS2zdUA\r\nX-Yahoo-Profile: joeraii\r\n\r\n&gt; It&#39;s true that tile coding is a symptom of a problem, but that\n&gt; doesn&#39;t mean that the problem can&#39;t be avoided in some better way (or\n&gt; isn&#39;t already starting to be avoided by people like Stone and\n&gt; Littman).  But that is no excuse for tile coding itself.  It&#39;s a\n&gt; misdirection on top of a misdirection, and two wrongs don&#39;t make a\n&gt; right.  So to say it&#39;s &quot;really good at what it does&quot; is misleading.\n\nThe thing is, though, tile-coding can be used in conjunction with RAM  \nand other geometry learning methods. So tile-coding itself is not a  \nmisdirection. It might be the case that is has been narrowly applied  \nin the past (causing you to label it a disease) but it most certainly  \ncan be used in ways that ultimately respect geometry. So in a sense  \ntile-coding is similar to NEAT without the Hyper; its a more general  \ntool that can be easily be misapplied (e.g. if you have a bad input  \nencoding), but also can be used to respect geometry (e.g. by adding  \nin Hyper).\n\n&gt; The generality issue is more interesting.  It&#39;s interesting because\n&gt; now we&#39;re veering back towards No Free Lunch (NFL).  Implicit in your\n&gt; last paragraph is the idea that we *want* to strive for complete\n&gt; generality in a learning method.  Why do you think that&#39;s a good\n&gt; idea?  My feeling is that such a perspective is motivated by trying\n&gt; to spit out the bitter pill of NFL,  or perhaps just an undue\n&gt; fixation on theoretical achievement.  But I think it&#39;s a bad goal,\n&gt; and once you let go of it, you can see that things like tile coding\n&gt; are obstacles to progress.\n\nNot complete generality, obviously that&#39;s stupid and its what gets us  \nin trouble in the first place. But I do want the maximum amount of  \ngenerality possible. Remember no one knows what happens to NFL in  \nclasses of &quot;real world&quot; problems. Certainly in classes of  \ncompressible problems it no longer holds. So what&#39;s the best we can  \ndo, in general, on real-world problems? I think this is a perfectly  \nvalid line of inquiry, and possibly very fruitful.\n\n\n&gt; For example, it is obvious that a chess board has an 8x8 square\n&gt; geometry.  Furthermore, it is obvious that such geometry is essential\n&gt; to chess.  Who in their right mind would want to try to learn chess\n&gt; *without* the information of where squares are on the board?  Rather\n&gt; than a laudable achievment in &quot;generality,&quot; it looks to me a wild\n&gt; goose chase to try something like that.\n\nBut why shouldn&#39;t we want learning algorithms that can figure out  \ngeometry? Then they would be really generally useful in arbitrary  \nlearning problems. What&#39;s the geometry of arbitrary classification  \nproblems? What&#39;s the geometry of learning natural language? What&#39;s  \nthe geometry of learning to diagnose heart-disease? What&#39;s the  \ngeometry of poker? For control problems and board games I can imagine  \nhow geometry might help, but there are so many more ML problems that  \ndon&#39;t seem to have natural geometries (or at least geometries that  \noccur to me offhand). So what can we do? Well if we want to leverage  \ngeometry, we&#39;ll have to have the learning algorithm figure out the  \ngeometry by itself.\n\n&gt; Or, if you don&#39;t like that one, how about this:  Who in their right\n&gt; mind would want to try to learn anything off of a visual field that\n&gt; is scrambled into a random order?  Well, if generality is your goal,\n&gt; then apparently you do.\n\nOk now you&#39;re being disingenuous again. &quot;Of course no one would do  \nthat.&quot; Even I agree. But please don&#39;t characterize my argument so  \nmyopically. The correct approach would be to first learn the geometry  \nand then try to leverage that to do higher level learning. Preferably  \nyou&#39;d have a learning algorithm capable of doing both in tandem. That  \nwould be really cool, and really generally applicable. Thus I think  \nthere is a lot of room for algorithm that learn &quot;generally&quot; but still  \nare clever. You seem to be neglecting that point.\n\n&gt; Amazingly, even outside tile coding, we have often (not always) been\n&gt; doing exactly that routinely as a field.  We take the most essential\n&gt; structural information and gut it from our representation before\n&gt; sending the rest in as input.  Look at how we input a Go board, each\n&gt; square totally separate from all the others;  or how we input a\n&gt; visual field as e.g. 100 separate inputs with no relationship between\n&gt; them.\n&gt;\n&gt; And you are suggesting that this is a good thing in anything other\n&gt; than a pedantic theoretical view?\n\nI agree tile-coding is useful only after we&#39;ve learned the geometry  \nof the problem. I think that much is clear. We shouldn&#39;t try fitting  \nto a curve until we well understand the geometry of the manifold that  \nits embedded on.\n\nIt strikes me than at interesting turn that this discussion could  \ntake is towards Kernel methods in ML. Specifying a kernel in a  \nsupport-vector machine (SVM) determines the geometry, since the  \nkernel basically defines a notion of distance between points (a  \nmetric, to be mathematically precise). So how do you view your ideas  \nfor HyperNEAT as separate from what the kernel people have been  \ndoing? Or maybe HyperNEAT is a way to bridge computational  \nintelligence methods and machine learning?\n\n-- \nJoseph Reisinger\nhttp://www.cs.utexas.edu/~joeraii\n\n\n\n"}}