{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":236201729,"authorName":"Jean-Baptiste Mouret / Mandor","from":"Jean-Baptiste Mouret / Mandor &lt;mandor@...&gt;","profile":"mandor_42","replyTo":"LIST","senderId":"1uCHMvipe4Jg-IkEPJ4WUg87nZQyxa6bSwRKzFBZDoenScCP2pz_3e7MrZq6MTgiUqcFWkjoDocy3nWWzqPuJDFYq5Jb46z9Op9o85CvUI4tvj_Qpbc71OYDH_jA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] CPPNs. Recursive vs Feedforward","postDate":"1257240097","msgId":4875,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg3MXZrZ3E3ejIud2wlbW91cmV0QGlzaXIuZnI+","inReplyToHeader":"PDcyN2E0MDZjMDkxMTAyMTYyMms1Yzg4ZDBhNGo3NGRiZDUyYTQ4YWY0NGVmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDcyN2E0MDZjMDkxMTAyMTYyMms1Yzg4ZDBhNGo3NGRiZDUyYTQ4YWY0NGVmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":4874,"nextInTopic":4876,"prevInTime":4874,"nextInTime":4876,"topicId":4874,"numMessagesInTopic":10,"msgSnippet":"Hi Colin ... I ve recently implemented an algorithm that find this longuest path. It is written using boost::graph for my own framework (sferes2) but you could","rawEmail":"Return-Path: &lt;jeanbaptiste.mouret@...&gt;\r\nX-Sender: jeanbaptiste.mouret@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 70605 invoked from network); 3 Nov 2009 09:22:44 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m13.grp.re1.yahoo.com with QMQP; 3 Nov 2009 09:22:44 -0000\r\nX-Received: from unknown (HELO ey-out-2122.google.com) (74.125.78.24)\n  by mta2.grp.sp2.yahoo.com with SMTP; 3 Nov 2009 09:22:44 -0000\r\nX-Received: by ey-out-2122.google.com with SMTP id d26so540504eyd.27\n        for &lt;neat@yahoogroups.com&gt;; Tue, 03 Nov 2009 01:21:43 -0800 (PST)\r\nX-Received: by 10.216.85.17 with SMTP id t17mr6330784wee.178.1257240103429;\n        Tue, 03 Nov 2009 01:21:43 -0800 (PST)\r\nReturn-Path: &lt;jeanbaptiste.mouret@...&gt;\r\nX-Received: from ithaqua.gmail.com (mna75-10-82-243-125-201.fbx.proxad.net [82.243.125.201])\n        by mx.google.com with ESMTPS id 10sm4396657eyz.19.2009.11.03.01.21.38\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Tue, 03 Nov 2009 01:21:40 -0800 (PST)\r\nDate: Tue, 03 Nov 2009 10:21:37 +0100\r\nMessage-ID: &lt;871vkgq7z2.wl%mouret@...&gt;\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;727a406c0911021622k5c88d0a4j74dbd52a48af44ef@...&gt;\r\nReferences: &lt;727a406c0911021622k5c88d0a4j74dbd52a48af44ef@...&gt;\r\nUser-Agent: Wanderlust/2.15.6 (Almost Unreal) SEMI/1.14.6 (Maruoka)\n FLIM/1.14.9 (=?ISO-8859-4?Q?Goj=F2?=) APEL/10.7 Emacs/22.2\n (i486-pc-linux-gnu) MULE/5.0 (SAKAKI)\r\nMIME-Version: 1.0 (generated by SEMI 1.14.6 - &quot;Maruoka&quot;)\r\nContent-Type: text/plain; charset=US-ASCII\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jean-Baptiste Mouret / Mandor &lt;mandor@...&gt;\r\nSubject: Re: [neat] CPPNs. Recursive vs Feedforward\r\nX-Yahoo-Group-Post: member; u=236201729; y=ZyJxsqMC8mjCOyEQpDxNZe5Dm9Ksfcmtq62_qcCay8QBCyTt\r\nX-Yahoo-Profile: mandor_42\r\n\r\nHi Colin\n\nColin Green &lt;colin.green1@...&gt; wrote :\n\n| Also there were discussions some years back about algorithms for\n| efficiently implementing feedforward networks - e.g. calculating the\n| longest path from input to output. I think Derek and Phillip worked on\n| these ideas in ANJI so I&#39;ll be looking in the ANJI code (and NEAT\n| group archive) but if anyone&#39;s got any more recent ideas/pointers on\n| the subject then I&#39;d be interested to hear them. Thanks.\n\nI&#39;ve recently implemented an algorithm that find this longuest\npath. It is written using boost::graph for my own framework (sferes2)\nbut you could probably translate it to use it in NEAT. Here is the\ncode (check boost.org for the documentation of boost::graph), \nwhere this-&gt;_g is the graph (feed-forward). I&#39;ve not heavily \ntested this code so I don&#39;t garantee it&#39;s bug-free but it should \nat least help you to start.\n\nvoid _compute_depth()\n{\n  using namespace boost;\n  typedef std::map&lt;vertex_desc_t, size_t&gt; int_map_t;\n  typedef std::map&lt;vertex_desc_t, vertex_desc_t&gt; vertex_map_t;\n  typedef std::map&lt;vertex_desc_t, default_color_type&gt; color_map_t;\n  typedef std::map&lt;edge_desc_t, int&gt; edge_map_t;\n        \n  typedef associative_property_map&lt;int_map_t&gt; a_map_t;\n  typedef associative_property_map&lt;color_map_t&gt; c_map_t;\n  typedef associative_property_map&lt;vertex_map_t&gt; v_map_t;\n  typedef associative_property_map&lt;edge_map_t&gt; e_map_t;\n        \n  color_map_t cm; c_map_t cmap(cm);\n  vertex_map_t vm; v_map_t pmap(vm);\n  edge_map_t em; \n  BGL_FORALL_EDGES_T(e, this-&gt;_g, graph_t)\n    em[e] = 1;\n  e_map_t wmap(em);\n  _depth = 0;\n  // we compute the longest path between inputs and outputs\n  BOOST_FOREACH(vertex_desc_t s, this-&gt;_inputs)\n    {\n      int_map_t im; a_map_t dmap(im);\n      dag_shortest_paths\n\t(this-&gt;_g, s, dmap, wmap, cmap, pmap, \n\t dijkstra_visitor&lt;null_visitor&gt;(),\n\t std::greater&lt;int&gt;(), \n\t closed_plus&lt;int&gt;(), \n\t std::numeric_limits&lt;int&gt;::min(), 0);\n                    \n      BGL_FORALL_VERTICES_T(v, this-&gt;_g, graph_t)\n\t{\n\t  size_t d = get(dmap, v);\n\t  if (this-&gt;_g[v].get_out() != -1 && d &lt;= num_vertices(this-&gt;_g))\n\t    _depth = std::max(_depth, d); \n\t}\n    }\n  // add one &quot;to be sure&quot;\n  _depth ++;\n}\n\n\n\n-- \nJean-Baptiste Mouret / Mandor\ntel : (+33) 6 28 35 10 49\n3 ((4&({*.(=+/))++/=3:)@([:,/0&,^:(i.3)@|:&quot;2^:2))&.&gt;@]^:(i.@[) &lt;#:3 6 2\n\n\n"}}