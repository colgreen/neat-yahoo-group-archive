{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":420832731,"authorName":"Daniel","from":"&quot;Daniel&quot; &lt;daniel_kuppitz@...&gt;","profile":"dkuppitz","replyTo":"LIST","senderId":"Wga280pzmA0RY5UrHWVyED70bb0lx6Aa5eSg-rtnXpMfoG1fvLIbykGz-imwbd6NFjreZrQijahg5gAVuvMemTgRpW21mHfOB1KPUg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: FloatFastConcurrentNetwork - Performance Optimization","postDate":"1259367762","msgId":4931,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhlcHFnaSt0dHJlQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGhlbjZzZit1dGUwQGVHcm91cHMuY29tPg=="},"prevInTopic":4930,"nextInTopic":4933,"prevInTime":4930,"nextInTime":4932,"topicId":4917,"numMessagesInTopic":12,"msgSnippet":"Please ignore my comments about the bad naming conventions and copy/paste comments. I ve just recognized that I was looking at the v1 source code. SharpNEAT v2","rawEmail":"Return-Path: &lt;daniel_kuppitz@...&gt;\r\nX-Sender: daniel_kuppitz@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 94764 invoked from network); 28 Nov 2009 00:22:44 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m3.grp.sp2.yahoo.com with QMQP; 28 Nov 2009 00:22:44 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta3.grp.re1.yahoo.com with SMTP; 28 Nov 2009 00:22:44 -0000\r\nX-Received: from [69.147.65.171] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 28 Nov 2009 00:22:42 -0000\r\nX-Received: from [98.137.34.72] by t13.bullet.mail.sp1.yahoo.com with NNFMP; 28 Nov 2009 00:22:42 -0000\r\nDate: Sat, 28 Nov 2009 00:22:42 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;hepqgi+ttre@...&gt;\r\nIn-Reply-To: &lt;hen6sf+ute0@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Daniel&quot; &lt;daniel_kuppitz@...&gt;\r\nSubject: Re: FloatFastConcurrentNetwork - Performance Optimization\r\nX-Yahoo-Group-Post: member; u=420832731; y=vZmF8gEHyybS9PjG-wm3kWZS3tIdavBt0XRtaBLxeHnPVmw\r\nX-Yahoo-Profile: dkuppitz\r\n\r\nPlease ignore my comments about the bad naming conventions and copy/paste c=\r\nomments. I&#39;ve just recognized that I was looking at the v1 source code. Sha=\r\nrpNEAT v2 is much much better regarding this issues.\n\nHowever, events for c=\r\nertain state changes would be great.\n\nCheers,\nDaniel\n\n\n--- In neat@yahoogro=\r\nups.com, &quot;Daniel&quot; &lt;daniel_kuppitz@...&gt; wrote:\n&gt;\n&gt; Hi David,\n&gt; \n&gt; I really w=\r\nouldn&#39;t call the code &quot;well organized and optimized&quot;. For example there are=\r\n too many static classes. Most of them should definitely be singleton objec=\r\nts.\n&gt; \n&gt; Above all the code/naming conventions are really bad. When debuggi=\r\nng the code it&#39;s hard to find out where each variable is actually coming fr=\r\nom. Looks like the code was ported from Java and only a few field- and meth=\r\nod-names were refactored. Have you checked the code with FxCop? I didn&#39;t, b=\r\nut I bet the result will be an endless list of warnings.\n&gt; \n&gt; What I person=\r\nally miss is some event handling stuff. Populations could fire events when =\r\nthe best fitness changes. Networks could fire events when pruning begins/en=\r\nds, when neurons or connections are added/deleted, etc. etc. Events make it=\r\n much easier too build good code around the framework, especially when it c=\r\nomes to graphical representations.\n&gt; \n&gt; But of course the code has also som=\r\ne really good concepts implemented. I like the the level of abstraction for=\r\n the non static classes. Also external configuration seems to go to the rig=\r\nht direction. Documentation is mostly very well done (there are some useles=\r\ns copy/paste comments, e.g. the summary description for the class NullFn is=\r\n &quot;Summary description for FastSigmoid.&quot; :)).\n&gt; \n&gt; Cheers,\n&gt; Daniel\n&gt; \n&gt; ---=\r\n In neat@yahoogroups.com, &quot;ddambroeplex&quot; &lt;ddambro84@&gt; wrote:\n&gt; &gt;\n&gt; &gt; \n&gt; &gt; \n=\r\n&gt; &gt; Hi Daniel,\n&gt; &gt; \n&gt; &gt; Thanks for your interest in HyperSharpNEAT.  It&#39;s a=\r\nlways good to hear about new researchers working with it, and it&#39;s great th=\r\nat you found this optimization.  Of course, the bulk of the standard NEAT c=\r\node is Colin&#39;s SharpNEAT, which is already very well organized and optimize=\r\nd.  That&#39;s why I chose to build my HyperNEAT code on top of it. \n&gt; &gt; \n&gt; &gt; I=\r\n will definitely consider integrating this into the main HyperSharpNEAT bui=\r\nld (a new, minor update should be coming very soon).  I do want to play aro=\r\nund with it though and make sure that the output is consistent with the old=\r\n method, although I don&#39;t see why it wouldn&#39;t be.  There also seems to be s=\r\nome conflicting information about how mono handles unsafe code, so I want t=\r\no make sure the optimization doesn&#39;t break compatibility.\n&gt; &gt; \n&gt; &gt; If you h=\r\nave any other ideas or questions concerning HyperSharpNEAT, just let me kno=\r\nw.\n&gt; &gt; \n&gt; &gt; David D&#39;Ambrosio\n&gt; &gt; \n&gt; &gt; --- In neat@yahoogroups.com, &quot;Daniel&quot;=\r\n &lt;daniel_kuppitz@&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Hello,\n&gt; &gt; &gt; \n&gt; &gt; &gt; I&#39;ve played aroun=\r\nd with a quite large network and took a look at the execution performance o=\r\nf HyperSharpNEAT. There was one outstanding method (besides my actual evalu=\r\nation method): FloatFastConcurrentNetwork.SingleStep()\n&gt; &gt; &gt; \n&gt; &gt; &gt; The met=\r\nhod has an execution time of only 0.3ms (avg) but it&#39;s called hundreds of m=\r\nillions of times, so I&#39;ve tried to optimize this method - with success. I&#39;v=\r\ne added some unsafe code; the methods readability is lost, but IMO the perf=\r\normance improvement redresses that.\n&gt; &gt; &gt; \n&gt; &gt; &gt; Some facts:\n&gt; &gt; &gt; \n&gt; &gt; &gt; W=\r\nith the original method a call to PerformOneGeneration() took 218 seconds i=\r\nn average. With my modified version and the same network a call took 124 se=\r\nconds (that&#39;s only 57% of the original version).\n&gt; &gt; &gt; \n&gt; &gt; &gt; Maybe you can=\r\n consider to apply this changes to the standard implementation. The modifie=\r\nd file can be found here: http://groups.yahoo.com/group/neat/files/FloatFas=\r\ntConcurrentNetwork.cs\n&gt; &gt; &gt; \n&gt; &gt; &gt; Cheers,\n&gt; &gt; &gt; Daniel\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n"}}