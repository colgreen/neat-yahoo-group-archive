{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"iayhQEvAUl30IdosLu4Nr87qi1SJQUHVcZI4_1NwEFudoDyVRQ4Qc6m3kgGRDkxtDz7aloLgt7wgSUZqrzkK9YGTg1b4ZbFfLQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Compactness of ANN&#39;s built from indirect encodings","postDate":"1134246469","msgId":2466,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzOUIzQTQ1LjYwNTA1MDdAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":0,"nextInTopic":2469,"prevInTime":2465,"nextInTime":2467,"topicId":2466,"numMessagesInTopic":3,"msgSnippet":"Here s an idea I got while reading some GP papers. Often in GP work the use of ADF s (Automatically Defined Functions) is mentioned, as far as I can see this","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 3297 invoked from network); 10 Dec 2005 20:27:46 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m31.grp.scd.yahoo.com with QMQP; 10 Dec 2005 20:27:46 -0000\r\nReceived: from unknown (HELO astro.systems.pipex.net) (62.241.163.6)\n  by mta5.grp.scd.yahoo.com with SMTP; 10 Dec 2005 20:27:46 -0000\r\nReceived: from [10.0.0.10] (81-86-161-87.dsl.pipex.com [81.86.161.87])\n\tby astro.systems.pipex.net (Postfix) with ESMTP id D1F13E000099\n\tfor &lt;neat@yahoogroups.com&gt;; Sat, 10 Dec 2005 20:27:44 +0000 (GMT)\r\nMessage-ID: &lt;439B3A45.6050507@...&gt;\r\nDate: Sat, 10 Dec 2005 20:27:49 +0000\r\nUser-Agent: Mozilla Thunderbird 1.0.7 (Windows/20050923)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Compactness of ANN&#39;s built from indirect encodings\r\nX-Yahoo-Group-Post: member; u=127853030; y=E68kyXS7xGpLV3ktdQ2Vwu9Jw5Wwl0FsdXmcvi9UPqKvbgjpT7kX\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nHere&#39;s an idea I got while reading some GP papers.\n\nOften in GP work the use of ADF&#39;s (Automatically Defined Functions) is \nmentioned, as far as I can see this is just a fancy term for a \nsub-routine. In tree based GP there is usually a main program tree and \noptionally a seperate set of ADF&#39;s than can be invoked (from the main \ntree) with parameters, just as any other sub-routine. What this means is \nthat each ADF is only defined once in memory, just as sub-routines (or \nthe CPU instructions that make up a function) in C++, Java or whatever \nonly exist once in computer memory regardless of how many times the \nfunction is called. Each invocation simply pushes its parameters onto \nthe stack and jumps to the function&#39;s address in memory.\n\nNow consider, say, modular-NEAT. To me sub-networks or modules are the \nequivalent of sub-routines within GP, each instance of a module within \nan ANN (following decoding of the genome) is like a seperate invocation \nof a sub-routine with the parameters coming from the connections feeding \nsignals into the module.\n\nOf course a fully decoded ANN would normally (I guess) contain \nduplicates of the modules, because each copy must maintain it&#39;s own set \nof neuron states (activation signal). This is distinct from \n(traditional) GP because GP trees (or graphs) traditionally describe \ncontrol flow and so each invocation of a routine occurs in sequence, \nwhereas ANN&#39;s describe data flow and all instances of an ANN module \ntherefore have data flowing through them concurrently.\n\n However this level of duplication is still potentially wasteful (of \nmain memory) because only the neuron signals are unique to each copy, \nnot the structure. The structure is equivalent to the CPU instructions \nof a normal sub-routine and as such doesn&#39;t actually need to be \nduplicated. Instead each module could be decoded into it&#39;s own sub-ANN \nthat the main ANN connects to, but in addition to a normal connection we \nmust specify the module &#39;instance&#39; we are connecting to, each neuron \nthen contains an array (for example) of states and it operates on the \nrelevant state data.\n\nOf course a sub-ANN could refer to other sub-ANN&#39;s, so overall the \nmemory saving could potentially be very large. Such an ANN \nrepresentation may not be as compact as the original genome where \nindirect encodings are in use, but it could help keep a lid on the \nmemory usage of decoded ANN&#39;s. Of course functionaly the ANN&#39;s could \nstill grow out of control - they are still the same ANN, just \nrepresented more compactly.\n\nColin.\n\n\n\n"}}