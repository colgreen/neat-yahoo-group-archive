{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"GKMB0Bmcoo0cUhTcyxy9i-J9yue0s54x6UofSIWwV6dekafZGbXFhR4LB6lMOTPuwImoIpevel6lKqLjqSgfqzs9w3jRvUtz6Q","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Continuous Species Control","postDate":"1130188070","msgId":2360,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzNUQ0RDI2LjgwMzAyQGRzbC5waXBleC5jb20+","inReplyToHeader":"PDYuMi4zLjQuMC4yMDA1MTAyMjExNTgzMS4wMzE1ZTQzOEBwb3AubWFpbC55YWhvby5jby51az4=","referencesHeader":"PDYuMi4zLjQuMC4yMDA1MTAxNzE0NDcwNi4wMjc3NDViMEBwb3AubWFpbC55YWhvby5jby51az4gPDQzNTQzRkQyLjcwMDAyMDlAZHNsLnBpcGV4LmNvbT4gPDYuMi4zLjQuMC4yMDA1MTAyMjExNTgzMS4wMzE1ZTQzOEBwb3AubWFpbC55YWhvby5jby51az4="},"prevInTopic":2357,"nextInTopic":2361,"prevInTime":2359,"nextInTime":2361,"topicId":2341,"numMessagesInTopic":11,"msgSnippet":"... This is the sort of quality of game play I have witnessed also. ... I was really meaning just very basic unit tests of underlying sub-routines, e.g.","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 71464 invoked from network); 24 Oct 2005 21:07:51 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m7.grp.scd.yahoo.com with QMQP; 24 Oct 2005 21:07:51 -0000\r\nReceived: from unknown (HELO galaxy.systems.pipex.net) (62.241.162.31)\n  by mta3.grp.scd.yahoo.com with SMTP; 24 Oct 2005 21:07:51 -0000\r\nReceived: from [10.0.0.10] (81-86-161-87.dsl.pipex.com [81.86.161.87])\n\tby galaxy.systems.pipex.net (Postfix) with ESMTP id 0911BE000189\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 24 Oct 2005 22:07:46 +0100 (BST)\r\nMessage-ID: &lt;435D4D26.80302@...&gt;\r\nDate: Mon, 24 Oct 2005 22:07:50 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;6.2.3.4.0.20051017144706.027745b0@...&gt; &lt;43543FD2.7000209@...&gt; &lt;6.2.3.4.0.20051022115831.0315e438@...&gt;\r\nIn-Reply-To: &lt;6.2.3.4.0.20051022115831.0315e438@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Continuous Species Control\r\nX-Yahoo-Group-Post: member; u=127853030; y=AV_J6zQkiQYc5wpzkZchFvlmze0FO175MIfs_L2PMh9FLc5f-Cuw\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;  \n&gt;\n&gt;I have played against my population leader a few times.  This was the\n&gt;latest such game (92.74%):\n&gt;\n&gt;[...]\n&gt;  \n&gt;\n&gt;This was a case where the CPU looked pretty good, however, in other \n&gt;games it has made far more basic errors in the early or mid game...\n&gt;\n&gt;  \n&gt;\nThis is the sort of quality of game play I have witnessed also.\n\n&gt;\n&gt;I&#39;m open to the idea of unit tests, but I have no idea how to go \n&gt;about it in this case.\n&gt;\n&gt;Actually, last week I almost started a thread on &quot;How do we test?&quot;\n&gt;  \n&gt;\nI was really meaning just very basic unit tests of underlying \nsub-routines, e.g. provide a pre-determined set of genomes and put them \nthrough, say, the crossover routine and compare the output against \npre-determined output - is the answer correct. Get the low level \nroutines right first. The trouble is that until the code is settled you \nhave to update the unit tests every time you change what the routines \nare doing, hence they just double (at best) the amount of work needed. \nSo in actual fact a high level approach is probably the answer here, \nideally we would have unit tests at every level from basic routines \nupwards, but in the absence of this a good (or better than nothing) \napproach is to just have a bunch of experiments for which you know \nthings like best score achieved within N generations (and say the \nstandard deviation of the scores achieved), so that you can ensure sure \nthat the overall algorithm is working roughly as it should. Now it may \nbe that there are subtle bugs lurking in the code somewhere, but the \nonly way to weed those out is through code reviews and thorough testing, \nwhich frankly sounds like hard work :)\n\n\n&gt;It seems to me that evolutionary algorithms are particularly \n&gt;resistant to testing, e.g because:\n&gt;\n&gt;1) behaviour depends on (pseudo) random numbers so as long as you \n&gt;don&#39;t change anything, it behaves the same, but the chaotic \n&gt;dependence on earlier events is really strong, and the slightest \n&gt;change means you are no longer repeating the same test-case\n&gt;\n&gt;2) there&#39;s a really broad spread of possible states for the system\n&gt;  \n&gt;\nYou&#39;re talking about high level , emergent type behaviours here right. \nE.g. we might subtly alter how mutation works, so that it&#39;s not a bug in \nthe traditional sense but it prevents some emrgent behaviour from, well, \nemerging. To this I say just be carefull when writing the mutation \nroutine! To be honest EA&#39;s are pretty robust thinsg and generally the \nreverse behaviour is found, which is to say a bug goes undetected \nbecause the overall algorithm actually still works pretty well. These \nemergent properties [typically] aren&#39;t  fragile things that can be \neasily disrupted, but fairly robust things which find a way through any \nproblems.\n\n&gt;3) you may have to run it for 7 days before it exhibits a bug (or 70 \n&gt;days if you are trying to use a debug build)...\n&gt;\n&gt;What do people do?  I don&#39;t mean tests in the sense of &quot;lets feed it \n&gt;XOR and see if it finds a solution&quot;.  I mean tests in the sense of \n&gt;being sure that (for example) your mutation operation doesn&#39;t bias \n&gt;towards particular weights, or write a float out of bounds 1 time in \n&gt;1,000,000,000?\n&gt;  \n&gt;\nActually such an error was reported to me and fortunately there was a \nstack trace that put me in the rigth area - partf of my port of part of \nrandlib to C#  threw an exception once every few billion calls or so. I \nnever witnessed this problem, but sure enough I put the method in a \ntight loop and it went pop once every 30 secs or so - this is ona 2ghz \nCPU! I&#39;m not sure there is an easy answer here, other than be very \ncareful when writing certian critical pieces of code, and perhaps review \ncentral/critical bits of code occasionally. Often I spot things on a \nsecond or third reading that hadn&#39;t occured to me before.\n\n&gt;As an example, and a good illustration of the danger of \n&gt;optimising.  I have a cache of FID values to make rule look-ups \n&gt;faster.  After a few days of running it (when progress was _really_ \n&gt;slow) I discovered that recalculating the fitness of the top \n&gt;individual gave an answer of 75%, but written against it in the log \n&gt;file was 91%.  After a couple of hours of head-scratching I \n&gt;discovered that this was because when I reproduce an individual, I \n&gt;was copying one parent&#39;s cache, which obviously didn&#39;t contain any \n&gt;recent changes to the FID values...  Thus the offspring were \n&gt;inheriting temporary state information from their parents, and this \n&gt;was compensating for their mutations (rather like money does for rich \n&gt;kids :) - apologies if any of you are rich, just send me 25% of your \n&gt;cash and we&#39;ll say no more about it).\n&gt;  \n&gt;\nYeh this is exactly the type of thing I&#39;m talking about. I do this sort \nof thing all the time.\n\n&gt;How do you test for that kind of bug, e.g. when the algorithm is \n&gt;going wrong but the expected behaviour is an emergent feature of \n&gt;millions of events?\n&gt;  \n&gt;\nLike I say, just be as thorough as possible and maybe review sections of \ncode occasionally, generally speaking you know where the potential \nproblems are. And hey it&#39; s not the end of the world, we&#39;re not writing \naircraft or nuclear warhead control systems here, spare a thought for \nthose guys :)\n\nColin\n\n\n\n"}}