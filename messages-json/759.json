{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"s6sOASF-L62W3yXAMFNJj_KbDgTIQxbGq8qy-3rnF6D1AgEQi07BOPXCiJiDAUCq9tA5-ms9CnMO7f8o0m15yHg49cAxs0Sczw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: simple question","postDate":"1083880035","msgId":759,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwOUFCMjYzLjkwMDAwMDVAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PEJBWTItRjEzaTE1Z3lHSlN5N3owMDAwNTRlNEBob3RtYWlsLmNvbT4=","referencesHeader":"PEJBWTItRjEzaTE1Z3lHSlN5N3owMDAwNTRlNEBob3RtYWlsLmNvbT4="},"prevInTopic":756,"nextInTopic":0,"prevInTime":758,"nextInTime":760,"topicId":730,"numMessagesInTopic":13,"msgSnippet":"... Hi John, I think I m going to have to disagree here. I would say that baggage is the source of all innovations in NEAT. For instance new nodes are","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 20711 invoked from network); 6 May 2004 21:47:16 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m21.grp.scd.yahoo.com with QMQP; 6 May 2004 21:47:16 -0000\r\nReceived: from unknown (HELO pengo.systems.pipex.net) (62.241.160.193)\n  by mta6.grp.scd.yahoo.com with SMTP; 6 May 2004 21:47:16 -0000\r\nReceived: from dsl.pipex.com (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby pengo.systems.pipex.net (Postfix) with ESMTP id A3ABA4C00A50\n\tfor &lt;neat@yahoogroups.com&gt;; Thu,  6 May 2004 22:47:13 +0100 (BST)\r\nMessage-ID: &lt;409AB263.9000005@...&gt;\r\nDate: Thu, 06 May 2004 22:47:15 +0100\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;BAY2-F13i15gyGJSy7z000054e4@...&gt;\r\nIn-Reply-To: &lt;BAY2-F13i15gyGJSy7z000054e4@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.193\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: simple question\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nJohn Arrowwood wrote:\n\n&gt;&gt;From: &quot;Derek James&quot; &lt;djames@...&gt;\n&gt;&gt;    \n&gt;&gt;\n&gt;&gt;So it seems to me that you can&#39;t logically separate the end result\n&gt;&gt;    \n&gt;&gt;\n&gt;&gt;from the evolving topologies.  If there&#39;s waste at the end, there\n&gt;  \n&gt;\n&gt;&gt;was waste throughout.\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Correct me if I am wrong, but it seems to me that if you include a \n&gt;complexity penalty in the fitness function, you create an evolutionary \n&gt;pressure towards or bias for simpler networks.  This pressure will cause the \n&gt;search to favor avenues that end up going directly to the final solution \n&gt;without picking up a lot of baggage along the way.  The only exception is \n&gt;where it is absolutely necessary to gather in some &#39;baggage&#39; in order to \n&gt;arrive at the final solution, which I can&#39;t envision ever actually being \n&gt;necessary.  \n&gt;\nHi John, I think I&#39;m going to have to disagree here. I would say that \n&#39;baggage&#39; is the source of all innovations in NEAT. For instance new \nnodes are created by splitting an existing connection and setting one of \nthe new weights to1.0. This means that all new new nodes start out as \nbeing redundant, if  you punished genomes for this then the new node \nwould likely be lost by the next generation and we wouldn&#39;t get chance \nto make any new connections to it.\n\nOne possibility I tried was that of a stepped punishment, so you would \npunish for, say, every 10 nodes and/or connections. This gives the \nnetwork the freedom to explore networks with 10 nodes or less, but just \nmoves the problem along to a later point - you will never evolve \nnetworks with more than 10 nodes since you need that 11th node to become \nimmediately beneficial otherwise it will not be selected fro the next \ngeneration.\n\n&gt;Or in the early phases when no specimen has yet even approached \n&gt;a solution.\n&gt;\n&gt;Also, wouldn&#39;t it be true that irrelevant topology would tend to &#39;remove&#39; \n&gt;itself by means of low weights?  Any random mutation that increased the \n&gt;weights of irrelevant topology would decrease fitness, right? \n&gt;\nYes but as you say this can become very computationally inefficient \nsince we might be making perfectly good mutations elsewhere in the \nnetwork but they are getting cancelled out by pesky redundant \nconnections that keep getting set to non-zero values.\n\n&gt;On the other hand, there is &#39;irrelevant&#39; and then there is &#39;excessive.&#39;  For \n&gt;example, full interconnection with a large number of hidden nodes may be \n&gt;overkill for a particular problem.  But how would you identify the \n&gt;&#39;irrelevant&#39; nodes?  Since each one contributes to the solution (if the \n&gt;weights are right), you can&#39;t drop any.\n&gt;\n&gt;  \n&gt;\nYes and no. Neural nets are known for their robustness and inherent \nredundancy - in a fully connected network you can normally chop out a \nconnection and still maintain most of the functionality - within NEAT we \ncould then (theoretically) keep searching and adjusting the weights of \nthe remaining connections to make up the for the loss.\n\nColin\n\n\n"}}