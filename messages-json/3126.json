{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":32323338,"authorName":"Stephen Waits","from":"Stephen Waits &lt;steve@...&gt;","profile":"stevewaits","replyTo":"LIST","senderId":"khz2EimRhseJA9_unij2JzwAjKfGQAdQPyU6fJcab0wIYMyd2mTZhE9QrrFkXkg1ZHSMWQpbJSt1ryrExQqnS8_0cXIILg","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Re: [neat] Re: HyperNEAT release site change and more info","postDate":"1176389891","msgId":3126,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNFRDlBNDFGLURGMEYtNDFGOS1BMzIxLUUyRDgyODVFOUYzNEB3YWl0cy5uZXQ+","inReplyToHeader":"PGV2bGJtZStlc2thQGVHcm91cHMuY29tPg==","referencesHeader":"PGV2bGJtZStlc2thQGVHcm91cHMuY29tPg=="},"prevInTopic":3125,"nextInTopic":3127,"prevInTime":3125,"nextInTime":3127,"topicId":3121,"numMessagesInTopic":16,"msgSnippet":"... But recurrent connections just work , right?  I think so anyway. Nodes do not need to remember a prior activation.  Instead, each node must simply store","rawEmail":"Return-Path: &lt;steve@...&gt;\r\nX-Sender: steve@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 91171 invoked from network); 12 Apr 2007 15:25:52 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m49.grp.scd.yahoo.com with QMQP; 12 Apr 2007 15:25:52 -0000\r\nReceived: from unknown (HELO mx.waits.net) (66.27.52.246)\n  by mta11.grp.scd.yahoo.com with SMTP; 12 Apr 2007 15:25:52 -0000\r\nReceived: from mx.waits.net (localhost [127.0.0.1])\n\tby dspam.waits.net (Postfix) with ESMTP id 4E7CE2AB09\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 12 Apr 2007 07:58:15 -0700 (PDT)\r\nReceived: from [192.168.0.192] (unknown [192.168.0.192])\n\tby mx.waits.net (Postfix) with ESMTP id DB32E2AB05\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 12 Apr 2007 07:58:14 -0700 (PDT)\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nIn-Reply-To: &lt;evlbme+eska@...&gt;\r\nReferences: &lt;evlbme+eska@...&gt;\r\nContent-Type: multipart/alternative; boundary=Apple-Mail-12-514196328\r\nMessage-Id: &lt;3ED9A41F-DF0F-41F9-A321-E2D8285E9F34@...&gt;\r\nDate: Thu, 12 Apr 2007 07:58:11 -0700\r\nTo: neat@yahoogroups.com\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-CLAMAV-Result: Clean\r\nX-DSPAM-Result: Spam\r\nX-DSPAM-Confidence: 0.4925\r\nX-DSPAM-Probability: 0.9971\r\nX-DSPAM-Signature: 461e490f111276712113186\r\nX-DSPAM-Factors: 15,\n\tSteve, 0.00032,\n\twrote, 0.00041,\n\tborder, 0.99645,\n\tupdate, 0.00386,\n\tUpdate, 0.00395,\n\tAM, 0.00421,\n\tconnections, 0.00536,\n\tin, 0.99372,\n\tone, 0.99288,\n\tsize, 0.99235,\n\twhite, 0.99000,\n\tapple, 0.99000,\n\tnone, 0.99000,\n\tspacing+normal, 0.99000,\n\ttext+size, 0.99000\r\nX-eGroups-Msg-Info: 2:3:4:0\r\nFrom: Stephen Waits &lt;steve@...&gt;\r\nSubject: Re: [neat] Re: HyperNEAT release site change and more info\r\nX-Yahoo-Group-Post: member; u=32323338; y=5lQf2HypVSCnIhbEts6wSEbFq_91iaUZqzBYbZe-DyyhkHEEjw\r\nX-Yahoo-Profile: stevewaits\r\n\r\n\r\n--Apple-Mail-12-514196328\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/plain;\n\tcharset=US-ASCII;\n\tdelsp=yes;\n\tformat=flowed\r\n\r\n\nOn Apr 12, 2007, at 6:20 AM, Jason Gauci wrote:\n\n&gt; I think that the\n&gt; reason why I don&#39;t set it up so my nodes are only evaluated once is\n&gt; because it becomes more difficult as you add recurrent connections.\n\nBut recurrent connections &quot;just work&quot;, right?  I think so anyway.   \nNodes do not need to remember a prior activation.  Instead, each node  \nmust simply store an activation value.  Whether that activation is  \nfor the current or prior update depends on whether that Node has been  \nupdated.  Therefore, if you&#39;re updating a Node, and asks for the  \ncurrent activation from a node later in the update list, it&#39;s getting  \nthat node&#39;s prior activation.\n\nThis is important, as network evaluation is certainly the bottleneck  \nin any NEAT implementation (that&#39;s doing real work anyway).  If  \nyou&#39;re going to do work hard to make networks evaluate fast, there&#39;s  \ngoing to be no bigger gain than simply reducing the number of updates  \nto each network.\n\nAn example...\n\nLet&#39;s imagine a simple network.  It has one Input (I), one Output  \n(O), and two Hidden nodes (H0, H1).  We&#39;ll connect the network thusly:\n\n     I =&gt; H0\n     I =&gt; H1\n     H0 =&gt; O\n     H1 =&gt; H0 # recurrent\n     H1 =&gt; O\n\nIn words, the input node connects to both hidden nodes.  The first  \nhidden node connects to the output.  The second hidden node connects  \nto the first hidden node (recurrent) and the output.\n\nLet&#39;s pretend Nodes are objects, and have a GetActivation method and  \nan Update method.  Update sums all of the inputs and sets an  \nactivation member variable in the Node.\n\nWhen we sort this network (based on the digraph), we get:\n\n     [I, H0, H1, O]\n\nNow let&#39;s step through the network update.  We&#39;ll assume that all  \nconnection weights are 1.0, for the sake of clarity..\n\n     I.SetActivation = input data\n\n     H0.Update\n         activation = I.GetActivation + H1.GetActivation (note: H1  \nhasn&#39;t been Update&#39;d yet)\n     H1.Update\n         activation = I.GetActivation\n     O.Update\n         activation = H0.GetActivation + H1.GetActivation\n\n     result = O.GetActivation\n\nDoesn&#39;t this work?  Or, am I missing something?\n\n--Steve\r\n--Apple-Mail-12-514196328\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=ISO-8859-1\r\n\r\n&lt;HTML&gt;&lt;BODY style=3D&quot;word-wrap: break-word; -khtml-nbsp-mode: space; -khtml=\r\n-line-break: after-white-space; &quot;&gt;&lt;BR&gt;&lt;DIV&gt;&lt;DIV&gt;On Apr 12, 2007, at 6:20 AM=\r\n, Jason Gauci wrote:&lt;/DIV&gt;&lt;BR class=3D&quot;Apple-interchange-newline&quot;&gt;&lt;BLOCKQUO=\r\nTE type=3D&quot;cite&quot;&gt;&lt;SPAN class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse:=\r\n separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helve=\r\ntica; font-size: 12px; font-style: normal; font-variant: normal; font-weigh=\r\nt: normal; letter-spacing: normal; line-height: normal; text-align: auto; -=\r\nkhtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-=\r\nadjust: auto; text-transform: none; orphans: 2; white-space: normal; widows=\r\n: 2; word-spacing: 0px; &quot;&gt;&lt;SPAN class=3D&quot;Apple-style-span&quot; style=3D&quot;font-fa=\r\nmily: Georgia; font-size: 13px; line-height: 15px; &quot;&gt;I think that the &lt;/SPA=\r\nN&gt;&lt;BR style=3D&quot;font-family: Georgia; font-size: 13px; line-height: 15px; &quot;&gt;=\r\n&lt;SPAN class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Georgia; font-size: =\r\n13px; line-height: 15px; &quot;&gt;reason why I don&#39;t set it up so my nodes are onl=\r\ny evaluated once is &lt;/SPAN&gt;&lt;BR style=3D&quot;font-family: Georgia; font-size: 13=\r\npx; line-height: 15px; &quot;&gt;&lt;SPAN class=3D&quot;Apple-style-span&quot; style=3D&quot;font-fam=\r\nily: Georgia; font-size: 13px; line-height: 15px; &quot;&gt;because it becomes more=\r\n difficult as you add recurrent connections. &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/BLOCKQUOTE&gt;&lt;/D=\r\nIV&gt;&lt;BR&gt;&lt;DIV&gt;But recurrent connections &quot;just work&quot;, right?=A0 I think so any=\r\nway.=A0 Nodes do not need to remember a prior activation.=A0 Instead, each =\r\nnode must simply store an activation value.=A0 Whether that activation is f=\r\nor the current or prior update depends on whether that Node has been update=\r\nd.=A0 Therefore, if you&#39;re updating a Node, and asks for the current activa=\r\ntion from a node later in the update list, it&#39;s getting that node&#39;s prior a=\r\nctivation.&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;This =\r\nis important, as network evaluation is certainly the bottleneck in any NEAT=\r\n implementation (that&#39;s doing real work anyway).=A0 If you&#39;re going to do w=\r\nork hard to make networks evaluate fast, there&#39;s going to be no bigger gain=\r\n than simply reducing the number of updates to each network.&lt;/DIV&gt;&lt;DIV&gt;&lt;BR =\r\nclass=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;An example...&lt;/DIV&gt;&lt;DIV&gt;&lt;BR cl=\r\nass=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;Let&#39;s imagine a simple network.=\r\n=A0 It has one Input (I), one Output (O), and two Hidden nodes (H0, H1).=A0=\r\n We&#39;ll connect the network thusly:&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-place=\r\nholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0I =3D&gt; H0&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0I =3D&gt; H1&lt;=\r\n/DIV&gt;&lt;DIV&gt;=A0=A0 =A0H0 =3D&gt; O&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0H1 =3D&gt; H0 # recurr=\r\nent&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0H1 =3D&gt; O&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-pla=\r\nceholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;In words, the input node connects to both hidden nodes=\r\n.=A0 The first hidden node connects to the output.=A0 The second hidden nod=\r\ne connects to the first hidden node (recurrent) and the output.&lt;/DIV&gt;&lt;DIV&gt;&lt;=\r\nBR class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;Let&#39;s pretend Nodes are obj=\r\nects, and have a GetActivation method and an Update method.=A0 Update sums =\r\nall of the inputs and sets an activation member variable in the Node.&lt;/DIV&gt;=\r\n&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;When we sort this net=\r\nwork (based on the digraph), we get:&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-pla=\r\nceholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0[I, H0, H1, O]&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-=\r\nblock-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;Now let&#39;s step through the network update.=A0=\r\n=A0We&#39;ll assume that all connection weights are 1.0, for the sake of clarit=\r\ny..&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0I.=\r\nSetActivation =3D input data&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placeholder=\r\n&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0H0.Update&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0=A0=A0 =A0activation =\r\n=3D I.GetActivation + H1.GetActivation (note: H1 hasn&#39;t been Update&#39;d yet)&lt;=\r\n/DIV&gt;&lt;DIV&gt;=A0=A0 =A0H1.Update&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0=A0=A0 =A0activation =3D =\r\nI.GetActivation&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0O.Update&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0=A0=A0 =A0=\r\nactivation =3D H0.GetActivation + H1.GetActivation&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;k=\r\nhtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;=A0=A0 =A0result =3D O.GetActivation&lt;/DI=\r\nV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;Doesn&#39;t this work?=\r\n=A0 Or, am I missing something?&lt;/DIV&gt;&lt;DIV&gt;&lt;BR class=3D&quot;khtml-block-placehol=\r\nder&quot;&gt;&lt;/DIV&gt;&lt;DIV&gt;--Steve&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;\r\n--Apple-Mail-12-514196328--\r\n\n"}}