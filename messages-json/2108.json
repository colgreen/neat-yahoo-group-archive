{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"paORO0CEBunBxX7S_fKeyX8jXDaLyJzV6aMzcA46xn-7pcOwPZrguJQBMGrFfM7JQelSBZe03XE-lLYrrr2RG4Xd73OWgc6aH6I","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Heap Selection","postDate":"1121684957","msgId":2108,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4wLjE0LjAuMjAwNTA1MTAxMTQ1MDIuMDNjNmQ0MzBAcG9wLm1haWwueWFob28uY28udWs+"},"prevInTopic":0,"nextInTopic":2132,"prevInTime":2107,"nextInTime":2109,"topicId":2108,"numMessagesInTopic":5,"msgSnippet":"Hi,\n\tThis is an idea I have had for some time and I m sharing it now so that I \ncan refer to it in later emails without explaining the whole thing from","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 21477 invoked from network); 18 Jul 2005 11:07:55 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m23.grp.scd.yahoo.com with QMQP; 18 Jul 2005 11:07:55 -0000\r\nReceived: from unknown (HELO smtp004.mail.ukl.yahoo.com) (217.12.11.35)\n  by mta2.grp.scd.yahoo.com with SMTP; 18 Jul 2005 11:07:55 -0000\r\nReceived: (qmail 90989 invoked from network); 18 Jul 2005 11:07:52 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp004.mail.ukl.yahoo.com with SMTP; 18 Jul 2005 11:07:51 -0000\r\nMessage-Id: &lt;6.2.0.14.0.20050510114502.03c6d430@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.0.14\r\nDate: Mon, 18 Jul 2005 12:09:17 +0100\r\nTo: neat@yahoogroups.com\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Heap Selection\r\nX-Yahoo-Group-Post: member; u=7192225; y=lqGUNgwT4rsqr6YDDsJqHO-H2eQOoNVbzI2VHFDvuJ_XUio91w\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi,\n\tThis is an idea I have had for some time and I&#39;m sharing it now so that I \ncan refer to it in later emails without explaining the whole thing from \nscratch.\n\n\tI didn&#39;t get any chance to test it yet :) -- but I plan to.\n\n\tThis is basically an alternative to speciation.  The idea being to do away \nwith the arbitrary aspects (number of species, which precise species an \nindividual belongs to) whilst keeping the benefit of preserving population \ndiversity.\n\n\tThe idea is to structure the population as a heap.\n\n-- explanation of heap data structure, skip if you know --&gt;\n\n   A heap is a data structure arranged as a binary tree, where each item \nhas two children (which may be empty).  Heaps are often used to order data, \nby maintaining a relationship between parent and child.  They are \nefficient, because a complete ordering can be achieved making only \ncomparisons between parent and child and not between siblings or cousins or \nmore remote items, thus if we have sorted a heap into descending order, we \nmight have:\n\nhttp://tinypic.com/518yz7\n\n\t[[There is a really easy representation for a heap, in the form of a \nlinear array.  The array index simply relates parent and children, thus if \na parent has an index i (zero based indexing) it&#39;s two children are:\n\n2 * i, and,\n2 * i + 1]]\n\n\tIf one wished to insert, say an 8, one would attach it as a child of any \nbottom row element, say the 3.  Then one compares it with its parent, and \nif the sort is violated the two are swapped.  This is then repeated with \nits new parent, until the sort is not violated.\n\n\tIf one wishes to remove an item, one removes it and then examines its two \nchildren.  One will be suitable as a parent for the other and that one is \nmoved up into the empty slot.  The empty child slot is then filled by doing \nthe same with its children.\n\n&lt;-- end of explanation of heap data structure --\n\n\tThe way I see this working as a population is to keep a heap of \nindividuals, sorted by fitness (this will work for explicit fitnesses and \nalso for co-evolution if the comparison can be between [only selected] \npairs of individuals in one population).  Fitness comparisons only need to \nbe done between parent and child (note these terms here refer to location \nin the tree, not any sort of heredity).  When a child proves fitter than \nits parent, the two are swapped (obviously the test only need be done when \none has changed).  This leads to a structure where every sub-tree in the \nheap is headed by the fittest member of that sub-tree.  Each sub-tree forms \na species (and the sub-trees within it form sub-species of it).  Diversity \nis preserved because a newly created fitter individual moves up the tree, \npushing the previous occupants down but keeping them in the same \nsub-tree.  The individual moves up until it meets a fitter individual and \nthem stops, thus redefining the maximum fitness of precisely the correct \n&quot;species&quot; (or fraction of the population).\n\n\tThe other issue is the generation of diversity.  It is necessary to place \nnew individuals into the correct species.  To achieve this I propose either:\n\n1) when a new individual is created it has one or more parents (if it has \nzero, and is a completely newly seeded mutation, then you can insert it at \nany leaf).  Insert the new individual at any leaf position in the sub-tree \nbelow one parent (thus inserting it somewhere into a same &quot;species&quot; as a \nparent).  This will lead to each sub-tree being to some extent, related to \nits top member.  The down-side of this is that it will might eliminate \ndiversity in the sub-trees too rapidly, so see the next idea.\n\n2) for every individual, store the track it followed when it was moved from \nthe base to its current height.  When applying idea 1, insert the offspring \nof each individual mostly at the same start point that the individual had \nand just occasionally insert the individual elsewhere in the individual&#39;s \nsub-tree.  Thus each individual is at the head of a &quot;stack&quot; that it is \nclosely related too, but also its sub-tree contains a selection of less \nrelated species (all competing to try and push it off the top spot).\n\n\tIan Badcoe\n\nIn fifteen minutes, everybody will be in the future.\n\n\n\n\t\n\t\n\t\t\n___________________________________________________________ \nYahoo! Messenger - NEW crystal clear PC to PC calling worldwide with voicemail http://uk.messenger.yahoo.com\r\n\n"}}