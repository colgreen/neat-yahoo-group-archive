{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"qIxSJeX9OxdZM6OKthvWRPluJVBhtL8QCFZ0_09PuBKGgoyK4VL_q3OGzpTMM4kM0_SsK9o6iw6rPMmQ-l6nqJN_ThMz1gv8847jcfFV-Hmq","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: rtNEAT: max_depth() in an endless loop","postDate":"1225690382","msgId":4400,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdlbTJlZSsybjhuQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGdlam40aSttMnZwQGVHcm91cHMuY29tPg=="},"prevInTopic":4397,"nextInTopic":4401,"prevInTime":4399,"nextInTime":4401,"topicId":4396,"numMessagesInTopic":16,"msgSnippet":"Yes I have heard about this problem coming up in the XOR experiment. Most neuroevolution experiments are not classification experiments (i.e. they don t have a","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 66218 invoked from network); 3 Nov 2008 05:33:03 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m54.grp.scd.yahoo.com with QMQP; 3 Nov 2008 05:33:03 -0000\r\nX-Received: from unknown (HELO n45d.bullet.mail.sp1.yahoo.com) (66.163.169.159)\n  by mta16.grp.scd.yahoo.com with SMTP; 3 Nov 2008 05:33:03 -0000\r\nX-Received: from [69.147.65.171] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 03 Nov 2008 05:33:03 -0000\r\nX-Received: from [66.218.67.195] by t13.bullet.mail.sp1.yahoo.com with NNFMP; 03 Nov 2008 05:33:03 -0000\r\nDate: Mon, 03 Nov 2008 05:33:02 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gem2ee+2n8n@...&gt;\r\nIn-Reply-To: &lt;gejn4i+m2vp@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: rtNEAT: max_depth() in an endless loop\r\nX-Yahoo-Group-Post: member; u=54567749; y=XB6f0hYDvhW7UsAUa_EbByygbVNMVnlSFSc8U-y3rnUkX8rLUlMY\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nYes I have heard about this problem coming up in the XOR experiment. \nMost =\r\nneuroevolution experiments are not classification experiments\n(i.e. they do=\r\nn&#39;t have a &quot;final&quot; output), or they allow recurrent\nconnections, and theref=\r\nore do not require depth to be computed. \nTherefore, this problem will not =\r\ncome up in most expeirments.  \n\nHowever, XOR is a benchmark classification =\r\nproblem that is only meant\nto be attempted by feedforward networks so it ne=\r\neds to have depth\ncomputed.  It appears that my attempts to keep the networ=\r\nk feedforward\nin all cases is not perfect, so sometimes when a loop arises,=\r\n it sends\nthe depth computation into an infinite loop.  I have not had time=\r\n to\nthink about the most elegant solution to this problem: Maybe it should\n=\r\nbe a stronger check on recurrence, perhaps entirely different from how\nit w=\r\norks now.  Or perhaps it should be a fixed abort-iteration for the\ndepth ro=\r\nutine.  \n\nIf someone does feel they have an elegant bit of code to address =\r\nthe\nissue, I will be happy to take a look.  \n\nIn any case, it should not ca=\r\nuse serious problems in general.  I\napologize for any inconvenience.\n\nken\n\n=\r\n--- In neat@yahoogroups.com, &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\nwrot=\r\ne:\n&gt;\n&gt; Hi Cesar,\n&gt; \n&gt; I know of this problem. It is obvious that depth cann=\r\not be determined \n&gt; in a recurrent network, but in general it depends, what=\r\n is your way to \n&gt; handle the situation. Try improving the add_link() code =\r\nso that the \n&gt; right nodes are picked up when trying to add a forward or a =\r\nrecurrent \n&gt; connection. This is a good solution but in general the problem=\r\n with \n&gt; looped networks cannot be avoided. Suppose you have 3 hidden nodes=\r\n, A, \n&gt; B, and C. If you link these like A-&gt;B, B-&gt;C, C-&gt;A, it is a loop in =\r\nthe \n&gt; network, even though all connections are meant to be forward. \n&gt; The=\r\n best solution in my opinion is to put a limit on the possible \n&gt; depth, sa=\r\ny 32, if the depth exceeds 32, quit the recursion and \n&gt; activate the netwo=\r\nrk 32 times. It slows things down but at least it \n&gt; will not hurt evolutio=\r\nn as if you penalize looped networks. \n&gt; \n&gt; Peter \n&gt; \n&gt; --- In neat@yahoogr=\r\noups.com, &quot;Cesar G. Miguel&quot; &lt;cesar.gomes@&gt; \n&gt; wrote:\n&gt; &gt;\n&gt; &gt; Hi all,\n&gt; &gt; \n&gt;=\r\n &gt; I&#39;m not sure if someone else has notice this &quot;bug&quot; in rtNEAT, but \n&gt; the=\r\n\n&gt; &gt; max_depth() method in network.cpp has the potential to be forever in\n&gt;=\r\n &gt; loop if a recurrent link is added in a feedforward topology, e.g., \n&gt; th=\r\ne\n&gt; &gt; XOR experiment (and that can happen even when the recur_only_prob\n&gt; &gt;=\r\n parameter is set to zero). A real example is attached.\n&gt; &gt; \n&gt; &gt; It seems t=\r\no happen in 1 out of 10 runs. The max_depth() method calls\n&gt; &gt; depth() in n=\r\nnode.cpp, which should return the max depth of that \n&gt; node.\n&gt; &gt; But it can=\r\n get trapped in a loop if any recurrent link is present \n&gt; (as\n&gt; &gt; it is co=\r\nmmented out in the source: DEPTH NOT DETERMINED FOR NETWORK\n&gt; &gt; WITH LOOP).=\r\n\n&gt; &gt; \n&gt; &gt; For those cases I have to force a return if an endless loop is\n&gt; =\r\n&gt; detected and then set the chromosome&#39;s fitness to zero in order to\n&gt; &gt; co=\r\nntinue.\n&gt; &gt; \n&gt; &gt; Has anyone dealed with that before?\n&gt; &gt; \n&gt; &gt; []&#39;s\n&gt; &gt; Cesa=\r\nr\n&gt; &gt;\n&gt;\n\n\n\n"}}