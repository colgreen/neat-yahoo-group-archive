{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":349828285,"authorName":"solifos","from":"&quot;solifos&quot; &lt;solifos@...&gt;","profile":"solifos","replyTo":"LIST","senderId":"VpItbfVfdeLSeqINfWgkwksvpigbJBaAWq4qpWDJQLOk3fIPca6QEt4Ag0hse9eZdjfjhri8r5YhGEadCS-gL1Exouk","spamInfo":{"isSpam":false,"reason":"6"},"subject":"great pole balancing performance, poor XOR performance","postDate":"1221513077","msgId":4320,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdhbWoxbCtldGpvQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":4321,"prevInTime":4319,"nextInTime":4321,"topicId":4320,"numMessagesInTopic":2,"msgSnippet":"Hi all, I m interested in applying NEAT to the development of a controller for a simulated biped robot. So to get my feet wet, I ve programmed NEAT in Matlab.","rawEmail":"Return-Path: &lt;solifos@...&gt;\r\nX-Sender: solifos@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 56915 invoked from network); 15 Sep 2008 21:11:19 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m57.grp.scd.yahoo.com with QMQP; 15 Sep 2008 21:11:19 -0000\r\nX-Received: from unknown (HELO n14a.bullet.sp1.yahoo.com) (69.147.64.115)\n  by mta15.grp.scd.yahoo.com with SMTP; 15 Sep 2008 21:11:19 -0000\r\nX-Received: from [69.147.65.149] by n14.bullet.sp1.yahoo.com with NNFMP; 15 Sep 2008 21:11:19 -0000\r\nX-Received: from [66.218.66.77] by t9.bullet.mail.sp1.yahoo.com with NNFMP; 15 Sep 2008 21:11:19 -0000\r\nDate: Mon, 15 Sep 2008 21:11:17 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gamj1l+etjo@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;8-8778162303-4008573479=:1&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;solifos&quot; &lt;solifos@...&gt;\r\nSubject: great pole balancing performance, poor XOR performance\r\nX-Yahoo-Group-Post: member; u=349828285; y=pNQE265u7J0ic54CCiclVBNCVW_2v305Q3wrnd2ltUu2Dw\r\nX-Yahoo-Profile: solifos\r\n\r\n\r\n--8-8778162303-4008573479=:1\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi all,\n\nI&#39;m interested in applying NEAT to the development of a controller=\r\n for a\nsimulated biped robot. So to get my feet wet, I&#39;ve programmed NEAT i=\r\nn\nMatlab. I&#39;ve tested it on XOR, double pole balancing with velocity, and\nd=\r\nouble pole balancing without velocity. I get excellent results on the\nlatte=\r\nr two problems (actually evolving solutions faster than Ken\nreported; more =\r\non that in a future post), but XOR results are not so\ngood. It&#39;s able to so=\r\nlve XOR within 100 generations in only about half\nof the runs. I&#39;ve used th=\r\ne exact same parameters as Ken, and implemented\nNEAT following his descript=\r\nion as closely as possible (though I&#39;ve not\nthoroughly inspected his C++ co=\r\nde yet). The fitness function is: fitness\n=3D (4-sum(error))^2, where &#39;erro=\r\nr&#39; is a vector containing the absolute\ndistance from the correct output for=\r\n each input pattern. Recurrent\nconnections are disabled. (One thing that I&#39;=\r\nm not clear on is how to set\nthe initial weights at the start of a run. Wha=\r\nt range is used?)\n\nHere&#39;s a speciation plot of a typical run where no solut=\r\nion is found in\n100 generations:\n\nhttp://img185.imageshack.us/my.php?image=\r\n=3Dxorneatnu7.jpg\n&lt;http://img185.imageshack.us/my.php?image=3Dxorneatnu7.jp=\r\ng&gt;\n\nNotice that the number of species quickly grows to about 50 by\ngenerati=\r\non 23. Also, about every 20 generations after that, all but the\ntop two spe=\r\ncies are removed due to stagnant max population fitness\n(consistent with Ke=\r\nn&#39;s implementation, I believe). It seems to me that\nway too many species ar=\r\ne forming. I&#39;ve implemented dynamic thresholding\nwhich helps keep the numbe=\r\nr of species to around 20, but performance is\nstill well below Ken&#39;s (which=\r\n is 32 generations on average).\n\nBy the way, I ran Christian Mayr&#39;s Matlab =\r\nNEAT several times, and it\nalso seems to take significantly more generation=\r\ns to solve XOR on\naverage (about 50 is typical, and more than 100 is not ra=\r\nre) and ends up\nwith significantly more than 2.35 hidden nodes (about 8 see=\r\nms typical).\nAlso, in his implementation, species will oftentimes survive f=\r\nor only a\nsingle generation, which seems strange to me. Assuming the averag=\r\ne\nfitness of a given species doesn&#39;t become *extremely* low and there\naren&#39;=\r\nt too many species in the population, it should produce well above\na single=\r\n offspring each generation and thus survive for at least 15\ngenerations (th=\r\ne &#39;maximum stagnation&#39; setting). Am I missing something\nhere? I ask because=\r\n the number of species is kept to a reasonable level\nin his code.\n\nAny sugg=\r\nestions? Note that I&#39;d like to continue using Ken&#39;s original\nparameters set=\r\ntings to ensure that my code is reasonably close to the\noriginal NEAT.\n\nTha=\r\nnks for any help!\nJoe\n\r\n--8-8778162303-4008573479=:1\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi all,&lt;br&gt;&lt;br&gt;I&#39;m interested in applying NEAT to the development of a cont=\r\nroller for a simulated biped robot. So to get my feet wet, I&#39;ve programmed =\r\nNEAT in Matlab. I&#39;ve tested it on XOR, double pole balancing with velocity,=\r\n and double pole balancing without velocity. I get excellent results on the=\r\n latter two problems (actually evolving solutions faster than Ken reported;=\r\n more on that in a future post), but XOR results are not so good. It&#39;s able=\r\n to solve XOR within 100 generations in only about half of the runs. I&#39;ve u=\r\nsed the exact same parameters as Ken, and implemented NEAT following his de=\r\nscription as closely as possible (though I&#39;ve not thoroughly inspected his =\r\nC++ code yet). The fitness function is: fitness =3D (4-sum(error))^2, where=\r\n &#39;error&#39; is a vector containing the absolute distance from the correct outp=\r\nut for each input pattern. Recurrent connections are disabled. (One thing t=\r\nhat I&#39;m not clear on is how to set the initial weights at the start of a ru=\r\nn. What range is used?)&lt;br&gt;&lt;br&gt;Here&#39;s a speciation plot of a typical run wh=\r\nere no solution is found in 100 generations:&lt;br&gt;&lt;br&gt;&lt;a href=3D&quot;http://img18=\r\n5.imageshack.us/my.php?image=3Dxorneatnu7.jpg&quot;&gt;http://img185.imageshack.us/=\r\nmy.php?image=3Dxorneatnu7.jpg&lt;/a&gt;&nbsp;&lt;br&gt;&lt;br&gt;Notice that the number of sp=\r\necies quickly grows to about 50 by generation 23. Also, about every 20 gene=\r\nrations after that, all but the top two species are removed due to stagnant=\r\n max population fitness (consistent with Ken&#39;s implementation, I believe). =\r\nIt seems to me that way too many species are forming. I&#39;ve implemented dyna=\r\nmic thresholding which helps keep the number of species to around 20, but p=\r\nerformance is still well below Ken&#39;s (which is 32 generations on average).&lt;=\r\nbr&gt;&lt;br&gt;By the way, I ran Christian Mayr&#39;s Matlab NEAT several times, and it=\r\n also seems to take significantly more generations to solve XOR on average =\r\n(about 50 is typical, and more than 100 is not rare) and ends up with signi=\r\nficantly more than 2.35 hidden nodes (about 8 seems typical). Also, in his =\r\nimplementation, species will oftentimes survive for only a single generatio=\r\nn, which seems strange to me. Assuming the average fitness of a given speci=\r\nes doesn&#39;t become *extremely* low and there aren&#39;t too many species in the =\r\npopulation, it should produce well above a single offspring each generation=\r\n and thus survive for at least 15 generations (the &#39;maximum stagnation&#39; set=\r\nting). Am I missing something here? I ask because the number of species is =\r\nkept to a reasonable level in his code.&lt;br&gt;&lt;br&gt;Any suggestions? Note that I=\r\n&#39;d like to continue using Ken&#39;s original parameters settings to ensure that=\r\n my code is reasonably close to the original NEAT.&lt;br&gt;&lt;br&gt;Thanks for any he=\r\nlp!&lt;br&gt;Joe\n\r\n--8-8778162303-4008573479=:1--\r\n\n"}}