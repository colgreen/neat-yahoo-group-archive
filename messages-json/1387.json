{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"gIjM-W185_RFx9Tz8a9GtVNwmakcNEwjPqaGYUeF5z--2nRsrn6bL2k1QXgfAU8xVbiWJscbCJ6TDdI6FsBloZRDm7v5UTYmRw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Performance comparison of C++ vs C#","postDate":"1092345091","msgId":1387,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxMUJERDAzLjkwODA3MDRAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PEJBWTI0LURBVjVuTE95RGM0MVcwMDAwNTZmNEBob3RtYWlsLmNvbT4=","referencesHeader":"PEJBWTItRjE0Wld3OGdSenBQV3kwMDAzNDdmOUBob3RtYWlsLmNvbT4gPDYuMS4yLjAuMC4yMDA0MDgxMjExMTgzMS4wMjU1YzA2OEBwb3AubWFpbC55YWhvby5jby51az4gPEJBWTI0LURBVjVuTE95RGM0MVcwMDAwNTZmNEBob3RtYWlsLmNvbT4="},"prevInTopic":1384,"nextInTopic":1388,"prevInTime":1386,"nextInTime":1388,"topicId":1381,"numMessagesInTopic":6,"msgSnippet":"... Yep, that s me. ... Good question, this was also my main point of concern when I was deciding what language to use. From my own tests and from searching","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 81186 invoked from network); 12 Aug 2004 21:11:37 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m2.grp.scd.yahoo.com with QMQP; 12 Aug 2004 21:11:37 -0000\r\nReceived: from unknown (HELO pengo.systems.pipex.net) (62.241.160.193)\n  by mta4.grp.scd.yahoo.com with SMTP; 12 Aug 2004 21:11:37 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby pengo.systems.pipex.net (Postfix) with ESMTP id 58CAC4C0018B\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 12 Aug 2004 22:11:31 +0100 (BST)\r\nMessage-ID: &lt;411BDD03.9080704@...&gt;\r\nDate: Thu, 12 Aug 2004 22:11:31 +0100\r\nUser-Agent: Mozilla Thunderbird 0.7.1 (Windows/20040626)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;BAY2-F14ZWw8gRzpPWy000347f9@...&gt; &lt;6.1.2.0.0.20040812111831.0255c068@...&gt; &lt;BAY24-DAV5nLOyDc41W000056f4@...&gt;\r\nIn-Reply-To: &lt;BAY24-DAV5nLOyDc41W000056f4@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.193\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Performance comparison of C++ vs C#\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nUmer Iqbal wrote:  \n\n&gt; I would like to get some feedback from people who have made and worked \n&gt; on SharpNEAT.\n\nYep, that&#39;s me.\n\n&gt; How does performance (speed and memory) differ between C# and C++?\n\nGood question, this was also my main point of concern when I was \ndeciding what language to use. From my own tests and from searching the \nweb I came up with a ball-park figure of roughtly 80% - you can expect \nan algorithm that is heavily CPU dependent to run at about 80% the speed \nof an equivalent algorithm written in unmanaged C++ and compiled with a \nmodern compiler with full optimisation. This isn&#39;t the full story \nthough, and this is something I can get quite passionate about so I hope \nyou don&#39;t mind if I go into more detail :)\n\nI think C# may have aquired some bad (and wrong) press with regards to \nperformance, and Mitchells suggestion of a 10-fold slowdown  re-inforce \nmy belief. I can only assume that this is because, like Java, C# \ncompiles to an intermediate abstract instruction set similar to Java&#39;s \nbytecode. Also C# is also a managed language and therefore handles stuff \nlike memory allocation and garbage collection, and severely limits use \nof pointers, etc.\n\nSome of the problem therefore comes from Java&#39;s poor performance in it&#39;s \nearly days, it didn&#39;t compile to native CPU instructions, and the Java \nengine executed the the byte code by interpreting it. Modern Java \nVirtual machines though use Just-In-Time(JIT) compilers to convert the \nbyte-code into native CPU instructions and a lot of work has gone into \ncompiler performance optimizations. As such the gap between optimised \nC++ and optimised Java is very narrow.\n\nC# is relatively new but MS learned a *lot* from Java. All .Net code is \npasssed through a JIT compiler, there is no interpeter and MS have a lot \nof experience with optimized compilers.\n\nC# (and Java) also have a couple of performance benefits over unmanaged \nC++.\n\n1) A JIT compiler knows precisely what CPU architecture it is compiling \ntoo, it can therefore make optimisation to utilise extra instructions \nand registers.\n\nand 2) Memory management and garbage collection have far less overhead \nthan you might think, especially if you optimize code so that it is \nconducive to the GCs operation. Note that unmanaged languages also have \na memory management overhead, which is the operating system&#39;s \nresponsibility, and therefore is often forgotten about. e.g. when you \ncall malloc(), free(), new and delete the OS must keep track of what \nmemory is allocated. Often the allocation table gets fragmented and this \ncan cause real problems since memory cannot be defragmented because that \nwould invalidate any memory pointers!  Managed code *is* able to halt \nprograms and defragment memory, and a defragmented allocation table is \nfaster for finding new free memory blocks.\n\n\nAnother major point I want to make is that performance is largely a \nfunction of the code, not what language it is written in. Sloppy C++ \nwill run slower than well written C#. Also consider the neural network \ncode optimizations I worked on recently, the code was clear, well \nwritten and (I thought) nice tight optimal code - which it was. But I \nwas able to achieve an 8x speed increase by considering Ian Badcoes \nsuggestions about CPU caches and re-ordering the sequence of execution.\n\nAlso consider that C#is likely to get faster in 12 months time when C# \nV2.0 is released proper. Apart from any further compiler optimizations, \nV2 will support the equivalent of C++ templates. Currently this is a \nbug-bear of mine because with templates you are forced to do a lost of \ncasting, it&#39;s not a major overhead but it&#39;s probably a big chunk of that \nmissing 20% between C# and C++.\n\n&gt; I want to use C# because I hear it cuts down dev time, but would C# \n&gt; slow down my application?\n\nUsing a managed language such as JAva or C# does cut down on dev time. \nYou also have the benfit of some very large and useful class frameworks.\n\nHope that was helpful.\n\n[Steeping down from soapbox]\n\nColin\n\n\n\n"}}