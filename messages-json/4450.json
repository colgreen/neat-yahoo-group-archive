{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"9Fe8r_z1vZQvFtT4M36bHdN29s7uiSPCU0RQEx2Gy_9cBFrz-FO6HhNuhfeESJvGrkOKSjD8OHnLKaPd2Tc5BFy-nB2jpYjEenI4UY23hdxYjmVTyOs","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: An improvement over object evolution with CPPNs","postDate":"1226614973","msgId":4450,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdmaTlidCtlZmFqQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGdmaThxMStkNHFhQGVHcm91cHMuY29tPg=="},"prevInTopic":4447,"nextInTopic":4452,"prevInTime":4449,"nextInTime":4451,"topicId":4444,"numMessagesInTopic":14,"msgSnippet":"The executable is located in the Files section with the name DCPPN_3.exe . Yes I have the same opinion, that the links should be created after development.","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 12861 invoked from network); 13 Nov 2008 22:22:54 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m54.grp.scd.yahoo.com with QMQP; 13 Nov 2008 22:22:54 -0000\r\nX-Received: from unknown (HELO n44a.bullet.mail.sp1.yahoo.com) (66.163.168.138)\n  by mta15.grp.scd.yahoo.com with SMTP; 13 Nov 2008 22:22:54 -0000\r\nX-Received: from [69.147.65.150] by n44.bullet.mail.sp1.yahoo.com with NNFMP; 13 Nov 2008 22:22:54 -0000\r\nX-Received: from [66.218.66.84] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 13 Nov 2008 22:22:54 -0000\r\nDate: Thu, 13 Nov 2008 22:22:53 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gfi9bt+efaj@...&gt;\r\nIn-Reply-To: &lt;gfi8q1+d4qa@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: Re: An improvement over object evolution with CPPNs\r\nX-Yahoo-Group-Post: member; u=283334584; y=3yHUzI5odSlXNFTOJf7JPgs-34B7tM8pa6RFRRBD9_1_6uYo7fKfgE4iUw\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nThe executable is located in the Files section with the name \n&quot;DCPPN_3.exe&quot;=\r\n.\n\nYes I have the same opinion, that the links should be created after \ndev=\r\nelopment. But how should I deal with the &quot;coordinate explosion&quot; \nthen? Beca=\r\nuse I don&#39;t really know how big the phenotype can get. There \nis some limit=\r\n, of course, but I am looking for an elegant way to solve \nthe problem. Res=\r\ncaling to [-1..1] is more of a hack than a solution.\n\nPeter\n\n--- In neat@ya=\r\nhoogroups.com, &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt; wrote:\n&gt;\n&gt; Peter, sounds in=\r\nteresting.  I&#39;ll be interested to see the executable\n&gt; version to get an in=\r\ntuition of the kinds of structures your method\n&gt; creates.  \n&gt; \n&gt; About the =\r\nlinks:  My guess is that it&#39;s best to compute their values\n&gt; at the end of =\r\ndevelopment since that is the &quot;final geometry&quot; of the\n&gt; brain that I believ=\r\ne makes sense to exploit.  In other words, it \ngives\n&gt; the brain the opport=\r\nunity to exploit the changes occur over\n&gt; development.  Otherwise, it would=\r\n seem that those changes and the\n&gt; genes that encode them are not really be=\r\ning used for any purpose.\n&gt; \n&gt; ken\n&gt; \n&gt; --- In neat@yahoogroups.com, &quot;petar=\r\n_chervenski&quot; &lt;petar_chervenski@&gt;\n&gt; wrote:\n&gt; &gt;\n&gt; &gt; Hi all!\n&gt; &gt; \n&gt; &gt; For thos=\r\ne of you who are not familiar with this particular \nsubject, it \n&gt; &gt; is abo=\r\nut physical object evolution with CPPNs. There are some \nproblems \n&gt; &gt; when=\r\n trying to use CPPNs directly to map onto 2/3D objects with \n&gt; &gt; finite, th=\r\nough variable (among individuals) size. I am \nparticularly\n&gt; interested in =\r\nthis issue because it also holds the key to the \n&gt; &gt; automatic generation o=\r\nf HyperNEAT substrates as well. And perhaps \nit \n&gt; &gt; may open up new ways t=\r\no have content generation in games, too. And \n&gt; &gt; Artificial Life, of cours=\r\ne.\n&gt; &gt; \n&gt; &gt; I remember that Ken suggested that animal morphologies and such=\r\n \nthings \n&gt; &gt; may be easier to describe in higher dimensional space and the=\r\nn \nmapped \n&gt; &gt; back to 2D/3D, just like in HyperNEAT. Day after day I was t=\r\nrying \nto \n&gt; &gt; find such a higher-dimensional description of something that=\r\n has \n&gt; &gt; limbs, joints, all with variable numbers and size. Even in the \nm=\r\nost \n&gt; &gt; simplistic 2D case, I never got even close to such an elegant \n&gt; &gt;=\r\n solution. \n&gt; &gt; \n&gt; &gt; Suppose I want to have a 2D creature with rectangular =\r\nlimbs. But \nhow \n&gt; &gt; many of them is unknown. How they are connected - too.=\r\n A limb is  \n&gt; &gt; represented as position in 2D and width/height and an angl=\r\ne of \n&gt; &gt; orientation. This makes 5D space in which I have to query all \npo=\r\nssible \n&gt; &gt; things and ask the CPPN if there is a limb or not. Sounds too \n=\r\n&gt; &gt; expensive, and more, even if I do that, there are \n&gt; &gt; algorithmic/impl=\r\nementation issues that are just too hard. \n&gt; &gt; \n&gt; &gt; The problem I had is, a=\r\nctually, that I missed the fact that a CPPN \nis \n&gt; &gt; an infinite mathematic=\r\nal description of the phenotype. Any use of \na \n&gt; &gt; CPPN involves approxima=\r\nting the phenotype with some kind of level \nof \n&gt; &gt; detail. The CPPN makes =\r\nno difference if I use it for 16x16 visual \n&gt; &gt; substrate or 65536x65536, f=\r\nor example (note: I mean not in \nphenotype \n&gt; &gt; evaluation). So there must =\r\nbe a way to have such level of detail \n&gt; &gt; scaling in animal morphologies a=\r\ns well. \n&gt; &gt; \n&gt; &gt; So I went back to the cellular growth approach, looking f=\r\nor what I \n&gt; &gt; missed before. The biggest unsolved problem with my previous=\r\n \nsystem is \n&gt; &gt; that coordinates may grow to infinite and the activation f=\r\nunctions \nare \n&gt; &gt; actually best suited to work in [-1..1] substrates (give=\r\nn the fact \nI \n&gt; &gt; have fixed CPPN weight range and mutation powers). Plus,=\r\n the CPPN \nis \n&gt; &gt; requeried on each cell on each timestep in the process o=\r\nf \ndevelopment. \n&gt; &gt; Too expensive and as the phenotype gets bigger, develo=\r\npment slows \ndown \n&gt; &gt; to a rate that is not acceptable. And more, it is no=\r\nt clear how \n&gt; &gt; scaling could work if I want to, say, have the same object=\r\n, the \nsame \n&gt; &gt; shape, much bigger, but the cell size and the coordinate f=\r\nrames - \n&gt; &gt; still fixed. Something was terribly wrong with that model. But=\r\n I \nthink \n&gt; &gt; I have finally found a solution! Or at least something very =\r\nclose \nto \n&gt; &gt; it.\n&gt; &gt; \n&gt; &gt; The CPPN already encodes all the development of=\r\n a phenotype with \nany \n&gt; &gt; precision via composing coordinate frames. A wh=\r\nole phenotype with \nall \n&gt; &gt; its patterns with infinite (well at least huge=\r\n) precision can be \nfit \n&gt; &gt; into just the patch of [-1 .. 1] in Cartesian =\r\nspace. Assume I will \nbe \n&gt; &gt; talking about 2D space only for simplicity. T=\r\nhat patch [-1 .. 1] \nin \n&gt; &gt; both X and Y I call &quot;the Egg&quot;. \n&gt; &gt; \n&gt; &gt; The f=\r\nirst approach I took with the idea of the egg was too simple, \nbut \n&gt; &gt; it =\r\nis interesting to know about. After the CPPN &quot;paints&quot; the egg \nwith \n&gt; &gt; ce=\r\nll color and stuff, then it is re-queried again, this time the \n&gt; &gt; outputs=\r\n are 2D vectors. The magnitude of these vectors was re-\nscaled \n&gt; &gt; to be w=\r\nithin [0 .. MAX_DISTANCE]. So the entire phenotype building \n&gt; &gt; procedure =\r\nbecame very simple - first build the egg, then send each \n&gt; &gt; cell where it=\r\ns vector points. Well that looks so ugly in practice, \n&gt; &gt; with empty holes=\r\n and.. eh.. forget that! This is not anything more \n&gt; &gt; advanced than just =\r\npainting the CPPN output directly like in \n&gt; &gt; Picbreeder, just a fancy way=\r\n of doing the same. \n&gt; &gt; \n&gt; &gt; Then I realized that these &quot;cells&quot; can be als=\r\no thought of an \n&gt; &gt; abstractions of &quot;masses/groups of cells&quot;. In nature, c=\r\nells don&#39;t \njust \n&gt; &gt; go &quot;that way&quot; moving through each other, but stick to=\r\ngether. \nEntire \n&gt; &gt; tissues develop fast as a mass of cells divides and in=\r\ncreases \nsize. So \n&gt; &gt; I had this insight. I changed the concept of a cell =\r\nand improved \nover \n&gt; &gt; the previous model. A cell is a circle with a radiu=\r\ns, has a color \nand \n&gt; &gt; has mass. It also has more properties but more on =\r\nthat after a few \n&gt; &gt; other words. \n&gt; &gt; \n&gt; &gt; This is the key idea. In my pr=\r\nevious model, the CPPN was \ninstructing a \n&gt; &gt; big mass of many cells on th=\r\ne fly, during development time. It \ntook \n&gt; &gt; advantage of using time as in=\r\nput, so the development was like a \n&gt; &gt; spatial pattern in 4D. But it suffe=\r\nred from the coordinates and \nother \n&gt; &gt; problems I mentioned above. In thi=\r\ns model, the CPPN does not \noperate \n&gt; &gt; on the cells during development. T=\r\nhe CPPN predetermines the fate \nof \n&gt; &gt; each cell right in the egg, before =\r\ndevelopment begins. Everything \nelse \n&gt; &gt; during development is a consequen=\r\nce of the cell&#39;s fate and the \n&gt; &gt; internal 2D physics world in which the p=\r\nhenotype develops. So, in \n&gt; &gt; simpler words, the CPPN is programming the e=\r\ngg.\n&gt; &gt; \n&gt; &gt; A cell has the following properties that are determined by the=\r\n \nCPPN:\n&gt; &gt; - Color (of course :)\n&gt; &gt; - Growth rate. How fast it increases =\r\nsize in % of circle area. \n&gt; &gt; - Time to begin growth. It is a value in [0 =\r\n.. 1] where 1 is the \ntotal \n&gt; &gt; number of time steps allocated for develop=\r\nment.\n&gt; &gt; - Growth time duration. Between some min and max value.\n&gt; &gt; - Ang=\r\nle for division splitting. Between [-1 .. 1], during \ndevelopment \n&gt; &gt; resc=\r\naled to [0 .. pi]\n&gt; &gt; \n&gt; &gt; As cells grow, they will inevitably overlap each=\r\n other. This issue \nis \n&gt; &gt; handled by the internal simple 2D physics engin=\r\ne that adds forces \nif \n&gt; &gt; the circles overlap. So they eventually will co=\r\nnverge to a state \nthat \n&gt; &gt; they only touch each other, and the whole phen=\r\notype bigger of \ncourse. \n&gt; &gt; Cells can divide. Division is automatic. If a=\r\n cell&#39;s radius \nreaches a \n&gt; &gt; a fixed treshold value, it is split into 2 c=\r\nells, each one having \n&gt; &gt; exactly half the area of the mother cell. The mo=\r\nther cell is split \n&gt; &gt; along a predetermined angle, so the CPPN can contro=\r\nl the overall \n&gt; &gt; directions of growth for the phenotype. The 2 children o=\r\nverlap in \nthe \n&gt; &gt; beginning, but as time progresses, they are pulled apar=\r\nt by the \n&gt; &gt; physics. Children cells inherit the properties of the mother,=\r\n but \n&gt; &gt; change their positions and reset their lifetime timers. The cells=\r\n \nin \n&gt; &gt; the egg count their children and their grandchildren as well. No =\r\n\nmore \n&gt; &gt; than 3 generations of division can occur, in order to keep the \n=\r\nnumber \n&gt; &gt; of cells relatively small for performance considerations. Thoug=\r\nh \nthis \n&gt; &gt; value can be changed. \n&gt; &gt; \n&gt; &gt; In order to keep the phenotype=\r\n solid, not torn apart from internal \n&gt; &gt; velocities, a mass-spring grid me=\r\nsh is created in the egg before \n&gt; &gt; development. Cell divisions update the=\r\n mesh. The mass-spring mesh \nplus \n&gt; &gt; the cell-to-cell overlapping prevent=\r\nion forces act together as the \n&gt; &gt; phenotype increases in size and number =\r\nof cells. Eventually it \nwill \n&gt; &gt; become more stiff, where large group of =\r\nrecently divided cells are \n&gt; &gt; packed together. I don&#39;t know if that is a =\r\nbug or a feature :) \n&gt; &gt; \n&gt; &gt; There is one insight I had after seeing the r=\r\nesults. Watching the \nmesh \n&gt; &gt; develops, and some with interesting shapes =\r\nand configurations, \nmakes \n&gt; &gt; me think this approach is very well suited =\r\nto evolve HyperNEAT \n&gt; &gt; substrates as well. In fact I am about to add brai=\r\nns to these \n&gt; &gt; creatures right this evening :) But I don&#39;t know, if the l=\r\ninks \nshould \n&gt; &gt; be determined from the beginning right in the egg or afte=\r\nr \n&gt; &gt; development. Any suggestions? \n&gt; &gt; \n&gt; &gt; Well this is it. I hope this=\r\n may be some advance into the field. I \n&gt; &gt; will be happy to see any though=\r\nts about this stuff. I&#39;ll post an \n&gt; &gt; executable compiled with VS2008 in t=\r\nhe files section now, so you \nwill \n&gt; &gt; see it in action. Note however, tha=\r\nt it is just a demo of \ndevelopment, \n&gt; &gt; not evolution. There is no doubt =\r\nthat this thing combined with \nNEAT \n&gt; &gt; will make at least something very =\r\nvery cool. :) \n&gt; &gt; \n&gt; &gt; Peter\n&gt; &gt;\n&gt;\n\n\n\n\n"}}