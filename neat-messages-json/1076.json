{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"jPl9AQh22tLYLpUpVmByfRjXRtzwOR1Mp4dbdd4UhZQucK0Ik0202SCytN8bKQfLeLrZzYwr-PJDLEduYK-98RswrVJZ4bfzosc","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Computation Time","postDate":"1087290402","msgId":1076,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4wLjYuMC4yMDA0MDYxNDE3MzgzNy4wMjUzZWQ0MEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PGNhNTNhaytsN29lQGVHcm91cHMuY29tPg==","referencesHeader":"PDUuMS4wLjE0LjAuMjAwNDA2MDgxNjU1MTguMDBhOWY4OTBAcG9wLm1haWwueWFob28uY28udWs+IDxjYTUzYWsrbDdvZUBlR3JvdXBzLmNvbT4="},"prevInTopic":1074,"nextInTopic":1079,"prevInTime":1075,"nextInTime":1077,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"... Is that compiled into native code or run on a virtual machine? It it s running on a VM (in spite of some press about compilation to native code, I believe","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 62061 invoked from network); 15 Jun 2004 23:59:51 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m5.grp.scd.yahoo.com with QMQP; 15 Jun 2004 23:59:51 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta6.grp.scd.yahoo.com with SMTP; 15 Jun 2004 23:59:51 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 15 Jun 2004 09:07:26 -0000\r\nMessage-Id: &lt;6.1.0.6.0.20040614173837.0253ed40@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.0.6\r\nDate: Tue, 15 Jun 2004 10:06:42 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;ca53ak+l7oe@...&gt;\r\nReferences: &lt;5.1.0.14.0.20040608165518.00a9f890@...&gt;\n &lt;ca53ak+l7oe@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.33\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Re: Computation Time\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 20:16 08/06/2004, you wrote:\n&gt;Java.\n&gt;\n&gt;--- In neat@yahoogroups.com, Ian Badcoe &lt;ian_badcoe@y...&gt; wrote:\n&gt; &gt; Hi,\n&gt; &gt;          This is interesting, what language did you time them in?\n\nIs that compiled into native code or run on a virtual machine?\n\nIt it&#39;s running on a VM (in spite of some press about compilation to native \ncode, I believe java still generally runs this way?) then most of my \narguments about efficiency will be pretty diluted, because there&#39;s a \nportion of CPU going into the VM, even before any differences in the \nfunctions come into play.\n\nThe only principles I can think of for optimising languages running VMs is \n&quot;have the VM do as little as possible&quot; and &quot;reduce memory access&quot;.\n\nPut another way, the speed of a VM is more sensitive to the number of \ninstructions (byte-codes) than the type of instructions.  Although exp is \nso slow that it might still show through, and the amount of memory-access \nwill matter.  If I remember, I&#39;ll code up these routines in C and do some \ntiming....\n\nI wonder what proportion of the input values were outside the range -4 to \n+4?  That could also make a lot of difference, because Mitchell&#39;s function \npays a performance cost for checking those ranges, BUT, when the input is \noutside the range he then avoids the divide.  This might work especially \nwell on a VM (where the cost of the extra conditionals is small compared \nwith conditionals the VM executes anyway).\n\nSo it might be good advice to anybody looking to optimise their activation \nfunction: consider checking the range of the input before doing any \nfloating-point maths.\n\nMore generally, AFAIK sigmoids were originally used because they were \ndifferentiable, which is necessary in back-propogation.  Since we all \nevolve our networks and don&#39;t train them, why do we use sigmoids at \nall?  Is is because a subset of problems are based on trying to approximate \nsmooth functions?\n\n         Ian Badcoe\n\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n"}}