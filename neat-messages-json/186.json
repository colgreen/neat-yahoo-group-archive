{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"hB7UXA8pzwEjHL120if0UqVhVqUzrQVXls4qOsLnNqlXQhcN8Gkq1Jnas9GdwsYsuWYgubRuID8dxxr8dLwswU-_PJMVbNVywQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Some Good News and Some Bad News","postDate":"1067646876","msgId":186,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNGQTJGRjlDLjMwODA1MDFAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDIwMDMxMDIzMjA0NDUzLjMxMTczLnFtYWlsQHdlYjIxNDE0Lm1haWwueWFob28uY29tPg==","referencesHeader":"PDIwMDMxMDIzMjA0NDUzLjMxMTczLnFtYWlsQHdlYjIxNDE0Lm1haWwueWFob28uY29tPg=="},"prevInTopic":155,"nextInTopic":191,"prevInTime":185,"nextInTime":187,"topicId":153,"numMessagesInTopic":6,"msgSnippet":"Hi Mitchell, I ve just been catching up on this thread... ... I agree with Ken on this one. When I was working on prey capture not so long ago I quickly hacked","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 67065 invoked from network); 1 Nov 2003 00:34:41 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m1.grp.scd.yahoo.com with QMQP; 1 Nov 2003 00:34:40 -0000\r\nReceived: from unknown (HELO colossus.systems.pipex.net) (62.241.160.73)\n  by mta2.grp.scd.yahoo.com with SMTP; 1 Nov 2003 00:34:40 -0000\r\nReceived: from dsl.pipex.com (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby colossus.systems.pipex.net (Postfix) with ESMTP id D563D16000794\n\tfor &lt;neat@yahoogroups.com&gt;; Sat,  1 Nov 2003 00:34:37 +0000 (GMT)\r\nMessage-ID: &lt;3FA2FF9C.3080501@...&gt;\r\nDate: Sat, 01 Nov 2003 00:34:36 +0000\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.4) Gecko/20030624\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nSubject: Re: [neat] Re: Some Good News and Some Bad News\r\nReferences: &lt;20031023204453.31173.qmail@...&gt;\r\nIn-Reply-To: &lt;20031023204453.31173.qmail@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nHi Mitchell,\n\nI&#39;ve just been catching up on this thread...\n\nMitchell Timin wrote:\n\n&gt;--- Kenneth Stanley &lt;kstanley@...&gt; wrote:\n&gt;&lt;snip&gt;\n&gt;\n&gt;What is going on that such a small amount of\n&gt;information is being\n&gt;encoded by so many variables?  I also wonder about\n&gt;  \n&gt;\nI agree with Ken on this one. When I was working on prey capture not so \nlong ago I quickly hacked together a NN by hand (I can load/save them as \nXML files). I was able to hand-craft a basic memory by simply \ninterconnecting two nodes so that each one recieved the output of the \nother. If an external signal is &#39;injected&#39; into this pair then they will \n(or can be made to) maintain a high activation, until another external \nsignal cancels out the signal (by using a negative signal). The \nimportant thing to note was that I was able to create a very well \nperforming NN with just 4 or 5 neurons, so I can speculate that a really \nclever (good) network would probably use no more than a dozen (20 at \nmost) neurons. If I see evolved networks with far more neurons then \nsomething is probably wrong - probably there are a lot of neurns that \nsimply aren&#39;t doing anything, that is they are not participating in the \ngenerating the final output signal.\n\n&gt;BTW, I allow the net to settle while holding the input\n&gt;values.  I let it take up to 16 updates for the\n&gt;outputs to reach a state where only 1 line is high. \n&gt;\nThis is interesting. I came across this same problem - how to decide how \nmany re-evaluations (think of them as time steps) of the network to \nperform for each step in domain time. E.g. each time step the prey has a \nprobability of moving (fixed between 0 and 1) and the agent (controlled \nby the NN) has a chance to move 1 unit based on it&#39;s output signals. \nNow, when I feed the input signals in to the NN how many times should I \ncall NN.Recalc() before I read the output values.\n\nThere are a couple of factors that should be considered:\n\n1) Some of my hand crafted designs were reliant on a certian number of \ncalls to recalc() per cycle. E.g. one design made the agent travel in a \ncircle, to do this I set up a chain of neurons and bounced a signal \naround the chain.  The 4 output nodes (North east south west) were then \nconnected to points on the chain. Therefore the agent will describe \ndifferent behaviour if I call recalc()  a different number of times.\n\n2) I always try to keep in mind how CPU intensive a simulation will be. \nUnnecessary calls to Recalc() waste valuable CPU time.\n\nIn the end I picked a number of calls to Recal() that I thought was \nsensible for the size of network I was expecting to evolve - based upon \nmy hand crafted networks. I think I call recalc 3 or 4 times. Anyway \nit&#39;s a fixed nuber of times, if I changed this then my evolved NN&#39;s \nwould probbaly become useless.\n\nI find it interesting that you call recalc() until the output signals \n&#39;work themselves out&#39;. I hadn&#39;t considered this technique. If however I \ndid implement it, it would almost certainly only call recalc() once sine \nI just take the highest output value as the selected output, and since \nthe output values are floating point they are rarely equal.\n\n&gt;Of course it may not really have settled, just because\n&gt;1 line out of only 4 outputs is high, but that&#39;s the\n&gt;way the current code is.  Maybe that&#39;s a serious\n&gt;defect, and I should require all the outputs to\n&gt;stabilize.\n&gt;  \n&gt;\nMy gut feeling is that this stabilization may be complicating matters. \nPerhaps try the fixed number of recalc() calls idea?\n\n&gt;&gt;I will do that.  I think that neat could evolve a\n&gt;&gt;perfect player of this 4-card game, although I&#39;m not\n&gt;&gt;certain.  We can&#39;t be certain until someone sets it up\n&gt;&gt;and does it.\n&gt;&gt;\n From your description of the problem and knowledge of what NEAT as \nsolved so far I would agree that NEAT is capable of solving this with no \nproblem at all.\n\n\nColin\n\n\n\n\n"}}