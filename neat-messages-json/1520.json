{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"u_Z7USGc1Om3U-R7CbIlr_JaKoZPWPRAaO4J07YlOSnYZiIGmiX9meHFcC5SGQxpgnXe4_tHVb_gXJzjM6I5_vPd58J33M-ITPk","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [neat] Re: IEX musings","postDate":"1094747442","msgId":1520,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4yLjAuMC4yMDA0MDkwMjE2MzE0NC4wMjU2YmQ5MEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PEJBWTItRjI2a1VYUVVjUjFsQVAwMDAwZjUxN0Bob3RtYWlsLmNvbT4=","referencesHeader":"PEJBWTItRjI2a1VYUVVjUjFsQVAwMDAwZjUxN0Bob3RtYWlsLmNvbT4="},"prevInTopic":1508,"nextInTopic":0,"prevInTime":1519,"nextInTime":1521,"topicId":1468,"numMessagesInTopic":15,"msgSnippet":"You said this before but I was too busy to pick up on it. ... Well, they interpolate using a straight line or a cubic curve which are the simplest things you","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 97878 invoked from network); 9 Sep 2004 16:29:56 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m11.grp.scd.yahoo.com with QMQP; 9 Sep 2004 16:29:56 -0000\r\nReceived: from unknown (HELO smtp005.mail.ukl.yahoo.com) (217.12.11.36)\n  by mta5.grp.scd.yahoo.com with SMTP; 9 Sep 2004 16:29:55 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp005.mail.ukl.yahoo.com with SMTP; 9 Sep 2004 16:29:53 -0000\r\nMessage-Id: &lt;6.1.2.0.0.20040902163144.0256bd90@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.2.0\r\nDate: Thu, 09 Sep 2004 17:30:42 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;BAY2-F26kUXQUcR1lAP0000f517@...&gt;\r\nReferences: &lt;BAY2-F26kUXQUcR1lAP0000f517@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.36\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: RE: [neat] Re: IEX musings\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nYou said this before but I was too busy to pick up on it.\n\n&gt;There is a way of doing that already.  They do it with something called\n&gt;&#39;splines&#39;.\n\nWell, they interpolate using a straight line or a &quot;cubic&quot; curve which are \nthe simplest things you can call splines.\n\n&gt;   And it works, it&#39;s just very computationally intensive.\n\nThey aren&#39;t as cpu intensive as evaluating a neural network or any size...\n\n&quot;linear&quot; involves calculating:\n\na*f + b*(1-f) three times per pixel and cubic is something like:\n\na * f^3 + b * f(1-f)^2 + c * f^2*(1-f) + d * (1-f)^3\n\n&gt;   And\n&gt;it&#39;s not quite as good as I have seen a neural net be.  But the neural net\n&gt;also could only do a fixed enlargement, not a smooth and unlimited scaling,\n&gt;like splines.  I&#39;m trying to get the best of both worlds...if it can be\n&gt;done.\n\nRight, this is where you may not be comparing apples with apples.  The \n&quot;spline&quot; techniques are merely interpolation.  They are not trying to \nintroduce any missing information into the enlarged image.  They&#39;re just \ntrying to interpolate values between the original pixels in clever \nways.  If that&#39;s what you want to do, then I you need to form your \nexperiment a little differently (by training for the ability to reproduce \nsome sort of high-end interpolation).\n\nHowever, from our previous discussions, you want networks which will \n&quot;estimate&quot; the missing values, not merely by maths from the surrounding \npixels, but by building in some sort of assumptions about the picture \ndomain (yes?).\n\nThe more I think about that, the more I wonder if this whole &quot;multiplexing&quot; \nangle is a serious impediment.  e.g. with you experiment phrased the way it \nis, the net is going to need a way to focus its attention in the area \nindicated by the coordinates.  Even putting aside the idea of that being a \nregion (TL - BR) and thinking about a point, the network really has its \nwork cut out.  e.g. for any point (x,y) it is going to have to consider \nsome input values around the point (say 5 or 6 of them) and for each of \nthose values it will need a complete copy of the multiplexer (maybe 100 - \n200 neurones).  So that&#39;s around 1000 neurones, _before_ building in any \nassumptions about the image content...\n\nI&#39;m not saying such a system cannot be evolved, I&#39;m just wondering whether, \neven with the clever staged fitness scheme you have, the entry probability \nbarrier is too steep.\n\nI know it&#39;s not to you liking, but how about abandoning coordinates as a \nform of input data and trying to evolve a network which generates a fixed \ninterpolation when given a small region around it?\n\ne.g. you could have a net which, given:\n\nX X X X\nX X.X X\nX X X X\n\n(&quot;X&quot; is any existing pixel)\n\nInterpolates the value for the dotted location (e.g. half way between two \nexisting pixels).\n\nRepeated applications of that serve to double the X dimension (stage I).\n\nX.X.X.X\nX.X.X.X\nX.X.X.X\n\nRotate it and you can double the Y dimension (stage J):\n\nX X X X\n. . . .\nX X X X\n. . . .\nX X X X\n. . . .\nX X X X\n\nCombine both of those for:\n\nX.X.X.X\n. . . .\nX.X.X.X\n. . . .\nX.X.X.X\n. . . .\nX.X.X.X\n\nAnd now you just have 25% of the pixels missing.  Apply it again (stage \n&quot;K&quot;) ...\n\nAnd you can repeat the whole thing for more enlargement.\n\nNow, you are bulding errors up errors here (because you later use outputs \nas inputs to the next application).  But once you have a single network \nwith some degree of functionality, you can clone it into a separate \npopulation and start specialising that population to a part of the \nprocess.  e.g. Stage K is clearly a different process to I and J so a first \nstage might be to break that out into a different network.  After than, \nwell, are I and J really the same, or is a rotated image losing something \nwhich could be gained from the fact that the light is generally from above...\n\n         Ian\n\n(From a signal processing point of view, spline interpolation is naive and \nintroduces new frequencies which were never in the original image \n(frequencies across the image, that is).  There are those who advocate \nchanging image resolution by transforming the image into the frequency \ndomain (FFT), and resampling at the new resolution.  Now that&#39;s CPU intensive.)\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n\n"}}