{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"whlDKRPsxGdQWpLWGFylSoMz19lNKNnn8Oq7RwGqeFkUfsLCoV3lhJE5OT1RLcIYrhLPQI5C2ErbkX4pA0gODKpvl6WlJGvgELM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Computation Time","postDate":"1086348604","msgId":990,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4wLjYuMC4yMDA0MDYwNDExMDgwMy4wMjUxZTQzMEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDQwQkZBNUZFLjIwNzA5MDlAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDFkNDEwMWM0NDY3ZiQzZDkyODU2MCQ3NGNiMDEwYUBtYWlsMndvcmxkLmNvbT4gPDQwQkNGNDE4LjcwMzA5MDVAZHNsLnBpcGV4LmNvbT4gPDYuMS4wLjYuMC4yMDA0MDYwMzE2NDkzMi4wMjUxMmUzMEBwb3AubWFpbC55YWhvby5jby51az4gPDQwQkZBNUZFLjIwNzA5MDlAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":989,"nextInTopic":991,"prevInTime":989,"nextInTime":991,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"... Yes and no :) You still have to give them a hand up.  Calls through pointers (including _all_ virtual function calls) cannot be inlined. Also, every","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 5388 invoked from network); 4 Jun 2004 11:27:28 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m24.grp.scd.yahoo.com with QMQP; 4 Jun 2004 11:27:28 -0000\r\nReceived: from unknown (HELO smtp003.mail.ukl.yahoo.com) (217.12.11.34)\n  by mta1.grp.scd.yahoo.com with SMTP; 4 Jun 2004 11:27:28 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp003.mail.ukl.yahoo.com with SMTP; 4 Jun 2004 11:27:25 -0000\r\nMessage-Id: &lt;6.1.0.6.0.20040604110803.0251e430@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.0.6\r\nDate: Fri, 04 Jun 2004 12:30:04 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;40BFA5FE.2070909@...&gt;\r\nReferences: &lt;1d4101c4467f$3d928560$74cb010a@...&gt;\n &lt;40BCF418.7030905@...&gt;\n &lt;6.1.0.6.0.20040603164932.02512e30@...&gt;\n &lt;40BFA5FE.2070909@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.34\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Re: Computation Time\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\n\n&gt; &gt;         But I would want to see profiling results to prove this was a\n&gt; &gt;significant CPU hot spot before putting too much work into it.  There&#39;s so\n&gt; &gt;much else can eat CPU these days.  For example, if the network can be\n&gt; &gt;updated as a straight loop through a set of arrays, then most of the CPU\n&gt; &gt;may indeed be in the maths.  OTOH, if the loop contains a couple of\n&gt; &gt;conditional jumps and a function call (or worse a call through a pointer)\n&gt; &gt;then you may be spending as much CPU on the body of the loop.\n\n&gt;Yes except that modern compilers tend to help you out quite a bit. Those\n&gt;heavily used function calls are good candidates for getting in-lined for\n&gt;example.\n\nYes and no :)\n\nYou still have to give them a hand up.  Calls through pointers (including \n_all_ virtual function calls) cannot be inlined.\n\nAlso, every compiler I&#39;ve used has turned out to have &quot;blindspots&quot; about \nwhat can be inlined.  Which is easily understood.  The compiler has to \nfollow really strict rules about preserving the integrity of the \nprogram.  All sorts of conditions must be met before the compiler can \n&quot;prove&quot; that an optimization is safe and if it&#39;s not safe the compiler just \ncannot do it, because some programs would break.\n\nAs programmers, however, out powers are greater than any mere compiler, so \nwe tend to know trivially whether a function can be inlined or not etc etc.\n\n&gt; &gt;         I was just playing with some equations, it&#39;s not easy to get the\n&gt; &gt;right properties.  But how about x/(n+abs(x))?  That&#39;s a sigmoid, symmetric\n&gt; &gt;about zero, equal to +1 at +infinity and -1 at -infinity.  n controls the\n&gt; &gt;steepness and is equal to the x value where the curve reaches +0.5...\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;Yeh nice idea. I think normally you want an output range of 0 to 1\n&gt;though or at least a lower bound of 0 anyway. That way large negative\n&gt;weights can drag the output to 0 rather than down to -1, which would\n&gt;cause the neuron to send out a signal of -1. So we could add one and get\n&gt;a range of 0 to 2, which would be better. Also it doesn&#39;t approach the\n&gt;bounds as fast as the sigmoids I have been using until now - depending\n&gt;on what value you use for n though of course.\n&gt;\n&gt;I just did a rough test and there was no noticable difference between\n&gt;your function and 1.0/(1.0+(exp(-x)))  . Actually I wonder if this fn is\n&gt;already quite optimal? is exp() expensive?\n\nVery expensive, it&#39;s probably better now but ISRT that it used to be 104 \ncycles on a PII...\n\n&gt;Anyway like you say some\n&gt;profiling needs to be done. If there is significant improvement in the\n&gt;activation fn (say twice as fast) then it will probably only become\n&gt;noticeable when dealing with relatively large networks.\n\nI suspect relatively little of your CPU is in the maths and probably, for \nexample, far more in the look up of which connection accesses which \nneurone.  Unless the bulk of time is in the mutation?  Did you have any \nmutation happening in the test?\n\nWhy are we discussing this BTW, do people have serious speed problems?\n\nI don&#39;t mind glancing over folk&#39;s code (C/C++) and making helpful remarks, \nbut I&#39;m not prepared to do it in a vacuum, e.g. I telling which routines to \nlook at.\n\nAmdahl&#39;s Law get&#39;s you every time.\n\n         Ian\n\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n"}}