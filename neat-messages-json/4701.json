{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":283334584,"authorName":"petar_chervenski","from":"&quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;","profile":"petar_chervenski","replyTo":"LIST","senderId":"Wbf0IcEHP26AwSIN1jJV7UpueXcg2dcQjj7bRZjq-RB3QzbShNhQtEdmYhPDk7NcG3z1ljXRBD6Z5jvX-c8NAwBWjYkgsVlEHfgVy3hawapJE2o73y8","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Ideas for automatically deciding the quantity of nodes for HyperNEAT substra","postDate":"1243616046","msgId":4701,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGd2cDN2ZSt1cjJtQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGd2bzZqNCtkY2s2QGVHcm91cHMuY29tPg=="},"prevInTopic":4700,"nextInTopic":0,"prevInTime":4700,"nextInTime":4702,"topicId":4693,"numMessagesInTopic":6,"msgSnippet":"I am posting again for which I am sorry but I just have to continue my thought. I just played around with Picbreeder and I have a recipe for evolving objects","rawEmail":"Return-Path: &lt;petar_chervenski@...&gt;\r\nX-Sender: petar_chervenski@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 45595 invoked from network); 29 May 2009 16:54:12 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m7.grp.re1.yahoo.com with QMQP; 29 May 2009 16:54:12 -0000\r\nX-Received: from unknown (HELO n38b.bullet.mail.sp1.yahoo.com) (66.163.168.152)\n  by mta3.grp.re1.yahoo.com with SMTP; 29 May 2009 16:54:12 -0000\r\nX-Received: from [69.147.65.172] by n38.bullet.mail.sp1.yahoo.com with NNFMP; 29 May 2009 16:54:06 -0000\r\nX-Received: from [98.137.34.33] by t14.bullet.mail.sp1.yahoo.com with NNFMP; 29 May 2009 16:54:06 -0000\r\nDate: Fri, 29 May 2009 16:54:06 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;gvp3ve+ur2m@...&gt;\r\nIn-Reply-To: &lt;gvo6j4+dck6@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;petar_chervenski&quot; &lt;petar_chervenski@...&gt;\r\nSubject: Re: Ideas for automatically deciding the quantity of nodes for HyperNEAT substra\r\nX-Yahoo-Group-Post: member; u=283334584; y=imCjpFrdxF0X0aYlHjE24NdZ3-OGP7jDx_ceaD0q2ODqyFTFCxSItEpi-w\r\nX-Yahoo-Profile: petar_chervenski\r\n\r\nI am posting again for which I am sorry but I just have to continue my thou=\r\nght. I just played around with Picbreeder and I have a recipe for evolving =\r\nobjects only. And it is surprising that although the search is constrained,=\r\n it is still incredibly powerful and promising. \n\nSo what I mentioned hours=\r\n ago is a loose definition of what an object is. It is a constellation of p=\r\noints that are close to each other and everything else is empty. So start a=\r\n new evolution with Picbreeder and keep redoing until you get something lik=\r\ne a circle in a white background. Assume that &quot;white&quot; is emptiness. OK then=\r\n you start evolving your picture. Follow the one and only one rule - do not=\r\n select individuals that seem to touch the square boundary of the picture. =\r\nSelect only such that are inside it. Keep redoing if you don&#39;t like the par=\r\nticular results. \n\nWell I found out that following this constraint still ha=\r\ns a lot of freedom for discovery. The space of the class of patterns I perc=\r\neive as &quot;objects&quot; is incredibly vast and there is no problem to force the s=\r\nearch into this particular class only. That backs up my idea that it is OK =\r\nto constrain the search and therefore use it to evolve objects and substrat=\r\nes. Just keep redoing a mutation/crossover and do not allow &quot;bad&quot; individua=\r\nls to appear. \n\n--- In neat@yahoogroups.com, &quot;petar_chervenski&quot; &lt;petar_cher=\r\nvenski@...&gt; wrote:\n&gt;\n&gt; Well it depends. An object is really hard to define =\r\nin terms of pattern in space but there is a definition. What all objects ha=\r\nve in common is that most of their points are located in specific location =\r\nin space and the rest is all empty. But depending of the type of pattern we=\r\n want evolved we can be more or less specific about it. A pattern that is n=\r\not an object for example is a pattern repeating forever, anywhere in space.=\r\n Or a pattern that is a negative image of an object, you know, a hole in th=\r\ne center and all the rest is &quot;matter&quot;. Anything that extends to infinity ca=\r\nnnot be an object. It can evolve into object for just one generation, but t=\r\nhe intermediate pattern itself is not one. \n&gt; \n&gt; Of course, we can develop =\r\na clever algorithm that can take any pattern and make objects and substrate=\r\ns out of it. For example we can only care for the region in space with coor=\r\ndinates in range of [-1 .. 1] and cut off the excess parts. But we don&#39;t re=\r\nally have to. The idea is that &quot;objects&quot; or &quot;substrates&quot; or whatever, are a=\r\n small class of patterns with defined characteristics. We can force the sea=\r\nrch to evolve only such patterns. Even a living being is a pattern and ther=\r\ne exists a theoretical CPPN that describes every part of it. \n&gt; \n&gt; But now =\r\nI see that getting such specific patterns is hard. The search is usually un=\r\nconstrained and if I try to compare all possible patterns with the patterns=\r\n I identify as objects, I will probably see that objects are like 0.0001% o=\r\nf all possibilities. But this is normal. We can&#39;t expect something differen=\r\nt - the representation itself is not biased towards the particular class of=\r\n patterns. The experimenter has to provide it somehow. For example, if I ch=\r\noose a set of canonical activation functions that cut down the search space=\r\n so like the possible patterns will be 10% objects, this is a great help. \n=\r\n&gt; \n&gt; Peter\n&gt; \n&gt; --- In neat@yahoogroups.com, &quot;Kenneth Stanley&quot; &lt;kstanley@&gt; =\r\nwrote:\n&gt; &gt;\n&gt; &gt; Peter, I&#39;m thinking over some of insights in your message li=\r\nke the mutation density map.  But one thing I don&#39;t completely understand i=\r\ns the point about some patterns not being &quot;objects.&quot;  How do you define &quot;ob=\r\nject?&quot;  Do you mean that some patterns are not contiguous?  It seems like y=\r\nou mean something deeper than that, but I&#39;m not sure I follow. Can you give=\r\n some examples of patterns that are not objects?\n&gt; &gt; \n&gt; &gt; I&#39;ll be very inte=\r\nrested to see any experiment you complete on substrate evolution in food ga=\r\nthering, especially if you evolve input and output placement and it works w=\r\nell.\n&gt; &gt; \n&gt; &gt; ken\n&gt; &gt; \n&gt; &gt; --- In neat@yahoogroups.com, &quot;petar_chervenski&quot; =\r\n&lt;petar_chervenski@&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Hi Ken.\n&gt; &gt; &gt; \n&gt; &gt; &gt; You make a good=\r\n point. My method currently increases overall density and this is a problem=\r\n. But I think I found a solution. Suppose the substrate of an individual is=\r\n painted on a 2D plane. Now, there can co-exist another 2D plane which we c=\r\nan call the density mutation map. It can contain floats in the range of [-1=\r\n .. 1]. Each generation this map is reset to contain only values of 0.0. Wh=\r\nen the density mutation is triggered, a random place and area in the map is=\r\n chosen and filled with a random value of -10% to +10% (-0.1 .. 0.1). This =\r\nprocess can be optionally repeated until the density mutation map is filled=\r\n to some extend, according to a mutation power or something. Then in the ne=\r\nxt generation, the substrate is increased/decreased in density according to=\r\n its density mutation map. \n&gt; &gt; &gt; \n&gt; &gt; &gt; And what could be really cool is t=\r\nhat the distribution of random locations in the density mutation map can be=\r\n predetermined by the CPPN itself. So the CPPN can actually control which l=\r\nocations will grow in density. As the CPPN complexifies, these locations ca=\r\nn change as well.  Does it make sense? Density mutation maps are trivial to=\r\n crossover as well - just average them. \n&gt; &gt; &gt; \n&gt; &gt; &gt; Here is one insight I=\r\n had after a long walk in circles thinking about CPPN patterns, objects and=\r\n substrates. Before some time, I was confident that there exists a method t=\r\nhat can convert *any* pattern in space to an object/substrate. Like an alch=\r\nemist :) But now I realized the truth.\n&gt; &gt; &gt; \n&gt; &gt; &gt; All objects we perceive=\r\n, including forms of life, are patterns in space. There is no doubt about i=\r\nt. They are just spatial patterns in space that can be represented by CPPNs=\r\n. What mistake I did before, was to think that therefore all patterns in sp=\r\nace are objects. This is not true. All objects are patterns in space, but n=\r\not all patterns in space are objects. Objects and substrates are only a tin=\r\ny subset, a small class of patterns in space. They can be represented by CP=\r\nPNs, of course. But CPPNs can do a lot more. They can represent any pattern=\r\n in space. So I realized that there is no need to do magic tricks to get my=\r\n objects and substrates evolved. \n&gt; &gt; &gt; \n&gt; &gt; &gt; The only thing we should put=\r\n our efforts in, is to find a way to bias the search for the particular cla=\r\nss of patterns. And I immediately identified one major obstacle. Genetic de=\r\nfects. A genetic lineage does not strictly follow a particular class of pat=\r\nterns. It is very possible that an object&#39;s offspring can be patterns that =\r\nare not objects and vice versa. But we can&#39;t evaluate the non-object patter=\r\nns.\n&gt; &gt; &gt; \n&gt; &gt; &gt; There is one solution, though. Suppose we start with a see=\r\nd CPPN that  we know is producing a good pattern. Some kind of validity che=\r\nck procedure has to be developed, to test if a CPPN produces a pattern that=\r\n belongs to the desired class. When any mutation occurs, that validity chec=\r\nk is performed and if the resulting pattern is outside the desired class, u=\r\nndo the mutation and try again. Repeat the process until a good pattern com=\r\nes out of the mutation. This way the search will strictly follow the class =\r\nof patterns, without hurting evolution dynamics like discarding individuals=\r\n during evaluation would do. \n&gt; &gt; &gt; \n&gt; &gt; &gt; But there is a higher probabilit=\r\ny for the evolution to get stuck. Suppose you want to evolve something like=\r\n an insect model but to get there, the search will have to pass through a s=\r\npace where no patterns belong to the same class, even if the class of &quot;obje=\r\ncts&quot; is so vast. Maybe only Novelty Search can handle this. \n&gt; &gt; &gt; \n&gt; &gt; &gt; I=\r\n am planning to throw away the GNG approach and use some image processing t=\r\nechniques instead. I found some very useful functions in OpenCV, contour ex=\r\ntraction and polygonal approximation for example. I&#39;ll see which one works =\r\nbetter. I have an idea to test out the substrate evolution. It is actually =\r\nthe HyperNEAT food gathering task, but the inputs and outputs placement wil=\r\nl be evolved. And there will be a hidden layer also. It is only a project o=\r\nn paper now, but I hope I will find more time to implement it.\n&gt; &gt; &gt; \n&gt; &gt; &gt;=\r\n Peter\n&gt; &gt; &gt; \n&gt; &gt; &gt; \n&gt; &gt; &gt; \n&gt; &gt; &gt; --- In neat@yahoogroups.com, &quot;Kenneth Sta=\r\nnley&quot; &lt;kstanley@&gt; wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Peter, I&#39;m glad to see you&#39;re stil=\r\nl thinking about this important question.  You make some interesting observ=\r\nations.  I think you&#39;re probably right that trying to correlate node densit=\r\ny to CPPN complexity is not the best approach.  On the other hand, making c=\r\nhanges in node density correlated somewhat with fitness seems potentially s=\r\nensible.  But it still doesn&#39;t seem to answer the big question of where wit=\r\nhin the substrate to add the nodes?  Or would you just increase overall den=\r\nsity uniformly?  My concern is that biological brains did not increase in d=\r\nensity (which for them may just mean size) uniformly.  That is, some parts =\r\nof the brain got bigger while others did not.  That would seem to imply tha=\r\nt a substrate should be able to add density selectively to specific regions=\r\n that evolution decides on itself.  Or perhaps your idea incorporates that =\r\nkind of regional growth somehow already?\n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; About saturation =\r\nof the sigmoid- that is indeed an important issue.  Right now we are invest=\r\nigating some techniques to mitigate saturation, which I think will end up b=\r\neing effective and also which will facilitate the kind of massive substrate=\r\n complexification that would be really cool to see in the future.\n&gt; &gt; &gt; &gt; \n=\r\n&gt; &gt; &gt; &gt; Still, we still do not have any elegant algorithm to evolve the sub=\r\nstrate, though I am confident it will be possible.\n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; ken\n&gt; &gt;=\r\n &gt; &gt; \n&gt; &gt; &gt; &gt; --- In neat@yahoogroups.com, &quot;petar_chervenski&quot; &lt;petar_cherve=\r\nnski@&gt; wrote:\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; Hi all!\n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt; I was gone f=\r\nor a while, but before a day or so I had some spare time to continue my res=\r\nearch about automated substrate evolution. \n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt; My latest =\r\nresearch so far ended up with a system capable of approximating any spatial=\r\n CPPN picture with a developing mesh based on the Growing Neural Gas algori=\r\nthm. While this worked well and could be used for evolving substrate config=\r\nurations right away, there was still a problem about deciding the right num=\r\nber of nodes for particular individuals. With GNG, it is more like a proble=\r\nm of deciding when to stop development or approximation of the CPPN picture=\r\n. \n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt; When we discussed the issue some time ago, I had th=\r\ne idea that CPPN complexity can be directly linked to substrate density. Mo=\r\nre complex CPPN =3D more dense substrate. This seems like a solution but it=\r\n I think it is actually a bad idea. A CPPN containing many nodes and links =\r\ndoes not always produce a complex pattern in space. It can be an entirely w=\r\nhite or black picture, due to genetic defects. Plus, it is not sure that th=\r\ne problem requires that many nodes to be solved - the CPPN may have enormou=\r\ns complexity but producing a simple well-shaped picture that solves it. \n&gt; =\r\n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt; So what I think now is, that substrate density should be=\r\n related to fitness instead. How exactly? Well here is my idea. \n&gt; &gt; &gt; &gt; &gt; =\r\n\n&gt; &gt; &gt; &gt; &gt; All individuals start with a minimal number of nodes in the subs=\r\ntrate, say 50. There will be a mutation increasing the number of nodes with=\r\n about 0%-10% or decreasing with 0%-10%. The mutation rate will vary across=\r\n species. Species that are stagnating for too long time will have the proba=\r\nbility of this mutation increased - because they may just lack the number o=\r\nf nodes to solve the problem. Or have too many nodes. \n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt;=\r\n You know, there is a problem with having the number of nodes increasing an=\r\nd this is the over saturation of the sigmoid. Increasing the density with 2=\r\nx will have very big impact if the weights are not altered, especially in c=\r\nase recurrence is present. How can we cope with that? \n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; &gt;=\r\n I don&#39;t have any experimental data yet, I am too busy programming some bul=\r\nlshit but please tell me if this ideas make sense to you. \n&gt; &gt; &gt; &gt; &gt; \n&gt; &gt; &gt;=\r\n &gt; &gt; Peter\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n"}}