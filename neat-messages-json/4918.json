{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":344770313,"authorName":"Colin Green","from":"Colin Green &lt;colin.green1@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"dBm9otiWGK74qZCscKQE1t4r2gWzMHW40XgnaTaGzkRaU9E2uNTK1geiJlBdxWAhtldPYR4C-78p08K70YNW8NIzslbG-Q7ZA0-r1UnB-rY","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] FloatFastConcurrentNetwork - Performance Optimization","postDate":"1259106723","msgId":4918,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDcyN2E0MDZjMDkxMTI0MTU1MnA3NTk0YmU4MmhjYjA2MjI0NDMwNmJhMjkxQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGhlZmQ1YStnb2czQGVHcm91cHMuY29tPg==","referencesHeader":"PGhlZmQ1YStnb2czQGVHcm91cHMuY29tPg=="},"prevInTopic":4917,"nextInTopic":4920,"prevInTime":4917,"nextInTime":4919,"topicId":4917,"numMessagesInTopic":12,"msgSnippet":"Hi, 2009/11/24 Daniel  ... How big are the networks? 0.3ms is quite a long time for one call so I m guessing your networks have","rawEmail":"Return-Path: &lt;colin.green1@...&gt;\r\nX-Sender: colin.green1@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 28585 invoked from network); 24 Nov 2009 23:53:04 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m12.grp.re1.yahoo.com with QMQP; 24 Nov 2009 23:53:04 -0000\r\nX-Received: from unknown (HELO mail-yx0-f180.google.com) (209.85.210.180)\n  by mta1.grp.sp2.yahoo.com with SMTP; 24 Nov 2009 23:53:03 -0000\r\nX-Received: by yxe10 with SMTP id 10so6656015yxe.12\n        for &lt;neat@yahoogroups.com&gt;; Tue, 24 Nov 2009 15:52:03 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.91.173.5 with SMTP id a5mr5675624agp.83.1259106723141; Tue, 24 \n\tNov 2009 15:52:03 -0800 (PST)\r\nIn-Reply-To: &lt;hefd5a+gog3@...&gt;\r\nReferences: &lt;hefd5a+gog3@...&gt;\r\nDate: Tue, 24 Nov 2009 23:52:03 +0000\r\nMessage-ID: &lt;727a406c0911241552p7594be82hcb062244306ba291@...&gt;\r\nTo: neat@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Colin Green &lt;colin.green1@...&gt;\r\nSubject: Re: [neat] FloatFastConcurrentNetwork - Performance Optimization\r\nX-Yahoo-Group-Post: member; u=344770313; y=8KEB-LD4_qWvC5CMb5XnHi0z5RfLF2g0sAlGs551IrmiQshdsn5l\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nHi,\n\n2009/11/24 Daniel &lt;daniel_kuppitz@...&gt;\n&gt;\n&gt; I&#39;ve played around with a quite large network and took a look at the execution performance of HyperSharpNEAT. There was one\n&gt; outstanding method (besides my actual evaluation method): FloatFastConcurrentNetwork.SingleStep()\n\nHow big are the networks? 0.3ms is quite a long time for one call so\nI&#39;m guessing your networks have 100k or so connections?\n\n\n&gt; The method has an execution time of only 0.3ms (avg) but it&#39;s called hundreds of millions of times, so I&#39;ve tried to optimize this\n&gt; method - with success. I&#39;ve added some unsafe code; the methods readability is lost, but IMO the performance improvement\n&gt; redresses that.\n\nYeh I think the pointer arithmetic means you don&#39;t get the little bit\nof overhead from indexing an array, also it probably skips the array\nbounds checking.\n\n&gt; Some facts:\n&gt;\n&gt; With the original method a call to PerformOneGeneration() took 218 seconds in average. With my modified version and the same &gt; network a call took 124 seconds (that&#39;s only 57% of the original version).\n\nI tried it with a smallish network of 369 connections and it was about\n10% faster. I wonder, did you make any other changes?\n\nEven so it&#39;s an interesting idea that might be useful throughout the\ncode in general.\n\nColin.\n\n"}}