{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":253727962,"authorName":"ker_31_toluca","from":"&quot;ker_31_toluca&quot; &lt;ker_31_toluca@...&gt;","profile":"ker_31_toluca","replyTo":"LIST","senderId":"7iowYqUhBDoA7FnEtl7ksVD-Ak00kTXxg3NUFncRUjzhpvZEpK1_Ng1MEm8K-HE1QuCJFCP6Hw2tg8atWxjJwJ8SXDN1bzfT_xZteDASGjII1X0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"my Xor experiment","postDate":"1281228064","msgId":5311,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGkza3VmMCtsbDBuQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":5312,"prevInTime":5310,"nextInTime":5312,"topicId":5311,"numMessagesInTopic":3,"msgSnippet":"Hi, i am trying to do my own Xor experiment, and what I want is that a CPPN encode a function for the weights of 3 layer network (inputs, hidden, outputs) .","rawEmail":"Return-Path: &lt;ker_31_toluca@...&gt;\r\nX-Sender: ker_31_toluca@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 56077 invoked from network); 8 Aug 2010 00:45:28 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 8 Aug 2010 00:45:28 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta1.grp.sp2.yahoo.com with SMTP; 8 Aug 2010 00:45:28 -0000\r\nX-Received: from [69.147.65.147] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 08 Aug 2010 00:41:06 -0000\r\nX-Received: from [98.137.34.184] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 08 Aug 2010 00:41:06 -0000\r\nDate: Sun, 08 Aug 2010 00:41:04 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;i3kuf0+ll0n@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;ker_31_toluca&quot; &lt;ker_31_toluca@...&gt;\r\nSubject: my Xor experiment\r\nX-Yahoo-Group-Post: member; u=253727962; y=3Ij0SdGH3zdF72rFeGuhajVCz1tzpsxoX9zDnkWyz93dhuxCvbLV0A\r\nX-Yahoo-Profile: ker_31_toluca\r\n\r\nHi,\ni am trying to do my own Xor experiment, and what I want is that a CPPN=\r\n encode a function for the weights of 3 layer network (inputs, hidden, outp=\r\nuts) . These would be the variables for the CPPN:\nSrc: source node \nDst: de=\r\nstination node \nLay: the layer (1-Hidden, 2-Output)\n\nSo, I changed the code=\r\n in XorExperiment::createInitialPopulation() to use these genes:\n\ngenes.pus=\r\nh_back(GeneticNodeGene(&quot;Bias&quot;,&quot;NetworkSensor&quot;,0,false));\ngenes.push_back(Ge=\r\nneticNodeGene(&quot;Src&quot;,&quot;NetworkSensor&quot;,0,false));\ngenes.push_back(GeneticNodeG=\r\nene(&quot;Dst&quot;,&quot;NetworkSensor&quot;,0,false));\ngenes.push_back(GeneticNodeGene(&quot;Lay&quot;,=\r\n&quot;NetworkSensor&quot;,0,false));        genes.push_back(GeneticNodeGene(&quot;Output&quot;,=\r\n&quot;NetworkOutputNode&quot;,1,false,ACTIVATION_FUNCTION_SIGMOID));\n\nDone that, I ha=\r\nve modified the ProcessGroup() function to query the weights and from those=\r\n weights create a network that will be evaluated for fitness:\n\n    void Xor=\r\nExperiment::processGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt; generation)\n  =\r\n  {\n        NEAT::FastNetwork&lt;float&gt; network =3D group[0]-&gt;spawnFastPhenoty=\r\npeStack&lt;float&gt;();\n        vector&lt;NEAT::NetworkNode*&gt; nodes;\n        vector&lt;=\r\nNEAT::NetworkLink*&gt; links;\n        \n        double weight;\n      \n        i=\r\nnt out,in;\n        \n        nodes.push_back(new NEAT::NetworkNode(&quot;Input1&quot;,=\r\nfalse));         //      0\n        nodes.push_back(new NEAT::NetworkNode(&quot;I=\r\nnput2&quot;,false));         //      1\n        nodes.push_back(new NEAT::Network=\r\nNode(&quot;Hidden1&quot;,true));         //      2\n        nodes.push_back(new NEAT::=\r\nNetworkNode(&quot;Hidden2&quot;,true));         //      3\n        nodes.push_back(new=\r\n NEAT::NetworkNode(&quot;Hidden3&quot;,true));         //      4\n        nodes.push_b=\r\nack(new NEAT::NetworkNode(&quot;Output&quot;,true));          //      5\n        nodes=\r\n.push_back(new NEAT::NetworkNode(&quot;Bias&quot;,true));            //      6\n      =\r\n  \n        network.reinitialize();   \n        network.setValue(&quot;Bias&quot;,0.3f)=\r\n;\n\n  \n        // calculate link values between input and hidden nodes\n     =\r\n   // inputs -&gt; hidden\n        network.setValue(&quot;Lay&quot;,1);\n        // inputs=\r\n -&gt; hidden1\n        network.setValue(&quot;Src&quot;,1); network.setValue(&quot;Dst&quot;,1); n=\r\network.update();\n        links.push_back(new NEAT::NetworkLink(nodes[0],nod=\r\nes[2],true,network.getValue(&quot;Output&quot;)));\n        network.setValue(&quot;Src&quot;,2);=\r\n network.setValue(&quot;Dst&quot;,1); network.update();\n        links.push_back(new N=\r\nEAT::NetworkLink(nodes[1],nodes[2],true,network.getValue(&quot;Output&quot;)));\n     =\r\n   // inputs -&gt; hidden2\n        network.setValue(&quot;Src&quot;,1); network.setValue=\r\n(&quot;Dst&quot;,2); network.update();\n        links.push_back(new NEAT::NetworkLink(=\r\nnodes[0],nodes[3],true,network.getValue(&quot;Output&quot;)));\n        network.setVal=\r\nue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,2); network.update();  \n        links.p=\r\nush_back(new NEAT::NetworkLink(nodes[1],nodes[3],true,network.getValue(&quot;Out=\r\nput&quot;)));\n        // inputs -&gt; hidden3\n        network.setValue(&quot;Src&quot;,1); ne=\r\ntwork.setValue(&quot;Dst&quot;,3); network.update();  \n        links.push_back(new NE=\r\nAT::NetworkLink(nodes[0],nodes[4],true,network.getValue(&quot;Output&quot;)));\n      =\r\n  network.setValue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,3); network.update();  =\r\n\n        links.push_back(new NEAT::NetworkLink(nodes[1],nodes[4],true,netwo=\r\nrk.getValue(&quot;Output&quot;)));\n\n        // hidden -&gt; output\n        network.setVa=\r\nlue(&quot;Lay&quot;,2);\n        // hidden1 -&gt; output\n        network.setValue(&quot;Src&quot;,1=\r\n); network.setValue(&quot;Dst&quot;,1); network.update();\n        links.push_back(new=\r\n NEAT::NetworkLink(nodes[2],nodes[5],true,network.getValue(&quot;Output&quot;)));\n   =\r\n     network.setValue(&quot;Src&quot;,2); network.setValue(&quot;Dst&quot;,1); network.update()=\r\n;\n        links.push_back(new NEAT::NetworkLink(nodes[3],nodes[5],true,netw=\r\nork.getValue(&quot;Output&quot;)));\n        network.setValue(&quot;Src&quot;,3); network.setVal=\r\nue(&quot;Dst&quot;,1); network.update();\n        links.push_back(new NEAT::NetworkLin=\r\nk(nodes[4],nodes[5],true,network.getValue(&quot;Output&quot;)));\n        // bias -&gt; h=\r\nidden\n        network.setValue(&quot;Src&quot;,0); network.setValue(&quot;Dst&quot;,3); network=\r\n.update();\n        links.push_back(new NEAT::NetworkLink(nodes[6],nodes[2],=\r\ntrue,network.getValue(&quot;Output&quot;)));\n        network.setValue(&quot;Src&quot;,0); netwo=\r\nrk.setValue(&quot;Dst&quot;,4); network.update();\n        links.push_back(new NEAT::N=\r\networkLink(nodes[6],nodes[3],true,network.getValue(&quot;Output&quot;)));\n        net=\r\nwork.setValue(&quot;Src&quot;,0); network.setValue(&quot;Dst&quot;,5); network.update();\n      =\r\n  links.push_back(new NEAT::NetworkLink(nodes[6],nodes[4],true,network.getV=\r\nalue(&quot;Output&quot;)));\n        // bias -&gt; output   \n        network.setValue(&quot;Sr=\r\nc&quot;,0); network.setValue(&quot;Dst&quot;,6); network.update();\n        links.push_back=\r\n(new NEAT::NetworkLink(nodes[6],nodes[5],true,network.getValue(&quot;Output&quot;)));=\r\n\n        \n        NEAT::FastNetwork&lt;float&gt; xornet(nodes,links);\n        gro=\r\nup[0]-&gt;reward(10);\n        \n        for (int x1=3D0;x1&lt;2;x1++)\n        {\n  =\r\n          for (int x2=3D0;x2&lt;2;x2++)\n            {\n                xornet.r=\r\neinitialize();\n        \n                xornet.setValue(&quot;Input1&quot;,x1);\n     =\r\n           xornet.setValue(&quot;Input2&quot;,x2);\n                xornet.setValue(&quot;B=\r\nias&quot;,0.3f);\n        \n                xornet.update();\n\n                doub=\r\nle value =3D xornet.getValue(&quot;Output&quot;);\n\n                double expectedVal=\r\nue =3D (double)(x1 ^ x2);\n                printf(&quot;value=3D%f, expectedValue=\r\n=3D%f&#92;n&quot;,value,expectedValue);\n        \n                group[0]-&gt;reward(50=\r\n00*(2-fabs(value-expectedValue)));\n            }\n        }\n    }   \n\nYou ca=\r\nn see that I manually build a 2 input, 3 hidden and 1 output network. Weigh=\r\nts are the value of &quot;Output&quot; node of the CPPN.\nBut this model doesn&#39;t work.=\r\n I stalls at some point and the values of the weighs stop mutating. The max=\r\nimum fitness I reach is around 31000, where the original example model reac=\r\nhes almost 40000 (the maximum)\nI wonder, what did I wrong here?\nThanks in a=\r\ndvance.\nNick\n\n\n\n"}}