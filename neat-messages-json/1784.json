{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"XIErg_x6zNUf64VyZk1VVdk93lQzIMSdD_1Ujvuf2-BhDQBzo47qIljcZzy872KEAAYgdttVa6D_6zVaJh23nBHdTBKee6G-yxTfGtMj64s_","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: loop recurrent link and non loop recurrent link","postDate":"1105487855","msgId":1784,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGNzMXA1ZitpMTdpQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMDUwMTExMTU1NDE5LjY1NTYwLnFtYWlsQHdlYjUzNjA0Lm1haWwueWFob28uY29tPg=="},"prevInTopic":1782,"nextInTopic":0,"prevInTime":1783,"nextInTime":1785,"topicId":1782,"numMessagesInTopic":2,"msgSnippet":"... You are correct that non-loop recurrent links (in fact all recurrent links) behave just like normal links.  However, from a functional perspective, a","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 41901 invoked from network); 11 Jan 2005 23:57:40 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m7.grp.scd.yahoo.com with QMQP; 11 Jan 2005 23:57:40 -0000\r\nReceived: from unknown (HELO n9a.bulk.scd.yahoo.com) (66.94.237.43)\n  by mta4.grp.scd.yahoo.com with SMTP; 11 Jan 2005 23:57:39 -0000\r\nReceived: from [66.218.69.2] by n9.bulk.scd.yahoo.com with NNFMP; 11 Jan 2005 23:57:39 -0000\r\nReceived: from [66.218.67.188] by mailer2.bulk.scd.yahoo.com with NNFMP; 11 Jan 2005 23:57:39 -0000\r\nDate: Tue, 11 Jan 2005 23:57:35 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;cs1p5f+i17i@...&gt;\r\nIn-Reply-To: &lt;20050111155419.65560.qmail@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 2194\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Remote-IP: 66.94.237.43\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: loop recurrent link and non loop recurrent link\r\nX-Yahoo-Group-Post: member; u=54567749\r\nX-Yahoo-Profile: kenstanley01\r\n\r\n\n--- In neat@yahoogroups.com, jie bennet &lt;benneyjie@y...&gt; wrote:\n&gt; I notice that in Kenneth&#39;s source code, half of the\n&gt; recurrent links are loop links, others are not. like\n&gt; this:\n&gt; \n&gt; Genome::mutate_add_link(){\n&gt; .....\n&gt;       if (loop_recur) {\n&gt; \tnodenum1=randint(first_nonsensor,nodes.size()-1);\n&gt; \tnodenum2=nodenum1;\n&gt;       }\n&gt;       else {\n&gt; \t//Choose random nodenums\n&gt; \tnodenum1=randint(0,nodes.size()-1);\n&gt; \tnodenum2=randint(first_nonsensor,nodes.size()-1);\n&gt;       }\n&gt; .....\n&gt; }\n&gt; \n&gt; For a non loop recurrent link, input and output are\n&gt; different node, and when a node activate, the\n&gt; activation function don&#39;t check a link is recurrent or\n&gt; not, it is used as normal link. code is in\n&gt; Network::activate().\n&gt; \n&gt; Then, what sense does it make for the existance of a\n&gt; non loop recurrent link? Seems it behave exactly like\n&gt; a normal link. Am I right?\n&gt; \n&gt; \n&gt; \n&gt; \n\nYou are correct that non-loop recurrent links (in fact all recurrent\nlinks) behave just like normal links.  However, from a functional\nperspective, a network that contains recurrent links is different from\none that does not.  Recurrence means feedback, which means a network\nwith any link that feeds information back into that net is capable of\nkeeping and processing state information from prior timesteps.  That\nis a substantially different capability than is present in strictly\nfeedforward networks.  Therefore, my NEAT code identifies recurrent\nconnection and allows you to set how frequently they should appear, so\nthat you can potentially bar them entirely if you want to look at\npurely non-feedback solutions (as is common in XOR).  In other words,\nthe recurrent link identification code is mostly for the convenience\nof the user, and doesn&#39;t have anything to do with how network\nactivation is processed.\n\nIt&#39;s worth noting that some NEAT implementations identify recurrence\nin better ways than my code.  For example, Mat Buckland&#39;s code keeps\ntrack of row numbers for nodes and identifies recurrent links by\nchecking whether they point from a higher row to a lower row.  My code\ndoesn&#39;t know what row any nodes are in so it has to go searching\naround the graph for loops in order to check for recurrence.\n\nken\n\n\n\n\n"}}