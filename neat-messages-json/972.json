{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"ad4hsVqVQrUKbXdBVnQUDLgCCt71LCUTIV6Oazr7huI82R95LeNK566nJfnzzgyOpn1JQwNl9Q1myDZ_8GHIBGfk8eCytAMKjOg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Computation Time","postDate":"1086279576","msgId":972,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4wLjYuMC4yMDA0MDYwMzE2NDkzMi4wMjUxMmUzMEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDQwQkNGNDE4LjcwMzA5MDVAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDFkNDEwMWM0NDY3ZiQzZDkyODU2MCQ3NGNiMDEwYUBtYWlsMndvcmxkLmNvbT4gPDQwQkNGNDE4LjcwMzA5MDVAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":936,"nextInTopic":978,"prevInTime":971,"nextInTime":973,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"... Hi, I used to be a games programmer so I know about squeezing the last cycle out of the CPU.  Or used to... The difference between everyday float functions","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 71527 invoked from network); 3 Jun 2004 16:16:33 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m8.grp.scd.yahoo.com with QMQP; 3 Jun 2004 16:16:33 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta4.grp.scd.yahoo.com with SMTP; 3 Jun 2004 16:16:33 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 3 Jun 2004 16:16:27 -0000\r\nMessage-Id: &lt;6.1.0.6.0.20040603164932.02512e30@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.0.6\r\nDate: Thu, 03 Jun 2004 17:19:36 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;40BCF418.7030905@...&gt;\r\nReferences: &lt;1d4101c4467f$3d928560$74cb010a@...&gt;\n &lt;40BCF418.7030905@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.33\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Re: Computation Time\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 22:24 01/06/2004, you wrote:\n&gt;Chad Bohannan wrote:\n&gt;\n&gt; &gt; There are common processors, like microcontrolers, that don&#39;t have a\n&gt; &gt; floating point processor. If you wanted to launch a netork on\n&gt; &gt; motorolla&#39;s HC08, for example, doing everything in integers would be\n&gt; &gt; an enormous speed boost ( rough guess ~80% ).\n&gt;\n&gt;Thats right Chad. Certainly before the days of dedicated built-in FPUs\n&gt;floating point math was painfully slow. But even in todays CPUs with\n&gt;highly optimized FPUs I think that integer math executes faster than\n&gt;floating point.  Coming up with an integer based activation function\n&gt;might be a problem. In the paper I read one way was to use a load\n&gt;different lines functions for diferent ranges of X and then a lookup\n&gt;table for the sigma curve.\n\nHi,\n         I used to be a games programmer so I know about squeezing the last \ncycle out of the CPU.  Or used to...\n\n         The difference between everyday float functions (multiply, add and \nsubtract) and integer is no longer worth worrying about on many \nCPUs.  Divide is slower, as it always was, but nothing like as bad as it \nused to be.  And transcendental functions (Sqrt, Sin, Tan) are all still \nreal killers.  So, if I were doing this, I would try to code an activation \nfunction using:\n\ni) float maths\nii) no loops\niii) minimal terms\niv) no transcendental functions\nv) _one_ divide (on the basis that you won&#39;t manage none)\n\n         But I would want to see profiling results to prove this was a \nsignificant CPU hot spot before putting too much work into it.  There&#39;s so \nmuch else can eat CPU these days.  For example, if the network can be \nupdated as a straight loop through a set of arrays, then most of the CPU \nmay indeed be in the maths.  OTOH, if the loop contains a couple of \nconditional jumps and a function call (or worse a call through a pointer) \nthen you may be spending as much CPU on the body of the loop.\n\n         I was just playing with some equations, it&#39;s not easy to get the \nright properties.  But how about x/(n+abs(x))?  That&#39;s a sigmoid, symmetric \nabout zero, equal to +1 at +infinity and -1 at -infinity.  n controls the \nsteepness and is equal to the x value where the curve reaches +0.5...\n\n         Ian Badcoe\n\n&gt;Eliminating the need to call trig functions in the activation function\n&gt;is itself another signifiant optimization.\n&gt;\n&gt;Colin.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n"}}