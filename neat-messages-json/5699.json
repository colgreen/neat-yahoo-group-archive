{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":159465226,"authorName":"Matthew_Hausknecht","from":"&quot;Matthew_Hausknecht&quot; &lt;matthew_hausknecht@...&gt;","profile":"Matthew_Hausknecht","replyTo":"LIST","senderId":"qZLwgxnNAm44BzMDp2DGGLJdjz0pbnoGaHu29rP5zP_DRGlM7UkvPAW69ncr8DekKUL6fXOL0sGpmCQ8PBszjLjwLEH_uP7oD4zjUkFmsMm-bopwGgyLIt3B","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Hyperneat Network Output Layer All Zero","postDate":"1321916238","msgId":5699,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGphZWwwZSs2dDVyQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":5701,"prevInTime":5698,"nextInTime":5700,"topicId":5699,"numMessagesInTopic":7,"msgSnippet":"Hi, I m trying to run Hyperneat on a simple Atari game and was starting out by replicating some of the experiment examples. My code compiles and runs, but the","rawEmail":"Return-Path: &lt;matthew_hausknecht@...&gt;\r\nX-Sender: matthew_hausknecht@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 78265 invoked from network); 21 Nov 2011 22:57:21 -0000\r\nX-Received: from unknown (98.137.35.162)\n  by m12.grp.sp2.yahoo.com with QMQP; 21 Nov 2011 22:57:20 -0000\r\nX-Received: from unknown (HELO ng10-ip1.bullet.mail.ne1.yahoo.com) (98.138.215.189)\n  by mta6.grp.sp2.yahoo.com with SMTP; 21 Nov 2011 22:57:20 -0000\r\nX-Received: from [98.138.217.182] by ng10.bullet.mail.ne1.yahoo.com with NNFMP; 21 Nov 2011 22:57:19 -0000\r\nX-Received: from [69.147.65.148] by tg7.bullet.mail.ne1.yahoo.com with NNFMP; 21 Nov 2011 22:57:19 -0000\r\nX-Received: from [98.137.35.12] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 21 Nov 2011 22:57:19 -0000\r\nDate: Mon, 21 Nov 2011 22:57:18 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;jael0e+6t5r@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Matthew_Hausknecht&quot; &lt;matthew_hausknecht@...&gt;\r\nSubject: Hyperneat Network Output Layer All Zero\r\nX-Yahoo-Group-Post: member; u=159465226; y=2FNe7_9J7LKqrCZAaL-AeJr7ufF0bF9FltIAYhRy4yKuo-W79FAD_QqcHmIw\r\nX-Yahoo-Profile: Matthew_Hausknecht\r\n\r\nHi, I&#39;m trying to run Hyperneat on a simple Atari game and was starting out=\r\n by replicating some of the experiment examples. My code compiles and runs,=\r\n but the value of the output node in the network always seems to be zero. I=\r\n suspect I am doing something wrong in the initalization/update step, but I=\r\n&#39;m not sure what... Code is as follows:\n\n#include &quot;HCUBE_Defines.h&quot;\n\n#inclu=\r\nde &quot;Experiments/HCUBE_AtariExperiment.h&quot;\n#include &lt;boost/foreach.hpp&gt;\n\nusin=\r\ng namespace NEAT;\n\nenum GamePositionValue {\n  EMPTY,\n  CHICKEN,\n  VEHICLE\n}=\r\n;\n\nnamespace HCUBE\n{\n  AtariExperiment::AtariExperiment(string _experimentN=\r\name,int _threadID):\n    Experiment(_experimentName,_threadID)\n  {\n    layer=\r\nInfo =3D NEAT::LayeredSubstrateInfo();\n    layerInfo.layerSizes.push_back(V=\r\nector2&lt;int&gt;(8,8));\n    layerInfo.layerIsInput.push_back(true);\n    layerInf=\r\no.layerLocations.push_back(Vector3&lt;float&gt;(0,0,0));\n    layerInfo.layerNames=\r\n.push_back(&quot;Input&quot;);\n\n    layerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8))=\r\n;\n    layerInfo.layerIsInput.push_back(false);\n    layerInfo.layerLocations=\r\n.push_back(Vector3&lt;float&gt;(0,4,0));\n    layerInfo.layerNames.push_back(&quot;Outp=\r\nut&quot;);\n\n    layerInfo.layerAdjacencyList.push_back(std::pair&lt;string,string&gt;(=\r\n&quot;Input&quot;,&quot;Output&quot;));\n\n    layerInfo.normalize =3D true;\n    layerInfo.useOld=\r\nOutputNames =3D false;\n    layerInfo.layerValidSizes =3D layerInfo.layerSiz=\r\nes;\n\n    substrate =3D NEAT::LayeredSubstrate&lt;float&gt;();\n    substrate.setLa=\r\nyerInfo(layerInfo);\n  }\n\n  NEAT::GeneticPopulation* AtariExperiment::create=\r\nInitialPopulation(int populationSize) {\n    GeneticPopulation *population =\r\n=3D new GeneticPopulation();\n    vector&lt;GeneticNodeGene&gt; genes;\n\n    genes.=\r\npush_back(GeneticNodeGene(&quot;Bias&quot;,&quot;NetworkSensor&quot;,0,false));\n    genes.push_=\r\nback(GeneticNodeGene(&quot;X1&quot;,&quot;NetworkSensor&quot;,0,false));\n    genes.push_back(Ge=\r\nneticNodeGene(&quot;X2&quot;,&quot;NetworkSensor&quot;,0,false));\n    genes.push_back(GeneticNo=\r\ndeGene(&quot;Y1&quot;,&quot;NetworkSensor&quot;,0,false));\n    genes.push_back(GeneticNodeGene(=\r\n&quot;Y2&quot;,&quot;NetworkSensor&quot;,0,false));\n    genes.push_back(GeneticNodeGene(&quot;Output=\r\n&quot;,&quot;NetworkOutputNode&quot;,1,false,ACTIVATION_FUNCTION_SIGMOID));\n\n    for (int =\r\na=3D0;a&lt;populationSize;a++) {\n      shared_ptr&lt;GeneticIndividual&gt; individua=\r\nl(new GeneticIndividual(genes,true,1.0));\n      for (int b=3D0;b&lt;0;b++) {\n =\r\n       individual-&gt;testMutate();\n      }\n      population-&gt;addIndividual(in=\r\ndividual);\n    }\n\n    cout &lt;&lt; &quot;Finished creating population&#92;n&quot;;\n    return =\r\npopulation;\n  }\n\n  void AtariExperiment::populateSubstrate(shared_ptr&lt;NEAT:=\r\n:GeneticIndividual&gt; individual) {\n    if (currentSubstrateIndividual =3D=3D=\r\n individual)\n      return;\n\n    currentSubstrateIndividual =3D individual;\n=\r\n    substrate.populateSubstrate(individual);\n  }\n\n  void AtariExperiment::p=\r\nrocessGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt; generation)\n  {\n    shared_=\r\nptr&lt;NEAT::GeneticIndividual&gt; individual =3D group.front();\n    //You get 10=\r\n points just for being processed, wahooo!\n    individual-&gt;setFitness(10);\n =\r\n   populateSubstrate(individual);\n    runAtariEpisode(individual);\n  }\n\n  v=\r\noid AtariExperiment::runAtariEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt; in=\r\ndividual) {\n    GamePositionValue gameState[8][8];\n\n    int chic_x =3D 4, c=\r\nhic_y =3D 7;\n    float total_reward =3D 0.0;\n    \n    // Initialize Game\n  =\r\n  for (int x=3D0;x&lt;8;x++) {\n      for (int y=3D0;y&lt;8;y++) {\n        gameSta=\r\nte[x][y] =3D EMPTY;\n      }\n    }\n    gameState[chic_x][chic_y] =3D CHICKEN=\r\n;\n\n    // Run simulation for t timesteps\n    int num_timesteps =3D 10;\n    =\r\nfor (int t=3D0; t&lt;num_timesteps; t++) {\n      substrate.getNetwork()-&gt;reini=\r\ntialize();\n      substrate.getNetwork()-&gt;dummyActivation();\n\n      // Set s=\r\nubstrate values\n      for (int x=3D0; x&lt;8; ++x) {\n        for (int y=3D0; y=\r\n&lt;8; ++y) {\n          // if (gameState[x][y] =3D=3D CHICKEN) {\n          // =\r\n  substrate.setValue((Node(x,y,0)), 1.0);\n          // } else if (gameState=\r\n[x][y] =3D=3D VEHICLE) {\n          //   substrate.setValue((Node(x,y,0)), -=\r\n1.0);            \n          // } else {\n          //   substrate.setValue((=\r\nNode(x,y,0)), 0.0);            \n          // }\n          substrate.setValue=\r\n((Node(x,y,0)), (float)((7.0-y)/7.0));\n        }\n      }\n\n      substrate.g=\r\netNetwork()-&gt;update();\n\n      for (int x=3D0; x&lt;8; ++x) {\n        for (int =\r\ny=3D0; y&lt;8; ++y) {\n          float val =3D substrate.getValue((Node(x,y,1))=\r\n);\n          if (val !=3D 0)\n            printf(&quot;Got Nonzero val %f at %d,%=\r\nd&#92;n&quot;,val,x,y);\n        }\n      }\n      float chicken_val =3D substrate.getV=\r\nalue((Node(chic_x,chic_y,1)));\n      float down_val =3D (chic_y =3D=3D 7) ?=\r\n chicken_val : substrate.getValue((Node(chic_x,chic_y+1,1)));\n      float u=\r\np_val =3D (chic_y =3D=3D 0) ? chicken_val : substrate.getValue((Node(chic_x=\r\n,chic_y-1,1)));\n\n      int action;\n      if (chicken_val &gt;=3D up_val) {\n   =\r\n     if (chicken_val &gt;=3D down_val) {\n          action =3D 0;\n        } els=\r\ne {\n          action =3D +1;\n        }\n      } else {\n        if (up_val &gt;=\r\n=3D down_val) {\n          action =3D -1;\n        } else {\n          action =\r\n=3D 1;\n        }\n      }\n\n      // Update game state with action\n      game=\r\nState[chic_x][chic_y] =3D EMPTY;\n      gameState[chic_x][chic_y+action] =3D=\r\n CHICKEN;\n      chic_y +=3D action;\n\n      // Compute reward\n      if (chic=\r\n_y =3D=3D 0) {\n        total_reward +=3D 1.0;\n        // Reset the sim\n    =\r\n    gameState[chic_x][chic_y] =3D EMPTY;\n        gameState[chic_x][7] =3D C=\r\nHICKEN;\n        chic_y =3D 7;\n      }\n    }\n    //cout &lt;&lt; &quot;Got total reward=\r\n: &quot; &lt;&lt; total_reward &lt;&lt; endl;\n    individual-&gt;reward(total_reward);\n  }\n\n\n\n"}}