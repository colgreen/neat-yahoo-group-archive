{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"GCkrtmXiiCPbrJz27im8CFlHT4zEwTWf5VKVMaDC3DHPXQ03w78U4F2cOkRMI30tNFkIfu8BK-eB_8R_AbVS1CdhiXvnb1Chgg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Alternative double pole fitness function","postDate":"1121899745","msgId":2135,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyREVENEUxLjgwNjAzMDBAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":2134,"nextInTime":2136,"topicId":2135,"numMessagesInTopic":1,"msgSnippet":"Over the weekend I had a deeper look into the specifics of Gruau s anti-wiggle evaluation scheme, and following some experimentation I arrived at a new fitness","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 11366 invoked from network); 20 Jul 2005 22:49:09 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m25.grp.scd.yahoo.com with QMQP; 20 Jul 2005 22:49:09 -0000\r\nReceived: from unknown (HELO ranger.systems.pipex.net) (62.241.162.32)\n  by mta2.grp.scd.yahoo.com with SMTP; 20 Jul 2005 22:49:08 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby ranger.systems.pipex.net (Postfix) with ESMTP id 275ABE000254\n\tfor &lt;neat@yahoogroups.com&gt;; Wed, 20 Jul 2005 23:49:06 +0100 (BST)\r\nMessage-ID: &lt;42DED4E1.8060300@...&gt;\r\nDate: Wed, 20 Jul 2005 23:49:05 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Alternative double pole fitness function\r\nX-Yahoo-Group-Post: member; u=127853030; y=e_gfHvwW0OSelL8wvcSxoNZhg6yMp9H6pgmQTdeBDHgFcnYA6fXO\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nOver the weekend I had a deeper look into the specifics of Gruau&#39;s \nanti-wiggle evaluation scheme, and following some experimentation I \narrived at a new fitness function that makes some refinements to the \nscheme.\n\nThe first problem I could see is that Gruau&#39;s function runs for a \nmaximum of 1000 timesteps (10 secs real time) and this isn&#39;t really long \nenough. I found that in general the evolved networks couldn&#39;t balance \nthe poles for much longer than the 10 seconds. Gruau also had a \ngeneralisation test that may have evolved better networks, but this was \nonly a post-search test, it wasn&#39;t part of the fitness function for \ndriving evolution - because it was CPU intensive. To resolve this \nproblem I increased the max timsteps to 50,000, which of course now \nintroduces a new problem of the fitness function taking a lot of CPU as \nthe networks get better and therefore balance the pole for longer, I&#39;ll \nget back to this point.\n\nAnother problem with Gruau&#39;s function is the specific use of  the \n&#39;jiggle factor&#39; (I coin this phrase for convienience). It is calculated \nfor the last 100 timesteps(1 sec) and as such may be misleading, since \nif the system became unstable then it&#39;s likely that a lot of wiggling \noccured in the last second of a simulation. Therefore I switched to \ncalculating this factor for the 100 timesteps from between 2secs and \n1sec ago - ignoring the last 1 sec.\n\nI then switched to maintaining a sliding window (FIFO buffer) of the \nstate variable used to calculate the jiggle factor, this then allows me \nto check the jiggle factor (from 2 to 1 sec ago) at each timstep, and if \nit passes a threshold then I stop the simulation. This saved wasting \ntime simulating networks that just wiggle the poles for 50,000 timesteps.\n\nA few other minor refinements were then necessary. Firstly I don&#39;t test \nthe sliding jiggle factor until 5 secs has passed, this is on the basis \nthat the system may have to oscillate quite a bit initially in order to \nget the system into a stable state, thus punishing oscillations will \nprobably place the popualtion into a very poor part of fitness space for \nthe overall task. On a similar note between 5secs and 6secs the jiggle \nfactor is calculated for a sliding window for the 1 sec just gone, from \n6 secs on this becomes the sliding window from 1 to 2 secs ago.\n\nIt&#39;s worth noting that I tried quite a few (simpler)variations on this \nscheme before arriving at the ever-so-slightly convoluted scheme \ndescribed! On to the results...\n\nWhen starting with the long pole at 1 degree (all other parameters set \nto 0) the scheme works really well and finds good solutions quickly. The \npole&#39;s are brought to an upright state and minimal movement of the cart \nis observed, some solutions still show some wiggling but not a lot. It&#39;s \nworth noting though that Gruau initialised the long pole at 4.5 degrees, \nand this task is much harder. Actually I&#39;ve been trying 4 degrees and \ndata from 4 runs gives mixed results:\n\n1) Perfect solution(max possible fitness of 50,010.00) - 354 gens, 15 mins.\n2) No good solution found (Max fitness 4,966.33) - 25,449 gens, 20 hours\n3) Near perfect solution (Max fitness 50007.09) - 4474 gens, 4hrs 20mins\n4) Near perfect solution (Max fitness 50004.25) - 23,597 gens, 31 hours.\n\nRun 1 looks like something of a fluke, I noticed this sudden discovery \nof a good solution maybe twice over the weekend whilst experimenting \n(not including this one). So I wouldn&#39;t expect this to occur in 25% of \nruns as the data suggests! The fact that a simple solution must \ntherefore exist but isn&#39;t found in 20 hours (run 2) lead me to my \nreasoning about avoiding certain areas of the fitness space. Surely this \nsearch must be stuck in a local optimum?\n\nColin.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}}