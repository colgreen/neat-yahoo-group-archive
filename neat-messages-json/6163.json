{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":37465196,"authorName":"Ken Lloyd","from":"&quot;Ken Lloyd&quot; &lt;kalloyd@...&gt;","profile":"kalloyd2","replyTo":"LIST","senderId":"CISKY7As1sbxhcFQkGS-53QudRQp-kFjf6icD0ZfMRByNwbPP-heGPJdGWQTYXc-dl3cNZ-sWn4V9CQOfGtTVZkNobFdZ1jD","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [neat] A fresh look at GPUs and OpenCL","postDate":"1372864017","msgId":6163,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwZTcwMWNlNzdmZSRmNmNiNGMwMCRlNDYxZTQwMCRAd2F0dHN5cy5jb20+","inReplyToHeader":"PENBRTBNK1ljelZVd3hDVXZGOGRVbk1qYl9TTHk5K19CdVNCal9IdUJrSkdqaVJTczc2QUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBRTBNK1ljelZVd3hDVXZGOGRVbk1qYl9TTHk5K19CdVNCal9IdUJrSkdqaVJTczc2QUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":6162,"nextInTopic":6164,"prevInTime":6162,"nextInTime":6164,"topicId":6161,"numMessagesInTopic":7,"msgSnippet":"Colin, When I started that effort, long ago, I was using GASS CUDA.NET with C# (based on your work, HyperNEAT, SharpNEAT, which I liked a lot).  There were","rawEmail":"Return-Path: &lt;kalloyd@...&gt;\r\nX-Sender: kalloyd@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 56532 invoked by uid 102); 3 Jul 2013 15:07:00 -0000\r\nX-Received: from unknown (HELO mtaq6.grp.bf1.yahoo.com) (10.193.84.37)\n  by m7.grp.bf1.yahoo.com with SMTP; 3 Jul 2013 15:07:00 -0000\r\nX-Received: (qmail 5897 invoked from network); 3 Jul 2013 15:06:59 -0000\r\nX-Received: from unknown (HELO qmta13.emeryville.ca.mail.comcast.net) (76.96.27.243)\n  by mtaq6.grp.bf1.yahoo.com with SMTP; 3 Jul 2013 15:06:59 -0000\r\nX-Received: from omta05.emeryville.ca.mail.comcast.net ([76.96.30.43])\n\tby qmta13.emeryville.ca.mail.comcast.net with comcast\n\tid vqgz1l0010vp7WLADr6zwy; Wed, 03 Jul 2013 15:06:59 +0000\r\nX-Received: from KenLloydPC ([174.50.76.146])\n\tby omta05.emeryville.ca.mail.comcast.net with comcast\n\tid vr6x1l00R39PGTS8Rr6yF8; Wed, 03 Jul 2013 15:06:58 +0000\r\nTo: &lt;neat@yahoogroups.com&gt;\r\nReferences: &lt;CAE0M+YczVUwxCUvF8dUnMjb_SLy9+_BuSBj_HuBkJGjiRSs76A@...&gt;\r\nIn-Reply-To: &lt;CAE0M+YczVUwxCUvF8dUnMjb_SLy9+_BuSBj_HuBkJGjiRSs76A@...&gt;\r\nDate: Wed, 3 Jul 2013 09:06:57 -0600\r\nMessage-ID: &lt;00e701ce77fe$f6cb4c00$e461e400$@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_00E8_01CE77CC.AC34FAB0&quot;\r\nX-Mailer: Microsoft Outlook 14.0\r\nthread-index: AQGHY1ZeJtCn3Ym1atgI5oEFxD448JnhMWGQ\r\nContent-Language: en-us\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Ken Lloyd&quot; &lt;kalloyd@...&gt;\r\nSubject: RE: [neat] A fresh look at GPUs and OpenCL\r\nX-Yahoo-Group-Post: member; u=37465196; y=fftxskSnPMiqobf1pf-dJOl9lIsiGTrgE59M_LEQfskfZXg\r\nX-Yahoo-Profile: kalloyd2\r\n\r\n\r\n------=_NextPart_000_00E8_01CE77CC.AC34FAB0\r\nContent-Type: text/plain;\n\tcharset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nColin,\n\n \n\nWhen I started that effort, long ago, I was using GASS CUDA.NET =\r\nwith C# (based on your work, HyperNEAT, SharpNEAT, which I liked a lot).  T=\r\nhere were some scalability issues, however.  There didn=E2=80=99t seem to b=\r\ne any interest and (you know how it goes).\n\n \n\nI went back to porting Hyper=\r\nNEAT C++ to CUDA (using factory classes to generate the CUDA code and to co=\r\nmpile PTX), then I got busy with clients =E2=80=A6 and writing a book.  By =\r\nthe first of 2014, I hope to have some time to return to HyperNEAT, and oth=\r\ner Gas.  HyperNEAT and its many conceptualizations are probably now mature =\r\nenough for serious HPC implementations =E2=80=93 OpenMPI, OpenMP, C/C++, CU=\r\nDA (or OpenCL, or OpenACC implementation) on scalable, hybrid, heterogeneou=\r\ns clusters, along with some n-dimensional visualization capabilities.\n\n \n\nI=\r\nf the above were =E2=80=9Cto happen=E2=80=9D, it would be a good idea (IMO)=\r\n to have some ball-park use cases from others (to be meaningful).  I have s=\r\nome UCs that are quite different from the general discussion and educationa=\r\nl aspects, but scientifically =E2=80=9Cinteresting=E2=80=9D.\n\n \n\nKen Lloyd\n=\r\n\n \n\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D\n\nKenneth A. Lloyd, Jr.\n\nCEO - Director, Systems Science\n\nWatt Sys=\r\ntems Technologies Inc.\n\n \n\n \n\n \n\nFrom: neat@yahoogroups.com [mailto:neat@ya=\r\nhoogroups.com] On Behalf Of Colin Green\nSent: Wednesday, July 03, 2013 5:27=\r\n AM\nTo: neat@yahoogroups.com\nSubject: [neat] A fresh look at GPUs and OpenC=\r\nL\n\n \n\n  \n\nHi all,\n\nI know the topic of GPU use has come up before but there=\r\n have been a\nfew recent developments in the GPU world so I thought it would=\r\n be\ninteresting to review the current situation.\n\n[CUDA]\nCUDA has been ment=\r\nioned previously and I think Ken Lloyd did some work\nusing CUDA in NEAT, bu=\r\nt AFAIK none of the NEAT implementations freely\navailable are using GPUs at=\r\n all (please correct me if I&#39;m wrong). CUDA\nwas notable as being the first =\r\nplatform to provide a general computing\nplatform/layer over GPUs rather tha=\r\nn being graphics acceleration\nspecific. As such it greatly lowered the diff=\r\niculty of using GPUs for\ngeneral computing. A notable point is that CUDA is=\r\n specific to NVIDIA\nGPUs.\n\n[OpenCL]\nOpenCL is a more recent development tha=\r\nt aims to provide an openly\ndefined GPGPU style platform. OpenCL then is a =\r\nlayer of abstraction\nfrom the hardware that allows GPGPU style code to be w=\r\nritten\nindependently of any specific h/w and to be executed on any h/w\nsupo=\r\nrting OpenCL. At this time there is already a lot of support, e.g.\nthere is=\r\n support for NVIDIA and ATI/AMD GPUs, IBM&#39;s Cell processor\nbased accelerato=\r\nr &#39;blades&#39;, and you can also run OpenCL code on an\n&#39;normal&#39; Intel multicore=\r\n CPU (which may be more useful for\ntesting/development than acceleration?).=\r\n\n\nThe main issue with OpenCL is that the it is an abstraction over\ndiverse =\r\nhardware, thus although a program may run it may not run very\nfast without =\r\nspecific knowledge of the underlying h/w and what it&#39;s\nstrengths and weakne=\r\nsses are. E.g. if code accesses more RAM that is\navailable to each processo=\r\nr then OpenCL will simply compile in\ninstructions to copy data between loca=\r\nl and main RAM thus eliminating\nthe perf gain of using local RAM. OpenCL do=\r\nes provide for querying the\nunderlying h/w for some of these factors, so yo=\r\nu could in principle\nperform a set of checks and report that the h/w isn&#39;t =\r\nsuitable for\nyour program, or maybe even dynamically adjust the program cod=\r\ne based\non reported parameters.\n\nOn the whole though I see OpenCL as a posi=\r\ntive development and\nsomething the NEAT community can potentially benefit f=\r\nrom. It is still\na relatively young platform and therefore may present some=\r\n challenges\nto code to as it develops, but I think it&#39;s mature and stable e=\r\nnough\nto consider experimenting with now.\n\n[Current GPU h/w]\nAs a ballpark =\r\nestimate of the sort of performance gains a GPGPU can\ngive us, ATI/AMDs cur=\r\nrent flagship card (Radeon 7970) has a peak\nthroughput of about 3.8 TFlops,=\r\n compared to 100 GFlops for a 4th\ngeneration quad core Intel i7. So on pape=\r\nr we&#39;re looking at a possible\n38x speedup compared to top flight CPUs. Howe=\r\nver, OpenCL does support\nutilising mutliple GPUs, e.g. in the Bitcoin minin=\r\ng world it&#39;s typical\nto have 4 and sometimes 5 GPUs in one system (using PC=\r\nI &#39;riser&#39; cables\nto distance the GPUs from the motherboard). So for a relat=\r\nively modest\ninvestment you could be looking at a possible 100x speedup com=\r\npared to\ncurrent best CPUs.\n\n[NEAT and GPUs]\nMy instinct here is to modify =\r\ncurrent NEAT code to report stats on how\nmuch time proportionally is being =\r\nspent in each stage of the NEAT\nalgorithm and to target the code that takes=\r\n up the most time, this\nwill be different across problem domains and also f=\r\nor NEAT versus\nHyperNEAT.\n\nCertainly if a problem domain is known to be CPU=\r\n heavy (e.g. uses a\nphysics simulation) then it&#39;s probably a no-brainer to =\r\nuse OpenCL for\nthat in isolation from the rest of the NEAT algorithm. For N=\r\nEAT itself\nI&#39;ve observed slowdown as ANNs grow in size and this is presumab=\r\nly\nmostly due to time to decode and/or &#39;run&#39; the ANNs, and this is of\ncours=\r\ne a greater problem in HyperNEAT where the decode stage consists\nof a NEAT =\r\ndecode and ANN activation. So there might be some scope for\nusing OpenCL th=\r\nere. One can envisage multiple GPUs where one may be\ndedicated to problem d=\r\nomain physics, one to ANN activation and another\nto ANN genome decoding (sa=\r\ny).\n\n[Typical GPU Architecture]\nFinally I&#39;m going to briefly describe the a=\r\nrchitecture of the Radeon\n7970 to give an idea of what it is capable of.\n[M=\r\nainly taken from\nhttp://www.techradar.com/reviews/pc-mac/pc-components/grap=\r\nhics-cards/amd-radeon-hd-7970-1049734/review/2]\n\nThe 7970 has:\n\n32 x Comput=\r\ne Units (CUs). These are completely independent of each\nother. If you have =\r\n2x GPUs then OpenCL will see (I think) a block of\n64 compute units, hence i=\r\nn some cases code can be accelerated just by\nadding GPUs. Each CU has:\n\n4 x=\r\n Vector Units (VUs). And each VU has:\n16 x Unified shaders (unified here ju=\r\nst means they are no longer\nspecific to a task, e.g. pixel or vector shader=\r\n, they are general\npurpose processors)\n\nSo in total there are 32 x 4 x 16 =\r\n=3D 2048 unified shaders.\n\nEach CU has 64kB of local RAM that all of the VU=\r\ns can access\n(typically for reading shared state data I would guess). In ad=\r\ndition\neach VU has it&#39;s own 64 kB of RAM (note. you would typically control=\r\n\nwhat&#39;s in these local memories in code, that is, it&#39;s not a passive\nCPU ca=\r\nche). A vector unit is basically a SIMD processor, there is one\nset of inst=\r\nructions that are executed against all 16 shaders (so e.g.\nyou can &#39;shade&#39; =\r\n16 pixels at a time). So each of the 128 vector units\ncan execute its own i=\r\nnstructions, and in turn those instructions are\noperating on 16 shaders. A =\r\nshader then consists of some minimal state\ndata specific to it and the data=\r\n it is operating on, and also\nexecution units for performing arithmetic, et=\r\nc.\n\nAn interesting thing about vector units is that conditional branches\nar=\r\ne allowed in OpenCL, that is, you can have some shaders executing a\ndiffere=\r\nnt path despite there being only one set of instructions and\none instructio=\r\nn pointer. However this is merely a trick, if VU code\ncontains a branch the=\r\nn both branches are executed for all shaders and\nthe shaders are assigned t=\r\nhe correct final result based on which\nbranch they should have followed. He=\r\nnce it&#39;s advisable to avoid\nbranches, but it&#39;s a nice feature to have avail=\r\nable so long as you\ndon&#39;t abuse it.\n\nFor more info see:\n[From Shader Code t=\r\no a Tera=EF=AC=82op: How Shader Cores Work, Kayvon\nFatahalian, Stanford Uni=\r\nversity]\n[http://s08.idav.ucdavis.edu/fatahalian-gpu-architecture.pdf]\n\nThe=\r\nre&#39;s obviously a heck of a lot more to this subject than I&#39;ve\ndescribed but=\r\n I thought this might be a reasonably good intro to\ncurrent possibilities a=\r\nround GPU use in NEAT.\n\nColin\n\n\n\nNo virus found in this message.\nChecked by=\r\n AVG - www.avg.com\nVersion: 2013.0.3345 / Virus Database: 3204/6460 - Relea=\r\nse Date: 07/03/13\n\n\r\n------=_NextPart_000_00E8_01CE77CC.AC34FAB0\r\nContent-Type: text/html;\n\tcharset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;html xmlns:v=3D&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=3D&quot;urn:schemas-micr=\r\nosoft-com:office:office&quot; xmlns:w=3D&quot;urn:schemas-microsoft-com:office:word&quot; =\r\nxmlns:m=3D&quot;http://schemas.microsoft.com/office/2004/12/omml&quot; xmlns=3D&quot;http:=\r\n//www.w3.org/TR/REC-html40&quot;&gt;&lt;head&gt;&lt;meta http-equiv=3DContent-Type content=\r\n=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;meta name=3DGenerator content=3D&quot;Microsoft=\r\n Word 14 (filtered medium)&quot;&gt;&lt;!--[if !mso]&gt;&lt;style&gt;v&#92;:* {behavior:url(#defaul=\r\nt#VML);}\no&#92;:* {behavior:url(#default#VML);}\nw&#92;:* {behavior:url(#default#VML=\r\n);}\n.shape {behavior:url(#default#VML);}\n&lt;/style&gt;&lt;![endif]--&gt;&lt;style&gt;&lt;!--\n/*=\r\n Font Definitions */\n@font-face\n\t{font-family:Wingdings;\n\tpanose-1:5 0 0 0 =\r\n0 0 0 0 0 0;}\n@font-face\n\t{font-family:Wingdings;\n\tpanose-1:5 0 0 0 0 0 0 0=\r\n 0 0;}\n@font-face\n\t{font-family:Calibri;\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;}\n@=\r\nfont-face\n\t{font-family:Tahoma;\n\tpanose-1:2 11 6 4 3 5 4 4 2 4;}\n@font-face=\r\n\n\t{font-family:Consolas;\n\tpanose-1:2 11 6 9 2 2 4 3 2 4;}\n@font-face\n\t{font=\r\n-family:Verdana;\n\tpanose-1:2 11 6 4 3 5 4 4 2 4;}\n/* Style Definitions */\np=\r\n.MsoNormal, li.MsoNormal, div.MsoNormal\n\t{margin:0in;\n\tmargin-bottom:.0001p=\r\nt;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\na:link, span=\r\n.MsoHyperlink\n\t{mso-style-priority:99;\n\tcolor:blue;\n\ttext-decoration:underl=\r\nine;}\na:visited, span.MsoHyperlinkFollowed\n\t{mso-style-priority:99;\n\tcolor:=\r\npurple;\n\ttext-decoration:underline;}\np\n\t{mso-style-priority:99;\n\tmso-margin=\r\n-top-alt:auto;\n\tmargin-right:0in;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left=\r\n:0in;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\ncode\n\t{ms=\r\no-style-priority:99;\n\tfont-family:&quot;Courier New&quot;;}\npre\n\t{mso-style-priority:=\r\n99;\n\tmso-style-link:&quot;HTML Preformatted Char&quot;;\n\tmargin:0in;\n\tmargin-bottom:.=\r\n0001pt;\n\tfont-size:10.0pt;\n\tfont-family:&quot;Courier New&quot;;}\ntt\n\t{mso-style-prio=\r\nrity:99;\n\tfont-family:&quot;Courier New&quot;;}\np.MsoNoSpacing, li.MsoNoSpacing, div.=\r\nMsoNoSpacing\n\t{mso-style-priority:1;\n\tmargin:0in;\n\tmargin-bottom:.0001pt;\n\t=\r\nfont-size:10.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\nspan.HTMLPreform=\r\nattedChar\n\t{mso-style-name:&quot;HTML Preformatted Char&quot;;\n\tmso-style-priority:99=\r\n;\n\tmso-style-link:&quot;HTML Preformatted&quot;;\n\tfont-family:&quot;Consolas&quot;,&quot;serif&quot;;}\np.=\r\nattach, li.attach, div.attach\n\t{mso-style-name:attach;\n\tmso-margin-top-alt:=\r\nauto;\n\tmargin-right:0in;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0in;\n\tfo=\r\nnt-size:9.0pt;\n\tfont-family:&quot;Arial&quot;,&quot;sans-serif&quot;;}\np.bold, li.bold, div.bol=\r\nd\n\t{mso-style-name:bold;\n\tmso-margin-top-alt:auto;\n\tmargin-right:0in;\n\tmso-=\r\nmargin-bottom-alt:auto;\n\tmargin-left:0in;\n\tfont-size:10.0pt;\n\tfont-family:&quot;=\r\nArial&quot;,&quot;sans-serif&quot;;\n\tfont-weight:bold;}\np.green, li.green, div.green\n\t{mso=\r\n-style-name:green;\n\tmso-margin-top-alt:auto;\n\tmargin-right:0in;\n\tmso-margin=\r\n-bottom-alt:auto;\n\tmargin-left:0in;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times =\r\nNew Roman&quot;,&quot;serif&quot;;\n\tcolor:#628C2A;}\np.replbq, li.replbq, div.replbq\n\t{mso-=\r\nstyle-name:replbq;\n\tmargin:3.0pt;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times Ne=\r\nw Roman&quot;,&quot;serif&quot;;}\np.ad, li.ad, div.ad\n\t{mso-style-name:ad;\n\tmso-margin-top=\r\n-alt:auto;\n\tmargin-right:0in;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0in=\r\n;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\np.underline, =\r\nli.underline, div.underline\n\t{mso-style-name:underline;\n\tmso-margin-top-alt=\r\n:auto;\n\tmargin-right:0in;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0in;\n\tf=\r\nont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\nspan.yshortcuts\n\t=\r\n{mso-style-name:yshortcuts;}\np.ad1, li.ad1, div.ad1\n\t{mso-style-name:ad1;\n\t=\r\nmso-margin-top-alt:auto;\n\tmargin-right:0in;\n\tmso-margin-bottom-alt:auto;\n\tm=\r\nargin-left:0in;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}=\r\n\np.ad2, li.ad2, div.ad2\n\t{mso-style-name:ad2;\n\tmso-margin-top-alt:auto;\n\tma=\r\nrgin-right:0in;\n\tmargin-bottom:7.5pt;\n\tmargin-left:0in;\n\tfont-size:12.0pt;\n=\r\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\np.underline1, li.underline1, div.u=\r\nnderline1\n\t{mso-style-name:underline1;\n\tmso-margin-top-alt:auto;\n\tmargin-ri=\r\nght:0in;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0in;\n\tfont-size:12.0pt;\n=\r\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;\n\ttext-decoration:underline;}\nspan.y=\r\nshortcuts1\n\t{mso-style-name:yshortcuts1;\n\tfont-family:&quot;Verdana&quot;,&quot;sans-serif=\r\n&quot;;\n\tfont-weight:bold;}\nspan.yshortcuts2\n\t{mso-style-name:yshortcuts2;\n\tfont=\r\n-family:&quot;Verdana&quot;,&quot;sans-serif&quot;;\n\tfont-weight:normal;}\nspan.EmailStyle35\n\t{m=\r\nso-style-type:personal-reply;\n\tfont-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\n\tcolor:#=\r\n1F497D;}\n.MsoChpDefault\n\t{mso-style-type:export-only;\n\tfont-size:10.0pt;}\n@=\r\npage WordSection1\n\t{size:8.5in 11.0in;\n\tmargin:1.0in 1.0in 1.0in 1.0in;}\ndi=\r\nv.WordSection1\n\t{page:WordSection1;}\n/* List Definitions */\n@list l0\n\t{mso-=\r\nlist-id:1960061614;\n\tmso-list-template-ids:1160141210;}\n@list l0:level1\n\t{m=\r\nso-level-number-format:bullet;\n\tmso-level-text:=EF=82=B7;\n\tmso-level-tab-st=\r\nop:.5in;\n\tmso-level-number-position:left;\n\ttext-indent:-.25in;\n\tmso-ansi-fo=\r\nnt-size:10.0pt;\n\tfont-family:Symbol;}\n@list l0:level2\n\t{mso-level-number-fo=\r\nrmat:bullet;\n\tmso-level-text:o;\n\tmso-level-tab-stop:1.0in;\n\tmso-level-numbe=\r\nr-position:left;\n\ttext-indent:-.25in;\n\tmso-ansi-font-size:10.0pt;\n\tfont-fam=\r\nily:&quot;Courier New&quot;;\n\tmso-bidi-font-family:&quot;Times New Roman&quot;;}\n@list l0:level=\r\n3\n\t{mso-level-number-format:bullet;\n\tmso-level-text:=EF=82=A7;\n\tmso-level-t=\r\nab-stop:1.5in;\n\tmso-level-number-position:left;\n\ttext-indent:-.25in;\n\tmso-a=\r\nnsi-font-size:10.0pt;\n\tfont-family:Wingdings;}\n@list l0:level4\n\t{mso-level-=\r\nnumber-format:bullet;\n\tmso-level-text:=EF=82=A7;\n\tmso-level-tab-stop:2.0in;=\r\n\n\tmso-level-number-position:left;\n\ttext-indent:-.25in;\n\tmso-ansi-font-size:=\r\n10.0pt;\n\tfont-family:Wingdings;}\n@list l0:level5\n\t{mso-level-number-format:=\r\nbullet;\n\tmso-level-text:=EF=82=A7;\n\tmso-level-tab-stop:2.5in;\n\tmso-level-nu=\r\nmber-position:left;\n\ttext-indent:-.25in;\n\tmso-ansi-font-size:10.0pt;\n\tfont-=\r\nfamily:Wingdings;}\n@list l0:level6\n\t{mso-level-number-format:bullet;\n\tmso-l=\r\nevel-text:=EF=82=A7;\n\tmso-level-tab-stop:3.0in;\n\tmso-level-number-position:=\r\nleft;\n\ttext-indent:-.25in;\n\tmso-ansi-font-size:10.0pt;\n\tfont-family:Wingdin=\r\ngs;}\n@list l0:level7\n\t{mso-level-number-format:bullet;\n\tmso-level-text:=EF=\r\n=82=A7;\n\tmso-level-tab-stop:3.5in;\n\tmso-level-number-position:left;\n\ttext-i=\r\nndent:-.25in;\n\tmso-ansi-font-size:10.0pt;\n\tfont-family:Wingdings;}\n@list l0=\r\n:level8\n\t{mso-level-number-format:bullet;\n\tmso-level-text:=EF=82=A7;\n\tmso-l=\r\nevel-tab-stop:4.0in;\n\tmso-level-number-position:left;\n\ttext-indent:-.25in;\n=\r\n\tmso-ansi-font-size:10.0pt;\n\tfont-family:Wingdings;}\n@list l0:level9\n\t{mso-=\r\nlevel-number-format:bullet;\n\tmso-level-text:=EF=82=A7;\n\tmso-level-tab-stop:=\r\n4.5in;\n\tmso-level-number-position:left;\n\ttext-indent:-.25in;\n\tmso-ansi-font=\r\n-size:10.0pt;\n\tfont-family:Wingdings;}\nol\n\t{margin-bottom:0in;}\nul\n\t{margin=\r\n-bottom:0in;}\n--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;\n&lt;o:shapedefaults v:ext=3D=\r\n&quot;edit&quot; spidmax=3D&quot;1026&quot; /&gt;\n&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;\n&lt;o:sh=\r\napelayout v:ext=3D&quot;edit&quot;&gt;\n&lt;o:idmap v:ext=3D&quot;edit&quot; data=3D&quot;1&quot; /&gt;\n&lt;/o:shapela=\r\nyout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body bgcolor=3Dwhite lang=3DEN-US link=3Dblu=\r\ne vlink=3Dpurple&gt;&lt;div class=3DWordSection1&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=\r\n=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;Coli=\r\nn,&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0p=\r\nt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span=\r\n&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Cali=\r\nbri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;When I started that effort, long ago, I wa=\r\ns using GASS CUDA.NET with C# (based on your work, HyperNEAT, SharpNEAT, wh=\r\nich I liked a lot).=C2=A0 There were some scalability issues, however.=C2=\r\n=A0 There didn=E2=80=99t seem to be any interest and (you know how it goes)=\r\n.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt=\r\n;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;=\r\n&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calib=\r\nri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;I went back to porting HyperNEAT C++ to CUD=\r\nA (using factory classes to generate the CUDA code and to compile PTX), the=\r\nn I got busy with clients =E2=80=A6 and writing a book.=C2=A0 By the first =\r\nof 2014, I hope to have some time to return to HyperNEAT, and other Gas. =\r\n=C2=A0HyperNEAT and its many conceptualizations are probably now mature eno=\r\nugh for serious HPC implementations =E2=80=93 OpenMPI, OpenMP, C/C++, CUDA =\r\n(or OpenCL, or OpenACC implementation) on scalable, hybrid, heterogeneous c=\r\nlusters, along with some n-dimensional visualization capabilities.&lt;o:p&gt;&lt;/o:=\r\np&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-fami=\r\nly:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cla=\r\nss=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-=\r\nserif&quot;;color:#1F497D&#39;&gt;If the above were =E2=80=9Cto happen=E2=80=9D, it wou=\r\nld be a good idea (IMO) to have some ball-park use cases from others (to be=\r\n meaningful).=C2=A0 I have some UCs that are quite different from the gener=\r\nal discussion and educational aspects, but scientifically =E2=80=9Cinterest=\r\ning=E2=80=9D.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font=\r\n-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;=\r\n/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-f=\r\namily:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;Ken Lloyd&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;=\r\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,=\r\n&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNorma=\r\nl&gt;&lt;b&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;col=\r\nor:#1F497D&#39;&gt;=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;b&gt;&lt;span styl=\r\ne=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;Ken=\r\nneth A. Lloyd, Jr.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span styl=\r\ne=3D&#39;font-size:10.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#244061&#39;&gt;CEO=\r\n - Director, Systems Science&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;spa=\r\nn style=3D&#39;font-size:10.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#24406=\r\n1&#39;&gt;Watt Systems Technologies Inc.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal=\r\n&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#=\r\n1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;fon=\r\nt-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;=\r\n&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-=\r\nfamily:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;d=\r\niv&gt;&lt;div style=3D&#39;border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0=\r\nin 0in 0in&#39;&gt;&lt;p class=3DMsoNormal&gt;&lt;b&gt;&lt;span style=3D&#39;font-size:10.0pt;font-fa=\r\nmily:&quot;Tahoma&quot;,&quot;sans-serif&quot;&#39;&gt;From:&lt;/span&gt;&lt;/b&gt;&lt;span style=3D&#39;font-size:10.0pt=\r\n;font-family:&quot;Tahoma&quot;,&quot;sans-serif&quot;&#39;&gt; neat@yahoogroups.com [mailto:neat@yaho=\r\nogroups.com] &lt;b&gt;On Behalf Of &lt;/b&gt;Colin Green&lt;br&gt;&lt;b&gt;Sent:&lt;/b&gt; Wednesday, Jul=\r\ny 03, 2013 5:27 AM&lt;br&gt;&lt;b&gt;To:&lt;/b&gt; neat@yahoogroups.com&lt;br&gt;&lt;b&gt;Subject:&lt;/b&gt; [n=\r\neat] A fresh look at GPUs and OpenCL&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p cl=\r\nass=3DMsoNormal&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&nbsp; &lt;o:p&gt;&lt;/o:p=\r\n&gt;&lt;/p&gt;&lt;div id=3Dygrp-mlmsg&gt;&lt;div id=3Dygrp-msg&gt;&lt;div id=3Dygrp-text&gt;&lt;p&gt;Hi all,=\r\n&lt;br&gt;&lt;br&gt;I know the topic of GPU use has come up before but there have been =\r\na&lt;br&gt;few recent developments in the GPU world so I thought it would be&lt;br&gt;i=\r\nnteresting to review the current situation.&lt;br&gt;&lt;br&gt;[CUDA]&lt;br&gt;CUDA has been =\r\nmentioned previously and I think Ken Lloyd did some work&lt;br&gt;using CUDA in N=\r\nEAT, but AFAIK none of the NEAT implementations freely&lt;br&gt;available are usi=\r\nng GPUs at all (please correct me if I&#39;m wrong). CUDA&lt;br&gt;was notable as bei=\r\nng the first platform to provide a general computing&lt;br&gt;platform/layer over=\r\n GPUs rather than being graphics acceleration&lt;br&gt;specific. As such it great=\r\nly lowered the difficulty of using GPUs for&lt;br&gt;general computing. A notable=\r\n point is that CUDA is specific to NVIDIA&lt;br&gt;GPUs.&lt;br&gt;&lt;br&gt;[OpenCL]&lt;br&gt;OpenC=\r\nL is a more recent development that aims to provide an openly&lt;br&gt;defined GP=\r\nGPU style platform. OpenCL then is a layer of abstraction&lt;br&gt;from the hardw=\r\nare that allows GPGPU style code to be written&lt;br&gt;independently of any spec=\r\nific h/w and to be executed on any h/w&lt;br&gt;suporting OpenCL. At this time th=\r\nere is already a lot of support, e.g.&lt;br&gt;there is support for NVIDIA and AT=\r\nI/AMD GPUs, IBM&#39;s Cell processor&lt;br&gt;based accelerator &#39;blades&#39;, and you can=\r\n also run OpenCL code on an&lt;br&gt;&#39;normal&#39; Intel multicore CPU (which may be m=\r\nore useful for&lt;br&gt;testing/development than acceleration?).&lt;br&gt;&lt;br&gt;The main =\r\nissue with OpenCL is that the it is an abstraction over&lt;br&gt;diverse hardware=\r\n, thus although a program may run it may not run very&lt;br&gt;fast without speci=\r\nfic knowledge of the underlying h/w and what it&#39;s&lt;br&gt;strengths and weakness=\r\nes are. E.g. if code accesses more RAM that is&lt;br&gt;available to each process=\r\nor then OpenCL will simply compile in&lt;br&gt;instructions to copy data between =\r\nlocal and main RAM thus eliminating&lt;br&gt;the perf gain of using local RAM. Op=\r\nenCL does provide for querying the&lt;br&gt;underlying h/w for some of these fact=\r\nors, so you could in principle&lt;br&gt;perform a set of checks and report that t=\r\nhe h/w isn&#39;t suitable for&lt;br&gt;your program, or maybe even dynamically adjust=\r\n the program code based&lt;br&gt;on reported parameters.&lt;br&gt;&lt;br&gt;On the whole thou=\r\ngh I see OpenCL as a positive development and&lt;br&gt;something the NEAT communi=\r\nty can potentially benefit from. It is still&lt;br&gt;a relatively young platform=\r\n and therefore may present some challenges&lt;br&gt;to code to as it develops, bu=\r\nt I think it&#39;s mature and stable enough&lt;br&gt;to consider experimenting with n=\r\now.&lt;br&gt;&lt;br&gt;[Current GPU h/w]&lt;br&gt;As a ballpark estimate of the sort of perfo=\r\nrmance gains a GPGPU can&lt;br&gt;give us, ATI/AMDs current flagship card (Radeon=\r\n 7970) has a peak&lt;br&gt;throughput of about 3.8 TFlops, compared to 100 GFlops=\r\n for a 4th&lt;br&gt;generation quad core Intel i7. So on paper we&#39;re looking at a=\r\n possible&lt;br&gt;38x speedup compared to top flight CPUs. However, OpenCL does =\r\nsupport&lt;br&gt;utilising mutliple GPUs, e.g. in the Bitcoin mining world it&#39;s t=\r\nypical&lt;br&gt;to have 4 and sometimes 5 GPUs in one system (using PCI &#39;riser&#39; c=\r\nables&lt;br&gt;to distance the GPUs from the motherboard). So for a relatively mo=\r\ndest&lt;br&gt;investment you could be looking at a possible 100x speedup compared=\r\n to&lt;br&gt;current best CPUs.&lt;br&gt;&lt;br&gt;[NEAT and GPUs]&lt;br&gt;My instinct here is to =\r\nmodify current NEAT code to report stats on how&lt;br&gt;much time proportionally=\r\n is being spent in each stage of the NEAT&lt;br&gt;algorithm and to target the co=\r\nde that takes up the most time, this&lt;br&gt;will be different across problem do=\r\nmains and also for NEAT versus&lt;br&gt;HyperNEAT.&lt;br&gt;&lt;br&gt;Certainly if a problem =\r\ndomain is known to be CPU heavy (e.g. uses a&lt;br&gt;physics simulation) then it=\r\n&#39;s probably a no-brainer to use OpenCL for&lt;br&gt;that in isolation from the re=\r\nst of the NEAT algorithm. For NEAT itself&lt;br&gt;I&#39;ve observed slowdown as ANNs=\r\n grow in size and this is presumably&lt;br&gt;mostly due to time to decode and/or=\r\n &#39;run&#39; the ANNs, and this is of&lt;br&gt;course a greater problem in HyperNEAT wh=\r\nere the decode stage consists&lt;br&gt;of a NEAT decode and ANN activation. So th=\r\nere might be some scope for&lt;br&gt;using OpenCL there. One can envisage multipl=\r\ne GPUs where one may be&lt;br&gt;dedicated to problem domain physics, one to ANN =\r\nactivation and another&lt;br&gt;to ANN genome decoding (say).&lt;br&gt;&lt;br&gt;[Typical GPU=\r\n Architecture]&lt;br&gt;Finally I&#39;m going to briefly describe the architecture of=\r\n the Radeon&lt;br&gt;7970 to give an idea of what it is capable of.&lt;br&gt;[Mainly ta=\r\nken from&lt;br&gt;&lt;a href=3D&quot;http://www.techradar.com/reviews/pc-mac/pc-component=\r\ns/graphics-cards/amd-radeon-hd-7970-1049734/review/2&quot;&gt;http://www.techradar.=\r\ncom/reviews/pc-mac/pc-components/graphics-cards/amd-radeon-hd-7970-1049734/=\r\nreview/2&lt;/a&gt;]&lt;br&gt;&lt;br&gt;The 7970 has:&lt;br&gt;&lt;br&gt;32 x Compute Units (CUs). These a=\r\nre completely independent of each&lt;br&gt;other. If you have 2x GPUs then OpenCL=\r\n will see (I think) a block of&lt;br&gt;64 compute units, hence in some cases cod=\r\ne can be accelerated just by&lt;br&gt;adding GPUs. Each CU has:&lt;br&gt;&lt;br&gt;4 x Vector=\r\n Units (VUs). And each VU has:&lt;br&gt;16 x Unified shaders (unified here just m=\r\neans they are no longer&lt;br&gt;specific to a task, e.g. pixel or vector shader,=\r\n they are general&lt;br&gt;purpose processors)&lt;br&gt;&lt;br&gt;So in total there are 32 x =\r\n4 x 16 =3D 2048 unified shaders.&lt;br&gt;&lt;br&gt;Each CU has 64kB of local RAM that =\r\nall of the VUs can access&lt;br&gt;(typically for reading shared state data I wou=\r\nld guess). In addition&lt;br&gt;each VU has it&#39;s own 64 kB of RAM (note. you woul=\r\nd typically control&lt;br&gt;what&#39;s in these local memories in code, that is, it&#39;=\r\ns not a passive&lt;br&gt;CPU cache). A vector unit is basically a SIMD processor,=\r\n there is one&lt;br&gt;set of instructions that are executed against all 16 shade=\r\nrs (so e.g.&lt;br&gt;you can &#39;shade&#39; 16 pixels at a time). So each of the 128 vec=\r\ntor units&lt;br&gt;can execute its own instructions, and in turn those instructio=\r\nns are&lt;br&gt;operating on 16 shaders. A shader then consists of some minimal s=\r\ntate&lt;br&gt;data specific to it and the data it is operating on, and also&lt;br&gt;ex=\r\necution units for performing arithmetic, etc.&lt;br&gt;&lt;br&gt;An interesting thing a=\r\nbout vector units is that conditional branches&lt;br&gt;are allowed in OpenCL, th=\r\nat is, you can have some shaders executing a&lt;br&gt;different path despite ther=\r\ne being only one set of instructions and&lt;br&gt;one instruction pointer. Howeve=\r\nr this is merely a trick, if VU code&lt;br&gt;contains a branch then both branche=\r\ns are executed for all shaders and&lt;br&gt;the shaders are assigned the correct =\r\nfinal result based on which&lt;br&gt;branch they should have followed. Hence it&#39;s=\r\n advisable to avoid&lt;br&gt;branches, but it&#39;s a nice feature to have available =\r\nso long as you&lt;br&gt;don&#39;t abuse it.&lt;br&gt;&lt;br&gt;For more info see:&lt;br&gt;[From Shader=\r\n Code to a Tera=EF=AC=82op: How Shader Cores Work, Kayvon&lt;br&gt;Fatahalian, St=\r\nanford University]&lt;br&gt;[&lt;a href=3D&quot;http://s08.idav.ucdavis.edu/fatahalian-gp=\r\nu-architecture.pdf&quot;&gt;http://s08.idav.ucdavis.edu/fatahalian-gpu-architecture=\r\n.pdf&lt;/a&gt;]&lt;br&gt;&lt;br&gt;There&#39;s obviously a heck of a lot more to this subject tha=\r\nn I&#39;ve&lt;br&gt;described but I thought this might be a reasonably good intro to&lt;=\r\nbr&gt;current possibilities around GPU use in NEAT.&lt;br&gt;&lt;br&gt;Colin&lt;o:p&gt;&lt;/o:p&gt;&lt;/p=\r\n&gt;&lt;/div&gt;&lt;div&gt;&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;color:white&#39;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/s=\r\npan&gt;&lt;/p&gt;&lt;/div&gt;&lt;p class=3DMsoNormal style=3D&#39;mso-margin-top-alt:auto;mso-mar=\r\ngin-bottom-alt:auto&#39;&gt;No virus found in this message.&lt;br&gt;Checked by AVG - &lt;a=\r\n href=3D&quot;http://www.avg.com&quot;&gt;www.avg.com&lt;/a&gt;&lt;br&gt;Version: 2013.0.3345 / Viru=\r\ns Database: 3204/6460 - Release Date: 07/03/13&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;=\r\n/html&gt;\r\n------=_NextPart_000_00E8_01CE77CC.AC34FAB0--\r\n\n"}}