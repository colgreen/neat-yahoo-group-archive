{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"wQlPa7icmL6FpfwgmmmayerCb0uEqqteD6AeD5ZqFMSqy-yxd_jWtOkFPmR_AbsgwTdE-5ibzbR8M9X4Lp6PpsjKwiEXxytknDI","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Performance Sensitivity to float precision","postDate":"1095800242","msgId":1583,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUuMS4wLjE0LjAuMjAwNDA5MjEyMTQzMzcuMDIxNGZiZDBAcG9wLm1haWwueWFob28uY28udWs+","inReplyToHeader":"PDQxNTA4RTNDLjcwNjAwMDJAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDYuMS4yLjAuMC4yMDA0MDkyMTEwNTgxMS4wMjU4YzAwOEBwb3AubWFpbC55YWhvby5jby51az4gPDIwMDQwOTIwMTcwMzA0LjY5MTMyLnFtYWlsQHdlYjYwODA3Lm1haWwueWFob28uY29tPiA8NDE0RjQ1QkYuODAxMDQwM0Bkc2wucGlwZXguY29tPiA8Ni4xLjIuMC4wLjIwMDQwOTIxMTA1ODExLjAyNThjMDA4QHBvcC5tYWlsLnlhaG9vLmNvLnVrPg=="},"prevInTopic":1580,"nextInTopic":1586,"prevInTime":1582,"nextInTime":1584,"topicId":1555,"numMessagesInTopic":16,"msgSnippet":"... This is true, but I was talking about your SharpNEAT comment, which I assume is only used on PCs?  There are no currently credible PC CPUs without at least","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 79219 invoked from network); 21 Sep 2004 20:56:48 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m6.grp.scd.yahoo.com with QMQP; 21 Sep 2004 20:56:48 -0000\r\nReceived: from unknown (HELO cmailg2.svr.pol.co.uk) (195.92.195.172)\n  by mta6.grp.scd.yahoo.com with SMTP; 21 Sep 2004 20:56:48 -0000\r\nReceived: from modem-3890.panther.dialup.pol.co.uk ([217.135.255.50] helo=giles.yahoo.co.uk)\n\tby cmailg2.svr.pol.co.uk with esmtp (Exim 4.14)\n\tid 1C9rgt-0004jn-4C\n\tfor neat@yahoogroups.com; Tue, 21 Sep 2004 21:56:47 +0100\r\nMessage-Id: &lt;5.1.0.14.0.20040921214337.0214fbd0@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 5.1\r\nDate: Tue, 21 Sep 2004 21:57:22 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;41508E3C.7060002@...&gt;\r\nReferences: &lt;6.1.2.0.0.20040921105811.0258c008@...&gt;\n &lt;20040920170304.69132.qmail@...&gt;\n &lt;414F45BF.8010403@...&gt;\n &lt;6.1.2.0.0.20040921105811.0258c008@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 195.92.195.172\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Performance Sensitivity to float precision\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 21:25 21/09/2004 +0100, you wrote:\n&gt;Ian Badcoe wrote:\n&gt;\n&gt; &gt;At 22:03 20/09/2004, you wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt;I agree with the consensus here that double precision floats are\n&gt; &gt;&gt;probably excessive for most problems. I have switched the neural network\n&gt; &gt;&gt;code in SharpNEAT over to floats to improve performance and I have not\n&gt; &gt;&gt;noticed a detrimental effect in any of my  experiments to date. In fact\n&gt; &gt;&gt;I have considered implementing a neural net class that operates on\n&gt; &gt;&gt;integers to get yet more performance. So although I know of no research\n&gt; &gt;&gt;as such, my best guess would be that floats are fine.\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;\n&gt; &gt;Switching to fixed-point integer maths isn&#39;t the automatically the huge\n&gt; &gt;speed increase it once was.\n&gt; &gt;\n&gt; &gt;\n&gt;Maybe in the big power hungry desktop CPU&#39;s. But what about cheap lower\n&gt;power CPU&#39;s with no built in FPU? Surely they can gain a lot from using\n&gt;integers directly and not invoking some software routines to do floating\n&gt;point?\n\nThis is true, but I was talking about your SharpNEAT comment, which I \nassume is only used on PCs?  There are no currently credible PC CPUs \nwithout at least 3 built in floating point units.\n\nFor embedded systems the game is completely different.\n\n&gt; &gt;You can do it by writing a fixed point class to implement the arithmetic,\n&gt; &gt;and substituting that for &quot;float&quot; in your original code.\n&gt; &gt;\n&gt; &gt;\n&gt;Yeh but that option is already available by way of existing floating\n&gt;point arithmetic libraries.\n\nDid you mean to say &quot;existing _fixed_ point arithmetic libraries&quot;?\n\n--\n\n[snip on big numbers]\n\nThat working out is all _much_ easier if you do it in hex...\n\nrange +/- 0x7FFFFFFF\n\n0x400 inputs on a node\n\neach node input is 0x80000000 / 0x400 = +/- 0x200000\n\n(can overflow if everything maxes out so cut the max nodes to 0x3FF)\n\nNode input = node output * weight = +/- 0x200000\n\nThat splits nicely as 0x400 * 0x800 so call the weights +/- 0x400 and the \noutput values +/- 0x800\n\nPersonally I would probably take 8-fold less node inputs and bring the \nweights and outputs both up to +/- 0x1000...\n\n--\n\nThat&#39;s all based on your idea of having one point where the ever-increasing \ninteger mults are scaled back down and putting it in the activation \nfunction.  That function will inevitably discard some information so it \ncould shift the value down and then look up the result:\n\nout = LookUp[sum &gt;&gt; 16);        // 0x10000 = 65536 entry look up\n\nor it could try for some sort of piece-meal approach similar to John&#39;s...\n\nthat&#39;s looking quite workable, actually...\n\nand far less complex than I imagined...\n\n         Ian\n\n\n\nhttp://livingathome.sourceforge.net/ - evolution for the desktop\n\n\n\n"}}