{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":82117382,"authorName":"Jim O&#39;Flaherty, Jr.","from":"&quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;","profile":"jim_oflaherty_jr","replyTo":"LIST","senderId":"mDAig2AoOVTulFe5cqYZFaO1yOjmrBiJ6jZqqdtVPY0UmLnk_vp4873J73dqlUpNlJXq6WuoJs-_AV4k_QIjNFD2AIwTnPPdldCDnSX4t5QQvtBB1Ue2Gi4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Standard network XML dialect.","postDate":"1077374125","msgId":418,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMWYwMWMzZjg4NyRmMWYyMmVjMCQzMjAxYThjMEBORVdBR0U+","referencesHeader":"PDIwMDQwMjIxMTQwNTAwLjk3NTQwLnFtYWlsQHdlYjYwNTA5Lm1haWwueWFob28uY29tPg=="},"prevInTopic":417,"nextInTopic":419,"prevInTime":417,"nextInTime":419,"topicId":408,"numMessagesInTopic":19,"msgSnippet":"All, This is generally a discussion about efficiency versus flexibility/maintainability/compatibility. On my project, I am almost exclusively using XML.  It is","rawEmail":"Return-Path: &lt;jim_oflaherty_jr@...&gt;\r\nX-Sender: jim_oflaherty_jr@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 22023 invoked from network); 21 Feb 2004 14:35:27 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m13.grp.scd.yahoo.com with QMQP; 21 Feb 2004 14:35:27 -0000\r\nReceived: from unknown (HELO smtp106.mail.sc5.yahoo.com) (66.163.169.226)\n  by mta5.grp.scd.yahoo.com with SMTP; 21 Feb 2004 14:35:26 -0000\r\nReceived: from unknown (HELO NEWAGE) (jim?oflaherty?jr@24.1.159.151 with login)\n  by smtp106.mail.sc5.yahoo.com with SMTP; 21 Feb 2004 14:35:25 -0000\r\nMessage-ID: &lt;001f01c3f887$f1f22ec0$3201a8c0@NEWAGE&gt;\r\nTo: &lt;neat@yahoogroups.com&gt;\r\nReferences: &lt;20040221140500.97540.qmail@...&gt;\r\nDate: Sat, 21 Feb 2004 08:35:25 -0600\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_001C_01C3F855.A6EA08D0&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2720.3000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2727.1300\r\nX-eGroups-Remote-IP: 66.163.169.226\r\nFrom: &quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;\r\nSubject: Re: [neat] Re: Standard network XML dialect.\r\nX-Yahoo-Group-Post: member; u=82117382\r\nX-Yahoo-Profile: jim_oflaherty_jr\r\n\r\n\r\n------=_NextPart_000_001C_01C3F855.A6EA08D0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nAll,\n\nThis is generally a discussion about efficiency versus flexibility/ma=\r\nintainability/compatibility.\n\nOn my project, I am almost exclusively using =\r\nXML.  It is both bulky and I generate GBs worth of it as I track EVERYTHING=\r\n during a run so I have the data to drive scads of statistical analysis lat=\r\ner.  I *required* XML because of XSL.  And it is trivial to generate XML fo=\r\nr just about any data set (with very rare exceptions), if you have the DOM =\r\nAPIs available in the language you are using.\n\nAs a result of my requiring =\r\nXML for my project and during a single 1,000 generation run, I ran my 7GB H=\r\nD out of space.  I was able to complete the run by compressing up the exist=\r\ning data freeing up more HD space.  I then went through a refactoring phase=\r\n on my code base implementing a compression persistence mechanism.  Java ha=\r\ns a very nice and simple API to employ zip compression within a small numbe=\r\nr of calls.  So all the XML ends up immediately being dropped into .zip fil=\r\nes.  As a result, the next 1,000 generation run took less than a CD-ROMs wo=\r\nrth of space (&gt;0.5GB) and the increase to the run times was so small as to =\r\nessentially be unmeasurable.\n\nHaving been in software development for a lon=\r\ng time (more than 20 years), I have noticed the cost is usually very low wh=\r\nen changing decisions towards maintainability, flexibility and compatibilty=\r\n at the beginning stages of a project.  As the project gains momentum (whic=\r\nh is then multipled by the number of people utilizing it resulting in an ex=\r\nponential effect), it becomes exponentially more costly (and difficult) to =\r\ngo back and alter the design decision and then re-integrate the new decisio=\r\nn with all the other fundamental decisions.\n\nSo if you do not expect a larg=\r\ne number of future users to your framework, you can focus more on efficienc=\r\ny and less on flexibility/maintainability/compatibility.  However, if you i=\r\nntend your framework for use and expansion by others, as Derek and Philip d=\r\no, it is imperative you make your &quot;interface&quot; decisions as focused on &quot;flex=\r\nibility/maintainability/compatibility&quot; as is reasonably possible early on. =\r\n By doing so, it will generate significant benefits long term.\n\nAnd to me, =\r\nthe representation of the target network is about as fundamental as you can=\r\n get.  It is *the thing* that is most desired to be &quot;interoperable&quot; with ot=\r\nher implementations.\n\nSo for me, I am sticking with XML and going to contin=\r\nue to figure out how to make it &quot;good enough&quot; efficient.\n\n\nJim\n\n\nPS.  As to=\r\n the Java performance problem, I have taken a similar path.  First, I imple=\r\nment in pure Java so that I may jump between the highest performing VMs wit=\r\nhout having to touch my code.  Secondly, I have developed a pretty simple d=\r\nistributed computing mechanism and have had as many as 6 computers performi=\r\nng fitness evaluations at the same time.  Between the two, I am producing r=\r\nesults in very attractive time frames, in less than 4 days 1,000 generation=\r\ns involving 15,000 specimens (players) across 150,000 fitness evaluations (=\r\ngames of checkers) with 1,700 weight standard FF ANNs.\n\nThe bottom line - e=\r\nfficiency is typically a distracting focus in software development.  Unless=\r\n the code being optimized is directly on the bottleneck, it is essentially =\r\nunused and therefore wasted effort.\n\n\n  ----- Original Message ----- \n  Fro=\r\nm: Derek James \n  To: neat@yahoogroups.com \n  Sent: Saturday, February 21, =\r\n2004 8:05 AM\n  Subject: Re: [neat] Re: Standard network XML dialect.\n\n\n  --=\r\n- Kenneth Stanley &lt;kstanley@...&gt; wrote: \n  &gt; It&#39;s easy to delete =\r\na gene, see the nodes and\n  &gt; genes, see the historical markings (the numbe=\r\nrs \n  &gt; increasing  from 1 to 39 in the gens). The\n  &gt; format also allows c=\r\nomments in C-style, so \n  &gt; genes can be commented out:\n  &gt; \n  &gt; /* gene 1 =\r\n10 16 0 0 36 0 1 */\n\n  All the same is true for XML, e.g.:\n\n  &lt;neuron id=3D=\r\n&quot;0&quot; type=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=3D&quot;1&quot; type=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=3D&quot;2&quot; type=\r\n=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=3D&quot;3&quot; type=3D&quot;OUT&quot;/&gt;\n  &lt;connection id=3D&quot;4&quot; src-id=\r\n=3D&quot;0&quot; dest-id=3D&quot;3&quot;\n  weight=3D&quot;-1.3731676929130425&quot;/&gt;\n  &lt;connection id=3D=\r\n&quot;5&quot; src-id=3D&quot;1&quot; dest-id=3D&quot;3&quot;\n  weight=3D&quot;-1.208831769841949&quot;/&gt;\n  &lt;connect=\r\nion id=3D&quot;6&quot; src-id=3D&quot;2&quot; dest-id=3D&quot;3&quot;\n  weight=3D&quot;-0.853548931074944&quot;/&gt;\n\n=\r\n  What you call a node, our XML calls a neuron.  What\n  you call a gene, ou=\r\nr XML calls a connection. \n  Historical markings are clearly defined by the=\r\n id\n  attributes (though we assign neurons ids as well). \n  And as Colin po=\r\nints out, XML can be commented out as\n  well.\n\n  As far as readability, XML=\r\n is more reader-friendly, as\n  long as its schema is designed well.  For ex=\r\nample:\n\n  gene 1 1 14 -0.242932 0 1 -0.242932 1\n\n  Unless I am familiar wit=\r\nh the code, I&#39;m not sure what\n  each of these values maps to.  I&#39;m not sure=\r\n why the\n  weight value is listed twice, etc.  This code is more\n  compact,=\r\n but I think it is less human-readable.\n\n  But even so, again as Colin poin=\r\nted out, it&#39;s fairly\n  trivial to write an XSL style sheet that converts\n  =\r\nsomething that looks like:\n\n  &lt;neuron id=3D&quot;0&quot; type=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=\r\n=3D&quot;1&quot; type=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=3D&quot;2&quot; type=3D&quot;IN&quot;/&gt;\n  &lt;neuron id=3D&quot;3&quot; ty=\r\npe=3D&quot;OUT&quot;/&gt;\n  &lt;connection id=3D&quot;4&quot; src-id=3D&quot;0&quot; dest-id=3D&quot;3&quot;\n  weight=3D&quot;=\r\n-1.3731676929130425&quot;/&gt;\n  &lt;connection id=3D&quot;5&quot; src-id=3D&quot;1&quot; dest-id=3D&quot;3&quot;\n  =\r\nweight=3D&quot;-1.208831769841949&quot;/&gt;\n  &lt;connection id=3D&quot;6&quot; src-id=3D&quot;2&quot; dest-id=\r\n=3D&quot;3&quot;\n  weight=3D&quot;-0.853548931074944&quot;/&gt;\n\n  ...into something that looks li=\r\nke:\n\n  node 1 0 1 1\n  node 2 0 1 1\n  node 3 0 1 1\n  node 4 0 1 1\n  gene 1 1=\r\n 14 -0.242932 0 1 -0.242932 1\n  gene 1 2 14 -0.665275 0 2 -0.665275 1\n  gen=\r\ne 1 3 14 -0.690939 0 3 -0.690939 1\n\n  An XSL style sheet iterates across XM=\r\nL tags and their\n  associated attributes, and spits out whatever you tell\n =\r\n it to.\n\n  &gt; Anyway, XML has some great properties and uses, so\n  &gt; I am no=\r\nt arguing against XML.  But what I think\n  &gt; would be especially cool would=\r\n be if there was\n  &gt; a conversion function both ways between NEAT-XML \n  &gt; =\r\nand NEAT-traditional genome styles.  \n\n  Yeah...but Colin&#39;s also right that=\r\n XML -&gt;\n  NEAT-traditional is easy, but NEAT-traditional -&gt; XML\n  would req=\r\nuire some code to translate it into workable\n  XML...though that really sho=\r\nuldn&#39;t be too awfully\n  difficult.  \n\n  Derek\n\n  __________________________=\r\n________\n  Do you Yahoo!?\n  Yahoo! Mail SpamGuard - Read only the mail you =\r\nwant.\n  http://antispam.yahoo.com/tools\n\n        Yahoo! Groups Sponsor \n   =\r\n           ADVERTISEMENT\n             \n       \n       \n\n\n------------------=\r\n------------------------------------------------------------\n  Yahoo! Group=\r\ns Links\n\n    a.. To visit your group on the web, go to:\n    http://groups.y=\r\nahoo.com/group/neat/\n      \n    b.. To unsubscribe from this group, send an=\r\n email to:\n    neat-unsubscribe@yahoogroups.com\n      \n    c.. Your use of =\r\nYahoo! Groups is subject to the Yahoo! Terms of Service. \n\n\n\r\n------=_NextPart_000_001C_01C3F855.A6EA08D0\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1=\r\n&quot;&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2737.800&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE&gt;=\r\n\n&lt;/HEAD&gt;\n&lt;BODY bgColor=3D#ffffff&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;All,&lt;/FO=\r\nNT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT f=\r\nace=3DArial size=3D2&gt;This is generally a discussion about efficiency \nversu=\r\ns flexibility/maintainability/compatibility.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;On m=\r\ny project, I am almost exclusively using \nXML.&nbsp; It is both bulky and I=\r\n generate GBs worth of it as I track EVERYTHING \nduring a run so I have the=\r\n data to drive&nbsp;scads of statistical analysis \nlater.&nbsp; I *required=\r\n* XML because of XSL.&nbsp; And it is trivial to \ngenerate XML for just abo=\r\nut any data set (with very rare exceptions), if you \nhave the DOM APIs avai=\r\nlable in the language you are using.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial s=\r\nize=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;As&nbsp;a resu=\r\nlt of my requiring XML for my project \nand during a single 1,000 generation=\r\n run, I ran my 7GB HD out of space.&nbsp; I \nwas able to complete the run b=\r\ny compressing up the existing data freeing up more \nHD space.&nbsp; I then =\r\nwent through a refactoring phase on my code base \nimplementing a compressio=\r\nn persistence mechanism.&nbsp; Java has a very nice and \nsimple API to&nbsp=\r\n;employ zip compression within a small number of calls.&nbsp; \nSo all the X=\r\nML ends up immediately being dropped into .zip files.&nbsp; As a \nresult, t=\r\nhe next 1,000 generation run took less than a CD-ROMs worth of space \n(&gt;=\r\n0.5GB) and the increase to the run times was so small as to essentially be =\r\n\nunmeasurable.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Having been in software development =\r\nfor a long time \n(more than 20 years), I have noticed the cost is usually v=\r\nery low \nwhen&nbsp;changing decisions towards maintainability, flexibility =\r\nand \ncompatibilty at the beginning stages of a project.&nbsp; As the projec=\r\nt gains \nmomentum (which is then multipled by the number of people utilizin=\r\ng it resulting \nin an exponential effect), it becomes exponentially more co=\r\nstly (and difficult) \nto go back and&nbsp;alter the design decision and the=\r\nn re-integrate&nbsp;the new \ndecision with all the other fundamental decisi=\r\nons.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&lt;FONT face=3DArial size=3D2&gt;So if you do not expect a large number of futu=\r\nre \nusers to your framework, you can focus more on efficiency and less on \n=\r\nflexibility/maintainability/compatibility.&nbsp; However, if you intend you=\r\nr \nframework for use and expansion by others,&nbsp;as Derek and Philip do, =\r\nit \nis&nbsp;imperative you make your &quot;interface&quot; decisions as focused on \n&quot;=\r\nflexibility/maintainability/compatibility&quot; as is reasonably possible early =\r\n\non.&nbsp; By doing so, it will generate significant benefits long \nterm.&lt;/=\r\nFONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT=\r\n face=3DArial size=3D2&gt;And to me, the representation of the target network =\r\n\nis about as fundamental as you can get.&nbsp; It is *the thing* that is mo=\r\nst \ndesired to be &quot;interoperable&quot; with other implementations.&lt;/FONT&gt;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DAria=\r\nl size=3D2&gt;So for me, I am sticking with XML and going to \ncontinue to figu=\r\nre out how to make it &quot;good enough&quot; efficient.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FO=\r\nNT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Jim&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D=\r\n2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;PS.&nbsp; As to the =\r\nJava performance problem, I \nhave taken a similar path.&nbsp; First, I impl=\r\nement in pure Java so that I may \njump between the highest performing VMs w=\r\nithout having to touch my code.&nbsp; \nSecondly, I have developed a pretty =\r\nsimple distributed computing mechanism and \nhave had as many as 6 computers=\r\n performing fitness evaluations at the same \ntime.&nbsp; Between the two, I=\r\n am producing results in very attractive time \nframes, in&nbsp;less than 4 =\r\ndays 1,000 generations involving 15,000 specimens \n(players) across 150,000=\r\n fitness evaluations (games of checkers) with 1,700 \nweight standard FF ANN=\r\ns.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;=\r\nFONT face=3DArial size=3D2&gt;The bottom line - efficiency is typically a \ndis=\r\ntracting focus in software development.&nbsp; Unless the code being optimiz=\r\ned \nis directly on the bottleneck, it is essentially&nbsp;unused and theref=\r\nore \nwasted effort.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&n=\r\nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;BLOCKQUOTE=\r\n \nstyle=3D&quot;PADDING-RIGHT: 0px; PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-=\r\nLEFT: #000000 2px solid; MARGIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt ari=\r\nal&quot;&gt;----- Original Message ----- &lt;/DIV&gt;\n  &lt;DIV \n  style=3D&quot;BACKGROUND: #e4e=\r\n4e4; FONT: 10pt arial; font-color: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n  &lt;A title=3Dblue54=\r\n32@... href=3D&quot;mailto:blue5432@...&quot;&gt;Derek James&lt;/A&gt; \n  &lt;/DIV&gt;\n =\r\n &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A title=3Dneat@yahoogroups.com=\r\n \n  href=3D&quot;mailto:neat@yahoogroups.com&quot;&gt;neat@yahoogroups.com&lt;/A&gt; &lt;/DIV&gt;\n  =\r\n&lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Saturday, February 21, 2004 8:=\r\n05 \n  AM&lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject:&lt;/B&gt; Re: [neat]=\r\n Re: Standard network \n  XML dialect.&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;TT&gt;--- Kennet=\r\nh Stanley &lt;&lt;A \n  href=3D&quot;mailto:kstanley@...&quot;&gt;kstanley@...=\r\nas.edu&lt;/A&gt;&gt; wrote: \n  &lt;BR&gt;&gt; It&#39;s easy to delete a gene, see the nodes=\r\n and&lt;BR&gt;&gt; genes, see the \n  historical markings (the numbers &lt;BR&gt;&gt; in=\r\ncreasing&nbsp; from 1 to 39 in the \n  gens). The&lt;BR&gt;&gt; format also allows=\r\n comments in C-style, so &lt;BR&gt;&gt; genes \n  can be commented out:&lt;BR&gt;&gt; &lt;B=\r\nR&gt;&gt; /* gene 1 10 16 0 0 36 0 1 \n  */&lt;BR&gt;&lt;BR&gt;All the same is true for XML=\r\n, e.g.:&lt;BR&gt;&lt;BR&gt;&lt;neuron id=3D&quot;0&quot; \n  type=3D&quot;IN&quot;/&gt;&lt;BR&gt;&lt;neuron id=3D&quot;=\r\n1&quot; type=3D&quot;IN&quot;/&gt;&lt;BR&gt;&lt;neuron id=3D&quot;2&quot; \n  type=3D&quot;IN&quot;/&gt;&lt;BR&gt;&lt;neuro=\r\nn id=3D&quot;3&quot; type=3D&quot;OUT&quot;/&gt;&lt;BR&gt;&lt;connection id=3D&quot;4&quot; \n  src-id=3D&quot;0&quot; des=\r\nt-id=3D&quot;3&quot;&lt;BR&gt;weight=3D&quot;-1.3731676929130425&quot;/&gt;&lt;BR&gt;&lt;connection \n  id=\r\n=3D&quot;5&quot; src-id=3D&quot;1&quot; \n  dest-id=3D&quot;3&quot;&lt;BR&gt;weight=3D&quot;-1.208831769841949&quot;/&gt;&lt;=\r\nBR&gt;&lt;connection id=3D&quot;6&quot; \n  src-id=3D&quot;2&quot; dest-id=3D&quot;3&quot;&lt;BR&gt;weight=3D&quot;-0.85=\r\n3548931074944&quot;/&gt;&lt;BR&gt;&lt;BR&gt;What you \n  call a node, our XML calls a neuron.=\r\n&nbsp; What&lt;BR&gt;you call a gene, our XML \n  calls a connection. &lt;BR&gt;Historic=\r\nal markings are clearly defined by the \n  id&lt;BR&gt;attributes (though we assig=\r\nn neurons ids as well). &lt;BR&gt;And as Colin \n  points out, XML can be commente=\r\nd out as&lt;BR&gt;well.&lt;BR&gt;&lt;BR&gt;As far as readability, \n  XML is more reader-frien=\r\ndly, as&lt;BR&gt;long as its schema is designed well.&nbsp; \n  For example:&lt;BR&gt;&lt;B=\r\nR&gt;gene 1 1 14 -0.242932 0 1 -0.242932 1&lt;BR&gt;&lt;BR&gt;Unless I am \n  familiar with=\r\n the code, I&#39;m not sure what&lt;BR&gt;each of these values maps \n  to.&nbsp; I&#39;m =\r\nnot sure why the&lt;BR&gt;weight value is listed twice, etc.&nbsp; \n  This code i=\r\ns more&lt;BR&gt;compact, but I think it is less \n  human-readable.&lt;BR&gt;&lt;BR&gt;But eve=\r\nn so, again as Colin pointed out, it&#39;s \n  fairly&lt;BR&gt;trivial to write an XSL=\r\n style sheet that converts&lt;BR&gt;something that \n  looks like:&lt;BR&gt;&lt;BR&gt;&lt;neur=\r\non id=3D&quot;0&quot; type=3D&quot;IN&quot;/&gt;&lt;BR&gt;&lt;neuron id=3D&quot;1&quot; \n  type=3D&quot;IN&quot;/&gt;&lt;BR&gt;=\r\n&lt;neuron id=3D&quot;2&quot; type=3D&quot;IN&quot;/&gt;&lt;BR&gt;&lt;neuron id=3D&quot;3&quot; \n  type=3D&quot;OUT&quot;=\r\n/&gt;&lt;BR&gt;&lt;connection id=3D&quot;4&quot; src-id=3D&quot;0&quot; \n  dest-id=3D&quot;3&quot;&lt;BR&gt;weight=3D=\r\n&quot;-1.3731676929130425&quot;/&gt;&lt;BR&gt;&lt;connection id=3D&quot;5&quot; \n  src-id=3D&quot;1&quot; dest-=\r\nid=3D&quot;3&quot;&lt;BR&gt;weight=3D&quot;-1.208831769841949&quot;/&gt;&lt;BR&gt;&lt;connection \n  id=3D&quot;6=\r\n&quot; src-id=3D&quot;2&quot; \n  dest-id=3D&quot;3&quot;&lt;BR&gt;weight=3D&quot;-0.853548931074944&quot;/&gt;&lt;BR&gt;&lt;B=\r\nR&gt;...into something that \n  looks like:&lt;BR&gt;&lt;BR&gt;node 1 0 1 1&lt;BR&gt;node 2 0 1 1=\r\n&lt;BR&gt;node 3 0 1 1&lt;BR&gt;node 4 0 1 \n  1&lt;BR&gt;gene 1 1 14 -0.242932 0 1 -0.242932 =\r\n1&lt;BR&gt;gene 1 2 14 -0.665275 0 2 \n  -0.665275 1&lt;BR&gt;gene 1 3 14 -0.690939 0 3 =\r\n-0.690939 1&lt;BR&gt;&lt;BR&gt;An XSL style sheet \n  iterates across XML tags and their=\r\n&lt;BR&gt;associated attributes, and spits out \n  whatever you tell&lt;BR&gt;it to.&lt;BR&gt;=\r\n&lt;BR&gt;&gt; Anyway, XML has some great properties \n  and uses, so&lt;BR&gt;&gt; I am=\r\n not arguing against XML.&nbsp; But what I \n  think&lt;BR&gt;&gt; would be especi=\r\nally cool would be if there was&lt;BR&gt;&gt; a \n  conversion function both ways =\r\nbetween NEAT-XML &lt;BR&gt;&gt; and NEAT-traditional \n  genome styles.&nbsp; &lt;BR&gt;=\r\n&lt;BR&gt;Yeah...but Colin&#39;s also right that XML \n  -&gt;&lt;BR&gt;NEAT-traditional is =\r\neasy, but NEAT-traditional -&gt; XML&lt;BR&gt;would \n  require some code to trans=\r\nlate it into workable&lt;BR&gt;XML...though that really \n  shouldn&#39;t be too awful=\r\nly&lt;BR&gt;difficult.&nbsp; \n  &lt;BR&gt;&lt;BR&gt;Derek&lt;BR&gt;&lt;BR&gt;____________________________=\r\n______&lt;BR&gt;Do you \n  Yahoo!?&lt;BR&gt;Yahoo! Mail SpamGuard - Read only the mail y=\r\nou want.&lt;BR&gt;&lt;A \n  href=3D&quot;http://antispam.yahoo.com/tools&quot;&gt;http://antispam.=\r\nyahoo.com/tools&lt;/A&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_001C_01C3F855.A6EA08D0--\r\n\n"}}