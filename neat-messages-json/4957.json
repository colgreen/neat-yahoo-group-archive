{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":274910130,"authorName":"ddambroeplex","from":"&quot;ddambroeplex&quot; &lt;ddambro84@...&gt;","profile":"ddambroeplex","replyTo":"LIST","senderId":"JyPLCqP6_zZpba9Ddfy2WBeM9Dr8tlpD0jPi8lFvx3_GW63lHQ7JjVrhm3N7mxSvGwnwBPhZB-3tpv50wYmDMihUWyU-dDKS0bLp_tA","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Best practices for teaching a network","postDate":"1259615654","msgId":4957,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhmMWNqNitqYjcwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGhmMTg3cyt2ajllQGVHcm91cHMuY29tPg=="},"prevInTopic":4956,"nextInTopic":4964,"prevInTime":4956,"nextInTime":4958,"topicId":4928,"numMessagesInTopic":6,"msgSnippet":"Part of the problem you are experiencing is that SharpNEAT and HyperSharpNEAT (and apparently Matt Buckland s code, based on a recent post) don t reevaluate","rawEmail":"Return-Path: &lt;ddambro84@...&gt;\r\nX-Sender: ddambro84@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 74913 invoked from network); 30 Nov 2009 21:14:16 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m13.grp.re1.yahoo.com with QMQP; 30 Nov 2009 21:14:16 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta1.grp.sp2.yahoo.com with SMTP; 30 Nov 2009 21:14:16 -0000\r\nX-Received: from [69.147.65.147] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 30 Nov 2009 21:14:15 -0000\r\nX-Received: from [98.137.34.184] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 30 Nov 2009 21:14:15 -0000\r\nDate: Mon, 30 Nov 2009 21:14:14 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;hf1cj6+jb70@...&gt;\r\nIn-Reply-To: &lt;hf187s+vj9e@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;ddambroeplex&quot; &lt;ddambro84@...&gt;\r\nSubject: Re: Best practices for teaching a network\r\nX-Yahoo-Group-Post: member; u=274910130; y=CDD9MDttnu3KwP1OwA4et13CaNEbrTwenCPHtUbd8UHgcxev\r\nX-Yahoo-Profile: ddambroeplex\r\n\r\nPart of the problem you are experiencing is that SharpNEAT and HyperSharpNE=\r\nAT (and apparently Matt Buckland&#39;s code, based on a recent post) don&#39;t reev=\r\naluate genomes that have already been evaluated.  This method works great w=\r\nith deterministic, static fitness functions, but if you change the fitness =\r\nduring evolution as you are doing, you will have to change the code slightl=\r\ny.\n\nIf you&#39;re using the SingleFilePopulationEvaluator, simply comment out l=\r\nines 44 and 45 (if(g.EvaluationCount!=3D0) continue;).  If you&#39;re using the=\r\n multi-threaded one the relevant code should already be commented out, but =\r\nyou can check on line 113 of MultiThreadedPopulationEvaluator.  \n\nThe best =\r\nfitness in the EvolutionAlgorithm class is calculated based on the fitnesse=\r\ns of the current population, so as long as you are reevaluating everything =\r\nyou shouldn&#39;t have to worry about resetting that.  However If you are using=\r\n my CommandLineEvolution code, you will have to reset the maxFitness variab=\r\nle, otherwise it won&#39;t output new genome XML until you beat the old maxFitn=\r\ness value.\n\n--- In neat@yahoogroups.com, &quot;Daniel&quot; &lt;daniel_kuppitz@...&gt; wrot=\r\ne:\n&gt;\n&gt; Right now I train my network on a single set of input data. After re=\r\naching a predefined fitness value I switch over to the next set of input da=\r\nta. When the fitness is too low the training begins for this data and conti=\r\nnues until the predefined fitness value is reached and so on.\n&gt; After a few=\r\n iterations the network produces perfect outputs on some sets of data. Cons=\r\nequently the best fitness value is extremly high. When I now switch to a ne=\r\nw set of data it&#39;s nearly impossible to reach this fitness and so the best =\r\ngenome will never change again, even if it performs really bad on different=\r\n inputs.\n&gt; My idea was that I could reset the best fitness each time when I=\r\n change the input data. The data is changed within the EvaluateNetwork meth=\r\nod; is there also a way to reset the best fitness from within this method? =\r\nOr should I better change the whole workflow?\n&gt; \n&gt; Cheers,\n&gt; Daniel\n&gt; \n&gt; --=\r\n- In neat@yahoogroups.com, &quot;Daniel&quot; &lt;daniel_kuppitz@&gt; wrote:\n&gt; &gt;\n&gt; &gt; Hello =\r\neveryone,\n&gt; &gt; \n&gt; &gt; I have a general question regarding the learning process=\r\n.\n&gt; &gt; \n&gt; &gt; After playing around with NERO the last days, I&#39;ve learned a lot=\r\n about how networks learn, but I still found no answer to this elementary q=\r\nuestion: In which sequence should I train a network that has to solve more =\r\nthan one task. NERO isn&#39;t build with HyperNEAT, but I think my questions ta=\r\nrget HyperNEAT as well as NEAT.\n&gt; &gt; \n&gt; &gt; Consider 9 stages:\n&gt; &gt; \n&gt; &gt; Networ=\r\nk is ...\n&gt; &gt; \n&gt; &gt;   1: quite good in task #1\n&gt; &gt;   2: really good in task #=\r\n1\n&gt; &gt;   3: perfect in task #1\n&gt; &gt;   4: quite good in task #2\n&gt; &gt;   5: reall=\r\ny good in task #2\n&gt; &gt;   6: perfect in task #2\n&gt; &gt;   7: quite good in task #=\r\n1 and #2\n&gt; &gt;   8: really good in task #1 and #2\n&gt; &gt;   9: perfect in task #1=\r\n and #2\n&gt; &gt; \n&gt; &gt; Obviously I&#39;ll begin with stage 1, but what&#39;s next? Should=\r\n I continue to train my network in this task (continue with stage 2) or sho=\r\nuld I switch to the next task (stage 4/7) and come back to stage 2 later.\n&gt;=\r\n &gt; The next question is: How should I calculate the fitness when the networ=\r\nk is trained in task #2.  Should solutions for task #2 be rewarded higher t=\r\nhan those for task #1 (stage 4) or should solutions for task #1 still get t=\r\nhe same reward as in stage 1 (stage 7)?\n&gt; &gt; \n&gt; &gt; Maybe there&#39;s no general a=\r\nnswer to my questions, but what&#39;s the best practice? What makes sense, what=\r\n does not?\n&gt; &gt; \n&gt; &gt; Cheers,\n&gt; &gt; Daniel\n&gt; &gt;\n&gt;\n\n\n\n"}}