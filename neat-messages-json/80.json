{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"bZfhqYoYVA8ZaQPsAOyCKz1DYlDIHbg4b__u7kaz76vN4-iu5n4i2A9rm85ZxRrBWeXg55Mn1hZ7CoOaGO7TflecXCmWhcVaTA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Sail Challenge 1.0","postDate":"1063842002","msgId":80,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNGNjhGMEQxLjQwMTA3QGRzbC5waXBleC5jb20+","referencesHeader":"PGJrODRrMCs5YzA3QGVHcm91cHMuY29tPg=="},"prevInTopic":79,"nextInTopic":81,"prevInTime":79,"nextInTime":81,"topicId":79,"numMessagesInTopic":5,"msgSnippet":"... Ditto.  Apart from the fact my name is Colin :) ... Sounds interesting. What was the driving force behind creating a sailing simulation? For some time now","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 3006 invoked from network); 17 Sep 2003 23:39:57 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m4.grp.scd.yahoo.com with QMQP; 17 Sep 2003 23:39:57 -0000\r\nReceived: from unknown (HELO shockwave.systems.pipex.net) (62.241.160.9)\n  by mta2.grp.scd.yahoo.com with SMTP; 17 Sep 2003 23:39:57 -0000\r\nReceived: from dsl.pipex.com (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby shockwave.systems.pipex.net (Postfix) with ESMTP id 80A251C00169\n\tfor &lt;neat@yahoogroups.com&gt;; Thu, 18 Sep 2003 00:39:55 +0100 (BST)\r\nMessage-ID: &lt;3F68F0D1.40107@...&gt;\r\nDate: Thu, 18 Sep 2003 00:40:02 +0100\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.0.0) Gecko/20020530\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nSubject: Re: [neat] Sail Challenge 1.0\r\nReferences: &lt;bk84k0+9c07@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nReply-To: cgreen@...\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nzenguyuno wrote:\n\n&gt;Hi,\n&gt;\n&gt;I&#39;m Mitchell Timin and I just joined your group at Ken Stanley&#39;s \n&gt;suggestion.  Hello to everyone!\n&gt;  \n&gt;\nDitto.  Apart from the fact my name is Colin :)\n\n&gt;I&#39;ve just released a small software package for free download.  It \n&gt;contains a simplified physics model of a sailboat, and a means of \n&gt;controlling it.  There is a goal, to sail around a circular island.  \n&gt;There is randomly varying wind.  The package includes one example of \n&gt;a controller that can do a fair job.  The purpose of all this is to \n&gt;invite someone to produce a better controller.  Any software \n&gt;technology is acceptable, but someone in this group may want to apply \n&gt;NEAT.  My own controller is an ANN, produced by more conventional \n&gt;neuroevolution.  (If there is such a thing as conventional \n&gt;neuroevolution!)  \n&gt;  \n&gt;\nSounds interesting. What was the driving force behind creating a sailing \nsimulation? For some time now I have been thinking about finding a group \nof like minded people on the internet and putting together a library of \nsimulation environments for use in neuro evolution (NE) experiments. I \nhave code in C++ (now ported to C#) for the prey capture environment \nthat was described by Faustino Gomez & Risto Miikkulainen in \n&quot;Incremental Evolution of Complex General Behaviour&quot;. What I like about \nthis environment is its support for increasing the difficulty of the \ntask on a continuous scale. For modern NE systems (such as NEAT) it is \nan easy task to solve. Actually I am assuming that because I don&#39;t know \nthat NEAT has been applied to this particular problem, but from what I \nhave read I am confident it would solve the problem easily.\n\nNow for someone like me, having written a completely new NE system I can \nuse prey capture as a baseline. I know that other NE systems out their \nhave solved the problem, so if my system cannot solve it then I need to \ngo back to the drawing board! However, in the long run it is going to be \nnecessary to have a number of test environments that test NE systems in \ndifferent ways. It will therefore be necessary to have some kind of \nenvironment classification system in place, perhaps giving each a number \nof ratings based on complexity, whether it provides for incremental \nevolution, whether or not it has an ultimate goal task - e.g. if we have \nan environment that supports competing agents then the sky is the limit, \nthere is no point at which we say the problem has been solved, only that \none agent is better than another at surviving.\n\nI was thinking about standardizing these environments by having them all \nimplement an abstract base class in C++.  My own environment base class \nlooks like this (this is actually C#):\n\n    public interface IEnvironment\n    {\n        // Evaluate a single network.\n        double Evaluate(INetwork network);  \n              \n        // Supports evaluating whole populations of competing agents.\n        double[] Evaluate(NetworkList networkList);\n    }\n\nMy Neural Network abstraction is similarly basic:\n\n    public interface INetwork\n    {\n        void singleStep();\n        void multipleSteps(int numberOfSteps);\n\n        void setInputSignal(int index, double signalValue);\n\n        /// If index is greater than the number of output neurons then \nwe loop back to the first neuron.\n        /// Therefore we return a value for any given index number &gt;=0.\n        double getOutputSignal(int index);       \n    }\n\nThis interface works because my neurons exist in one dimensional space \nand therefore have a single position coordinate. They are ordered based \non their coordinate and all neurons are used as outputs in reverse \norder. So index 0 refers to the last node, 1 refers to the last but one \netc.  The beautty of using these abstractions is that the type of neural \nnetwork and environment I use is completely interchangable (at compile \ntime anyhow). However I don&#39;t think my INetwork is going to hold up as a \ngeneral use interface when more complex problems come along with, say, \n2d arrays of inputs. Sure they can be mapped to a 1D input space, but \ndoes that potentially loose some useful information that an NE system \ncould use? I think it does, the NE system would have to rediscover the \nbounds of the two dimensions.\n\n&gt;It&#39;s written in C.  You can get it from \n&gt;http://annevolve.sourceforge.net.\n&gt;\nI haven&#39;t tried using NEAT yet. Maybe if no-one else volunteers \nbeforehand then I&#39;ll try and apply it to your environment over the weekend.\n\nColin\n\n\n\n\n"}}