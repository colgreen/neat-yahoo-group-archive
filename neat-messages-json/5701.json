{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":467342474,"authorName":"Jeff Clune","from":"Jeff Clune &lt;jeffclune@...&gt;","profile":"jeffreyclune","replyTo":"LIST","senderId":"_vcaaDhHpI0wdEOFHVtYAmKFn5--pfneErYwxqEzRjma8Ch6Fg0FOFL75IeKZ7OSgZfugc-cXCkX5KqwbIuUbbm8yzKKwMMoDA","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [neat] Hyperneat Network Output Layer All Zero","postDate":"1321920087","msgId":5701,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDFGRUZCQTUwLTJDNjItNDg3OS1CMTYwLUMyRTlBM0QxMTVDMUBjb3JuZWxsLmVkdT4=","inReplyToHeader":"PGphZWwwZSs2dDVyQGVHcm91cHMuY29tPg==","referencesHeader":"PGphZWwwZSs2dDVyQGVHcm91cHMuY29tPg=="},"prevInTopic":5699,"nextInTopic":5702,"prevInTime":5700,"nextInTime":5702,"topicId":5699,"numMessagesInTopic":7,"msgSnippet":"Hello. Make sure you are doing enough updates of the phenotype neural net to propagate the info all the way through the network....for debugging you may wish","rawEmail":"Return-Path: &lt;jclune@...&gt;\r\nX-Sender: jclune@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 2159 invoked from network); 22 Nov 2011 00:01:08 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m2.grp.sp2.yahoo.com with QMQP; 22 Nov 2011 00:01:08 -0000\r\nX-Received: from unknown (HELO mail-vx0-f171.google.com) (209.85.220.171)\n  by mta5.grp.sp2.yahoo.com with SMTP; 22 Nov 2011 00:01:07 -0000\r\nX-Received: by vcbfo1 with SMTP id fo1so1812478vcb.30\n        for &lt;neat@yahoogroups.com&gt;; Mon, 21 Nov 2011 16:01:07 -0800 (PST)\r\nX-Received: by 10.52.26.47 with SMTP id i15mr17933981vdg.0.1321920067071;\n        Mon, 21 Nov 2011 16:01:07 -0800 (PST)\r\nReturn-Path: &lt;jclune@...&gt;\r\nX-Received: from [192.168.0.106] (ccsl-router.mae.cornell.edu. [128.253.224.70])\n        by mx.google.com with ESMTPS id df14sm2733249vdb.0.2011.11.21.16.01.04\n        (version=TLSv1/SSLv3 cipher=OTHER);\n        Mon, 21 Nov 2011 16:01:05 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v1084)\r\nContent-Type: multipart/alternative; boundary=Apple-Mail-293-15504253\r\nDate: Mon, 21 Nov 2011 19:01:27 -0500\r\nIn-Reply-To: &lt;jael0e+6t5r@...&gt;\r\nTo: &lt;neat@yahoogroups.com&gt;\r\nReferences: &lt;jael0e+6t5r@...&gt;\r\nMessage-Id: &lt;1FEFBA50-2C62-4879-B160-C2E9A3D115C1@...&gt;\r\nX-Mailer: Apple Mail (2.1084)\r\nX-eGroups-Msg-Info: 2:4:8:0:0\r\nFrom: Jeff Clune &lt;jeffclune@...&gt;\r\nSubject: Re: [neat] Hyperneat Network Output Layer All Zero\r\nX-Yahoo-Group-Post: member; u=467342474; y=7bfSrhieUq6c0UyxAGn1oMbEh-OPY_9rCKHQa4rd3jSoFnEHBRXl\r\nX-Yahoo-Profile: jeffreyclune\r\n\r\n\r\n--Apple-Mail-293-15504253\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=windows-1252\r\n\r\nHello. Make sure you are doing enough updates of the phenotype neural net t=\r\no propagate the info all the way through the network....for debugging you m=\r\nay wish to print out the values of the first hidden layer after one update.=\r\n..and possibly the values at each hidden layer after each update...so you c=\r\nan see what is going on. Or just make sure to have the number of updates be=\r\n greater than or equal to the number of hidden layers. That might not be yo=\r\nur issue, but that is a common mistake. \n\n\nBest regards,\nJeff Clune\n\nPostdo=\r\nctoral Fellow\nHod Lipson&#39;s Creative Machines Laboratory\nCornell University\n=\r\njeffclune@...\njeffclune.com\n\nOn Nov 21, 2011, at 5:57 PM, Matthew_H=\r\nausknecht wrote:\n\n&gt; Hi, I&#39;m trying to run Hyperneat on a simple Atari game =\r\nand was starting out by replicating some of the experiment examples. My cod=\r\ne compiles and runs, but the value of the output node in the network always=\r\n seems to be zero. I suspect I am doing something wrong in the initalizatio=\r\nn/update step, but I&#39;m not sure what... Code is as follows:\n&gt; \n&gt; #include &quot;=\r\nHCUBE_Defines.h&quot;\n&gt; \n&gt; #include &quot;Experiments/HCUBE_AtariExperiment.h&quot;\n&gt; #inc=\r\nlude &lt;boost/foreach.hpp&gt;\n&gt; \n&gt; using namespace NEAT;\n&gt; \n&gt; enum GamePositionV=\r\nalue {\n&gt; EMPTY,\n&gt; CHICKEN,\n&gt; VEHICLE\n&gt; };\n&gt; \n&gt; namespace HCUBE\n&gt; {\n&gt; AtariE=\r\nxperiment::AtariExperiment(string _experimentName,int _threadID):\n&gt; Experim=\r\nent(_experimentName,_threadID)\n&gt; {\n&gt; layerInfo =3D NEAT::LayeredSubstrateIn=\r\nfo();\n&gt; layerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));\n&gt; layerInfo.laye=\r\nrIsInput.push_back(true);\n&gt; layerInfo.layerLocations.push_back(Vector3&lt;floa=\r\nt&gt;(0,0,0));\n&gt; layerInfo.layerNames.push_back(&quot;Input&quot;);\n&gt; \n&gt; layerInfo.layer=\r\nSizes.push_back(Vector2&lt;int&gt;(8,8));\n&gt; layerInfo.layerIsInput.push_back(fals=\r\ne);\n&gt; layerInfo.layerLocations.push_back(Vector3&lt;float&gt;(0,4,0));\n&gt; layerInf=\r\no.layerNames.push_back(&quot;Output&quot;);\n&gt; \n&gt; layerInfo.layerAdjacencyList.push_ba=\r\nck(std::pair&lt;string,string&gt;(&quot;Input&quot;,&quot;Output&quot;));\n&gt; \n&gt; layerInfo.normalize =\r\n=3D true;\n&gt; layerInfo.useOldOutputNames =3D false;\n&gt; layerInfo.layerValidSi=\r\nzes =3D layerInfo.layerSizes;\n&gt; \n&gt; substrate =3D NEAT::LayeredSubstrate&lt;flo=\r\nat&gt;();\n&gt; substrate.setLayerInfo(layerInfo);\n&gt; }\n&gt; \n&gt; NEAT::GeneticPopulatio=\r\nn* AtariExperiment::createInitialPopulation(int populationSize) {\n&gt; Genetic=\r\nPopulation *population =3D new GeneticPopulation();\n&gt; vector&lt;GeneticNodeGen=\r\ne&gt; genes;\n&gt; \n&gt; genes.push_back(GeneticNodeGene(&quot;Bias&quot;,&quot;NetworkSensor&quot;,0,fal=\r\nse));\n&gt; genes.push_back(GeneticNodeGene(&quot;X1&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; g=\r\nenes.push_back(GeneticNodeGene(&quot;X2&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; genes.push=\r\n_back(GeneticNodeGene(&quot;Y1&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; genes.push_back(Gen=\r\neticNodeGene(&quot;Y2&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt; genes.push_back(GeneticNodeG=\r\nene(&quot;Output&quot;,&quot;NetworkOutputNode&quot;,1,false,ACTIVATION_FUNCTION_SIGMOID));\n&gt; \n=\r\n&gt; for (int a=3D0;a&lt;populationSize;a++) {\n&gt; shared_ptr&lt;GeneticIndividual&gt; in=\r\ndividual(new GeneticIndividual(genes,true,1.0));\n&gt; for (int b=3D0;b&lt;0;b++) =\r\n{\n&gt; individual-&gt;testMutate();\n&gt; }\n&gt; population-&gt;addIndividual(individual);\n=\r\n&gt; }\n&gt; \n&gt; cout &lt;&lt; &quot;Finished creating population&#92;n&quot;;\n&gt; return population;\n&gt; }=\r\n\n&gt; \n&gt; void AtariExperiment::populateSubstrate(shared_ptr&lt;NEAT::GeneticIndiv=\r\nidual&gt; individual) {\n&gt; if (currentSubstrateIndividual =3D=3D individual)\n&gt; =\r\nreturn;\n&gt; \n&gt; currentSubstrateIndividual =3D individual;\n&gt; substrate.populat=\r\neSubstrate(individual);\n&gt; }\n&gt; \n&gt; void AtariExperiment::processGroup(shared_=\r\nptr&lt;NEAT::GeneticGeneration&gt; generation)\n&gt; {\n&gt; shared_ptr&lt;NEAT::GeneticIndi=\r\nvidual&gt; individual =3D group.front();\n&gt; //You get 10 points just for being =\r\nprocessed, wahooo!\n&gt; individual-&gt;setFitness(10);\n&gt; populateSubstrate(indivi=\r\ndual);\n&gt; runAtariEpisode(individual);\n&gt; }\n&gt; \n&gt; void AtariExperiment::runAta=\r\nriEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt; individual) {\n&gt; GamePositionV=\r\nalue gameState[8][8];\n&gt; \n&gt; int chic_x =3D 4, chic_y =3D 7;\n&gt; float total_re=\r\nward =3D 0.0;\n&gt; \n&gt; // Initialize Game\n&gt; for (int x=3D0;x&lt;8;x++) {\n&gt; for (in=\r\nt y=3D0;y&lt;8;y++) {\n&gt; gameState[x][y] =3D EMPTY;\n&gt; }\n&gt; }\n&gt; gameState[chic_x]=\r\n[chic_y] =3D CHICKEN;\n&gt; \n&gt; // Run simulation for t timesteps\n&gt; int num_time=\r\nsteps =3D 10;\n&gt; for (int t=3D0; t&lt;num_timesteps; t++) {\n&gt; substrate.getNetw=\r\nork()-&gt;reinitialize();\n&gt; substrate.getNetwork()-&gt;dummyActivation();\n&gt; \n&gt; //=\r\n Set substrate values\n&gt; for (int x=3D0; x&lt;8; ++x) {\n&gt; for (int y=3D0; y&lt;8; =\r\n++y) {\n&gt; // if (gameState[x][y] =3D=3D CHICKEN) {\n&gt; // substrate.setValue((=\r\nNode(x,y,0)), 1.0);\n&gt; // } else if (gameState[x][y] =3D=3D VEHICLE) {\n&gt; // =\r\nsubstrate.setValue((Node(x,y,0)), -1.0); \n&gt; // } else {\n&gt; // substrate.setV=\r\nalue((Node(x,y,0)), 0.0); \n&gt; // }\n&gt; substrate.setValue((Node(x,y,0)), (floa=\r\nt)((7.0-y)/7.0));\n&gt; }\n&gt; }\n&gt; \n&gt; substrate.getNetwork()-&gt;update();\n&gt; \n&gt; for (=\r\nint x=3D0; x&lt;8; ++x) {\n&gt; for (int y=3D0; y&lt;8; ++y) {\n&gt; float val =3D substr=\r\nate.getValue((Node(x,y,1)));\n&gt; if (val !=3D 0)\n&gt; printf(&quot;Got Nonzero val %f=\r\n at %d,%d&#92;n&quot;,val,x,y);\n&gt; }\n&gt; }\n&gt; float chicken_val =3D substrate.getValue((=\r\nNode(chic_x,chic_y,1)));\n&gt; float down_val =3D (chic_y =3D=3D 7) ? chicken_v=\r\nal : substrate.getValue((Node(chic_x,chic_y+1,1)));\n&gt; float up_val =3D (chi=\r\nc_y =3D=3D 0) ? chicken_val : substrate.getValue((Node(chic_x,chic_y-1,1)))=\r\n;\n&gt; \n&gt; int action;\n&gt; if (chicken_val &gt;=3D up_val) {\n&gt; if (chicken_val &gt;=3D =\r\ndown_val) {\n&gt; action =3D 0;\n&gt; } else {\n&gt; action =3D +1;\n&gt; }\n&gt; } else {\n&gt; if=\r\n (up_val &gt;=3D down_val) {\n&gt; action =3D -1;\n&gt; } else {\n&gt; action =3D 1;\n&gt; }\n&gt;=\r\n }\n&gt; \n&gt; // Update game state with action\n&gt; gameState[chic_x][chic_y] =3D EM=\r\nPTY;\n&gt; gameState[chic_x][chic_y+action] =3D CHICKEN;\n&gt; chic_y +=3D action;\n=\r\n&gt; \n&gt; // Compute reward\n&gt; if (chic_y =3D=3D 0) {\n&gt; total_reward +=3D 1.0;\n&gt; =\r\n// Reset the sim\n&gt; gameState[chic_x][chic_y] =3D EMPTY;\n&gt; gameState[chic_x]=\r\n[7] =3D CHICKEN;\n&gt; chic_y =3D 7;\n&gt; }\n&gt; }\n&gt; //cout &lt;&lt; &quot;Got total reward: &quot; &lt;=\r\n&lt; total_reward &lt;&lt; endl;\n&gt; individual-&gt;reward(total_reward);\n&gt; }\n&gt; \n&gt; \n\n\r\n--Apple-Mail-293-15504253\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=windows-1252\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;Hello. Make sure you are d=\r\noing enough updates of the phenotype neural net to propagate the info all t=\r\nhe way through the network....for debugging you may wish to print out the v=\r\nalues of the first hidden layer after one update...and possibly the values =\r\nat each hidden layer after each update...so you can see what is going on. O=\r\nr just make sure to have the number of updates be greater than or equal to =\r\nthe number of hidden layers. That might not be your issue, but that is a co=\r\nmmon mistake.&nbsp;&lt;br&gt;&lt;div&gt;\n&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;bord=\r\ner-collapse: separate; color: rgb(0, 0, 0); font-family: Times; font-style:=\r\n normal; font-variant: normal; font-weight: normal; letter-spacing: normal;=\r\n line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0p=\r\nx; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;=\r\n -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0=\r\npx; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: aut=\r\no; -webkit-text-stroke-width: 0px; font-size: medium; &quot;&gt;&lt;span class=3D&quot;Appl=\r\ne-style-span&quot; style=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); font=\r\n-variant: normal; letter-spacing: normal; line-height: normal; orphans: 2; =\r\ntext-align: -webkit-auto; text-indent: 0px; text-transform: none; white-spa=\r\nce: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing=\r\n: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-ef=\r\nfect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;=\r\n &quot;&gt;&lt;div style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-l=\r\nine-break: after-white-space; &quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;b=\r\norder-collapse: separate; color: rgb(0, 0, 0); font-variant: normal; letter=\r\n-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto=\r\n; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; w=\r\nord-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-ve=\r\nrtical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text=\r\n-size-adjust: auto; -webkit-text-stroke-width: 0px; &quot;&gt;&lt;div style=3D&quot;word-wr=\r\nap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-s=\r\npace; &quot;&gt;&lt;br class=3D&quot;Apple-interchange-newline&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;fon=\r\nt-size: medium; font-weight: normal; font-style: normal; word-wrap: break-w=\r\nord; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; &quot;&gt;Bes=\r\nt regards,&lt;br&gt;&lt;font class=3D&quot;Apple-style-span&quot; color=3D&quot;#0a5d19&quot;&gt;&lt;b&gt;Jeff Cl=\r\nune&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;Postdoctoral Fellow&lt;br&gt;Hod Lipson&#39;s Creative&nbsp;Mac=\r\nhines Laboratory&lt;br&gt;Cornell University&lt;br&gt;&lt;a href=3D&quot;mailto:jeffclune@corne=\r\nll.edu&quot;&gt;jeffclune@...&lt;/a&gt;&lt;br&gt;jeffclune.com&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span=\r\n&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;br&gt;&lt;div&gt;&lt;div&gt;On Nov 21, 2011, at 5:57 PM, Matthew_Hausknec=\r\nht wrote:&lt;/div&gt;&lt;br class=3D&quot;Apple-interchange-newline&quot;&gt;&lt;blockquote type=3D&quot;=\r\ncite&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color: #fff;&quot;&gt;\n&lt;span style=3D&quot;=\r\ndisplay:none&quot;&gt;&nbsp;&lt;/span&gt;\n\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;Hi, I&#39;m trying =\r\nto run Hyperneat on a simple Atari game and was starting out by replicating=\r\n some of the experiment examples. My code compiles and runs, but the value =\r\nof the output node in the network always seems to be zero. I suspect I am d=\r\noing something wrong in the initalization/update step, but I&#39;m not sure wha=\r\nt... Code is as follows:&lt;br&gt;\n&lt;br&gt;\n#include &quot;HCUBE_Defines.h&quot;&lt;br&gt;\n&lt;br&gt;\n#incl=\r\nude &quot;Experiments/HCUBE_AtariExperiment.h&quot;&lt;br&gt;\n#include &lt;boost/foreach.hp=\r\np&gt;&lt;br&gt;\n&lt;br&gt;\nusing namespace NEAT;&lt;br&gt;\n&lt;br&gt;\nenum GamePositionValue {&lt;br&gt;\n=\r\n  EMPTY,&lt;br&gt;\n  CHICKEN,&lt;br&gt;\n  VEHICLE&lt;br&gt;\n};&lt;br&gt;\n&lt;br&gt;\nnamespace HCUBE&lt;br&gt;\n{=\r\n&lt;br&gt;\n  AtariExperiment::AtariExperiment(string _experimentName,int _threadI=\r\nD):&lt;br&gt;\n    Experiment(_experimentName,_threadID)&lt;br&gt;\n  {&lt;br&gt;\n    layerInfo=\r\n =3D NEAT::LayeredSubstrateInfo();&lt;br&gt;\n    layerInfo.layerSizes.push_back(V=\r\nector2&lt;int&gt;(8,8));&lt;br&gt;\n    layerInfo.layerIsInput.push_back(true);&lt;br=\r\n&gt;\n    layerInfo.layerLocations.push_back(Vector3&lt;float&gt;(0,0,0));&lt;br&gt;\n=\r\n    layerInfo.layerNames.push_back(&quot;Input&quot;);&lt;br&gt;\n&lt;br&gt;\nlayerInfo.layerSizes.=\r\npush_back(Vector2&lt;int&gt;(8,8));&lt;br&gt;\n    layerInfo.layerIsInput.push_bac=\r\nk(false);&lt;br&gt;\n    layerInfo.layerLocations.push_back(Vector3&lt;float&gt;(0=\r\n,4,0));&lt;br&gt;\n    layerInfo.layerNames.push_back(&quot;Output&quot;);&lt;br&gt;\n&lt;br&gt;\nlayerInf=\r\no.layerAdjacencyList.push_back(std::pair&lt;string,string&gt;(&quot;Input&quot;,&quot;Outp=\r\nut&quot;));&lt;br&gt;\n&lt;br&gt;\nlayerInfo.normalize =3D true;&lt;br&gt;\n    layerInfo.useOldOutpu=\r\ntNames =3D false;&lt;br&gt;\n    layerInfo.layerValidSizes =3D layerInfo.layerSize=\r\ns;&lt;br&gt;\n&lt;br&gt;\nsubstrate =3D NEAT::LayeredSubstrate&lt;float&gt;();&lt;br&gt;\n    su=\r\nbstrate.setLayerInfo(layerInfo);&lt;br&gt;\n  }&lt;br&gt;\n&lt;br&gt;\nNEAT::GeneticPopulation* =\r\nAtariExperiment::createInitialPopulation(int populationSize) {&lt;br&gt;\n    Gene=\r\nticPopulation *population =3D new GeneticPopulation();&lt;br&gt;\n    vector&lt;Ge=\r\nneticNodeGene&gt; genes;&lt;br&gt;\n&lt;br&gt;\ngenes.push_back(GeneticNodeGene(&quot;Bias&quot;,&quot;N=\r\networkSensor&quot;,0,false));&lt;br&gt;\n    genes.push_back(GeneticNodeGene(&quot;X1&quot;,&quot;Netw=\r\norkSensor&quot;,0,false));&lt;br&gt;\n    genes.push_back(GeneticNodeGene(&quot;X2&quot;,&quot;Network=\r\nSensor&quot;,0,false));&lt;br&gt;\n    genes.push_back(GeneticNodeGene(&quot;Y1&quot;,&quot;NetworkSen=\r\nsor&quot;,0,false));&lt;br&gt;\n    genes.push_back(GeneticNodeGene(&quot;Y2&quot;,&quot;NetworkSensor=\r\n&quot;,0,false));&lt;br&gt;\n    genes.push_back(GeneticNodeGene(&quot;Output&quot;,&quot;NetworkOutpu=\r\ntNode&quot;,1,false,ACTIVATION_FUNCTION_SIGMOID));&lt;br&gt;\n&lt;br&gt;\nfor (int a=3D0;a&lt;=\r\npopulationSize;a++) {&lt;br&gt;\n      shared_ptr&lt;GeneticIndividual&gt; individ=\r\nual(new GeneticIndividual(genes,true,1.0));&lt;br&gt;\n      for (int b=3D0;b&lt;0=\r\n;b++) {&lt;br&gt;\n        individual-&gt;testMutate();&lt;br&gt;\n      }&lt;br&gt;\n      popu=\r\nlation-&gt;addIndividual(individual);&lt;br&gt;\n    }&lt;br&gt;\n&lt;br&gt;\ncout &lt;&lt; &quot;Fin=\r\nished creating population&#92;n&quot;;&lt;br&gt;\n    return population;&lt;br&gt;\n  }&lt;br&gt;\n&lt;br&gt;\nv=\r\noid AtariExperiment::populateSubstrate(shared_ptr&lt;NEAT::GeneticIndividua=\r\nl&gt; individual) {&lt;br&gt;\n    if (currentSubstrateIndividual =3D=3D individua=\r\nl)&lt;br&gt;\n      return;&lt;br&gt;\n&lt;br&gt;\ncurrentSubstrateIndividual =3D individual;&lt;br=\r\n&gt;\n    substrate.populateSubstrate(individual);&lt;br&gt;\n  }&lt;br&gt;\n&lt;br&gt;\nvoid AtariE=\r\nxperiment::processGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt; generatio=\r\nn)&lt;br&gt;\n  {&lt;br&gt;\n    shared_ptr&lt;NEAT::GeneticIndividual&gt; individual =3D=\r\n group.front();&lt;br&gt;\n    //You get 10 points just for being processed, wahoo=\r\no!&lt;br&gt;\n    individual-&gt;setFitness(10);&lt;br&gt;\n    populateSubstrate(individ=\r\nual);&lt;br&gt;\n    runAtariEpisode(individual);&lt;br&gt;\n  }&lt;br&gt;\n&lt;br&gt;\nvoid AtariExper=\r\niment::runAtariEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt; individual=\r\n) {&lt;br&gt;\n    GamePositionValue gameState[8][8];&lt;br&gt;\n&lt;br&gt;\nint chic_x =3D 4, c=\r\nhic_y =3D 7;&lt;br&gt;\n    float total_reward =3D 0.0;&lt;br&gt;\n    &lt;br&gt;\n    // Initia=\r\nlize Game&lt;br&gt;\n    for (int x=3D0;x&lt;8;x++) {&lt;br&gt;\n      for (int y=3D0;y&l=\r\nt;8;y++) {&lt;br&gt;\n        gameState[x][y] =3D EMPTY;&lt;br&gt;\n      }&lt;br&gt;\n    }&lt;br&gt;=\r\n\n    gameState[chic_x][chic_y] =3D CHICKEN;&lt;br&gt;\n&lt;br&gt;\n// Run simulation for =\r\nt timesteps&lt;br&gt;\n    int num_timesteps =3D 10;&lt;br&gt;\n    for (int t=3D0; t&lt;=\r\nnum_timesteps; t++) {&lt;br&gt;\n      substrate.getNetwork()-&gt;reinitialize();&lt;=\r\nbr&gt;\n      substrate.getNetwork()-&gt;dummyActivation();&lt;br&gt;\n&lt;br&gt;\n// Set sub=\r\nstrate values&lt;br&gt;\n      for (int x=3D0; x&lt;8; ++x) {&lt;br&gt;\n        for (int=\r\n y=3D0; y&lt;8; ++y) {&lt;br&gt;\n          // if (gameState[x][y] =3D=3D CHICKEN)=\r\n {&lt;br&gt;\n          //   substrate.setValue((Node(x,y,0)), 1.0);&lt;br&gt;\n         =\r\n // } else if (gameState[x][y] =3D=3D VEHICLE) {&lt;br&gt;\n          //   substra=\r\nte.setValue((Node(x,y,0)), -1.0);            &lt;br&gt;\n          // } else {&lt;br&gt;=\r\n\n          //   substrate.setValue((Node(x,y,0)), 0.0);            &lt;br&gt;\n   =\r\n       // }&lt;br&gt;\n          substrate.setValue((Node(x,y,0)), (float)((7.0-y)=\r\n/7.0));&lt;br&gt;\n        }&lt;br&gt;\n      }&lt;br&gt;\n&lt;br&gt;\nsubstrate.getNetwork()-&gt;updat=\r\ne();&lt;br&gt;\n&lt;br&gt;\nfor (int x=3D0; x&lt;8; ++x) {&lt;br&gt;\n        for (int y=3D0; y&=\r\nlt;8; ++y) {&lt;br&gt;\n          float val =3D substrate.getValue((Node(x,y,1)));=\r\n&lt;br&gt;\n          if (val !=3D 0)&lt;br&gt;\n            printf(&quot;Got Nonzero val %f a=\r\nt %d,%d&#92;n&quot;,val,x,y);&lt;br&gt;\n        }&lt;br&gt;\n      }&lt;br&gt;\n      float chicken_val =\r\n=3D substrate.getValue((Node(chic_x,chic_y,1)));&lt;br&gt;\n      float down_val =\r\n=3D (chic_y =3D=3D 7) ? chicken_val : substrate.getValue((Node(chic_x,chic_=\r\ny+1,1)));&lt;br&gt;\n      float up_val =3D (chic_y =3D=3D 0) ? chicken_val : subs=\r\ntrate.getValue((Node(chic_x,chic_y-1,1)));&lt;br&gt;\n&lt;br&gt;\nint action;&lt;br&gt;\n      i=\r\nf (chicken_val &gt;=3D up_val) {&lt;br&gt;\n        if (chicken_val &gt;=3D down_v=\r\nal) {&lt;br&gt;\n          action =3D 0;&lt;br&gt;\n        } else {&lt;br&gt;\n          action=\r\n =3D +1;&lt;br&gt;\n        }&lt;br&gt;\n      } else {&lt;br&gt;\n        if (up_val &gt;=3D do=\r\nwn_val) {&lt;br&gt;\n          action =3D -1;&lt;br&gt;\n        } else {&lt;br&gt;\n          a=\r\nction =3D 1;&lt;br&gt;\n        }&lt;br&gt;\n      }&lt;br&gt;\n&lt;br&gt;\n// Update game state with a=\r\nction&lt;br&gt;\n      gameState[chic_x][chic_y] =3D EMPTY;&lt;br&gt;\n      gameState[ch=\r\nic_x][chic_y+action] =3D CHICKEN;&lt;br&gt;\n      chic_y +=3D action;&lt;br&gt;\n&lt;br&gt;\n//=\r\n Compute reward&lt;br&gt;\n      if (chic_y =3D=3D 0) {&lt;br&gt;\n        total_reward +=\r\n=3D 1.0;&lt;br&gt;\n        // Reset the sim&lt;br&gt;\n        gameState[chic_x][chic_y]=\r\n =3D EMPTY;&lt;br&gt;\n        gameState[chic_x][7] =3D CHICKEN;&lt;br&gt;\n        chic_=\r\ny =3D 7;&lt;br&gt;\n      }&lt;br&gt;\n    }&lt;br&gt;\n    //cout &lt;&lt; &quot;Got total reward: &quot;=\r\n &lt;&lt; total_reward &lt;&lt; endl;&lt;br&gt;\n    individual-&gt;reward(total_r=\r\neward);&lt;br&gt;\n  }&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n\n&lt;/div&gt;\n\n\n\n&lt;!-- end g=\r\nroup email --&gt;\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;\r\n--Apple-Mail-293-15504253--\r\n\n"}}