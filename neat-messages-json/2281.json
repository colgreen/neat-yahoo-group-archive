{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"wkY7sZIU4stXZcinL31DFDgcTqGK-L2yvc7wW8dgtt9Hll4ubqCJNPraDZLtAzt45ntKpzlUIBDBjzm9hLBd2AN6pEf4cZhbIs4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"SLEAT - an aside","postDate":"1127141218","msgId":2281,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4wLjE0LjAuMjAwNTA5MTkxNTIwMzYuMDMzMDNmYjBAcG9wLm1haWwueWFob28uY28udWs+"},"prevInTopic":0,"nextInTopic":0,"prevInTime":2280,"nextInTime":2282,"topicId":2281,"numMessagesInTopic":1,"msgSnippet":"Hi,\n\tWhile working on SLEAT I ran into a particular problem of my genomes \nbloating to unreasonable size whilst the population was stalled waiting for \nthe","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 93896 invoked from network); 19 Sep 2005 14:41:45 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m35.grp.scd.yahoo.com with QMQP; 19 Sep 2005 14:41:45 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta4.grp.scd.yahoo.com with SMTP; 19 Sep 2005 14:41:45 -0000\r\nReceived: (qmail 63584 invoked from network); 19 Sep 2005 14:41:40 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 19 Sep 2005 14:41:40 -0000\r\nMessage-Id: &lt;6.2.0.14.0.20050919152036.03303fb0@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.0.14\r\nDate: Mon, 19 Sep 2005 15:46:58 +0100\r\nTo: neat@yahoogroups.com\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: SLEAT - an aside\r\nX-Yahoo-Group-Post: member; u=7192225; y=2xi9u5KDYElbB62b6cSteWhL9y8XEOe5HtKvJsdTlq7PHGHApA\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi,\n\tWhile working on SLEAT I ran into a particular problem of my genomes \nbloating to unreasonable size whilst the population was stalled waiting for \nthe next breakthrough.  There were quite good reasons to do with the \ndetails of SLEAT why this is problem is bad for me, but what I wanted to \ntalk about here is an interesting non-result I got when I was trying to \nwork around the problem.\n\n\tWhat I tried was replacing the simple score for each individual with a \npair of values, where the first value was the simple fitness, and the \nsecond was the negative of the individuals size.  When comparing two of \nthese coordinate scores, the method used was:\n\nbool MultiScore::operator&gt;(const MultiScore &rhs) const {\n\tassert(m_Scores.size() == rhs.m_Scores.size());\n\n\tfor(int i = 0; i &lt; m_Scores.size(); i++) {\n\t\tif (m_Scores[i] &gt; rhs.m_Scores[i]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (m_Scores[i] &lt; rhs.m_Scores[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n\t[[ You&#39;ll see I generalised it to N components, not just two, although I \nwas only using two. ]]\n\n\tFor those who don&#39;t speak C++, this reads as: If an earlier component is \ndifferent, then compare based on that, but if all earlier components are \nidentical, compare a later component.\n\n\tOr to put it another way, I was comparing individuals based on their \nfitness in all cases except where those were identical, when I was using \ntheir size as a tie-break and taking the smaller one.\n\n\tImagine my surprise when this killed progress stone dead!\n\n\tBut in retrospect it is understandable, because by pushing the smaller \nindividuals to the top of the pile, I was eliminating ones where a mutation \nhad added neutral components to the networks, and since an adaptive change \nmust sometimes require the accumulation of several neutral mutations, I was \nstopping the search dead in its tracks.\n\n\tThere are a few important notes to this:\n\n1) SLEAT in its current early stage produces _A_LOT_ of neutral addition \nmutations.\n\n2) my current scheme is calculating fitness based on an ability to pass a \nset of tests.  Thus it is constrained to a relatively small number of \nvalues (because you can only pass an integer number of tests) so more \ndecisions were hinging on size than you might suppose.\n\n3) crossover was broken at that stage, so pairs of neutral mutations were \nnot getting merged that way either, if they were, then I might have had a \nchance to see adaptions arising from pairs of neutrals, but anything \nrequiring three neutrals to get together would still have been suppressed \nbecause it would need the double neutral intermediate to survive long \nenough to pick up the third mutation\n\n\tAnyway, just an observation that might prove interesting...\n\n\tIan\n\nIn fifteen minutes, everybody will be in the future.\n\n\n\n\t\n\t\n\t\t\n___________________________________________________________ \nYahoo! Messenger - NEW crystal clear PC to PC calling worldwide with voicemail http://uk.messenger.yahoo.com\r\n\n"}}