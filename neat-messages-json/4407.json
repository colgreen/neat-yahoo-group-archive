{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":82117382,"authorName":"Jim O&#39;Flaherty","from":"Jim O&#39;Flaherty &lt;jim_oflaherty_jr@...&gt;","profile":"jim_oflaherty_jr","replyTo":"LIST","senderId":"02f-CF-3NJQU-JMSpeBY6pLA7sPzGwZVtFpYg-E3D87uHXN6RG06dh2_O__3uVyhe_DdSG7dJkBzkDX8jEIp3HiB02MxLYbUBiWMgTQx_w9log","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: rtNEAT: max_depth() in an endless loop","postDate":"1225739138","msgId":4407,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5MEY0QjgyLjYwMzA4MDZAeWFob28uY29tPg==","inReplyToHeader":"PGdlbmI1ZitxZ3BzQGVHcm91cHMuY29tPg==","referencesHeader":"PGdlbmI1ZitxZ3BzQGVHcm91cHMuY29tPg=="},"prevInTopic":4404,"nextInTopic":4408,"prevInTime":4406,"nextInTime":4408,"topicId":4396,"numMessagesInTopic":16,"msgSnippet":"Peter, That doesn t make sense to me. Cesar s comments indicate he has a similar implementation to mine. Basically, every node s value in a single instance of","rawEmail":"Return-Path: &lt;jim_oflaherty_jr@...&gt;\r\nX-Sender: jim_oflaherty_jr@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 16835 invoked from network); 3 Nov 2008 19:05:45 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m53.grp.scd.yahoo.com with QMQP; 3 Nov 2008 19:05:45 -0000\r\nX-Received: from unknown (HELO smtp107.prem.mail.sp1.yahoo.com) (98.136.44.62)\n  by mta17.grp.scd.yahoo.com with SMTP; 3 Nov 2008 19:05:45 -0000\r\nX-Received: (qmail 92688 invoked from network); 3 Nov 2008 19:05:42 -0000\r\nX-Received: from unknown (HELO ?192.168.1.2?) (jim_oflaherty_jr@24.175.76.77 with plain)\n  by smtp107.prem.mail.sp1.yahoo.com with SMTP; 3 Nov 2008 19:05:41 -0000\r\nX-YMail-OSG: Ch_rtOcVM1mCy3a3QH_2FqJ4ldQXmLxJ1M0Cn72DW0fsGFbgCfiFFsYiCIWcqOw65AQJfG8gEPJO040QSvRAnaPyYUdWzvEl5s474tLij_xopC.bv.L.MGMJn7ct2ZRoMtZLEOWdaD5OlP.jc0E3F0BRU.oZteox1FRz1ltfwi77eIPszP4ZkVhroD6_qp1oFT772NkxpSwvkC.AJG7eNt453iQHTcqDMYo19lWB_ovJx4SV9tKmTvAjcj6jMN0c2WB8Vi9ck6Fgq_re9oGmq5iY.2wmy_gsSWEfCw--\r\nX-Yahoo-Newman-Property: ymail-3\r\nMessage-ID: &lt;490F4B82.6030806@...&gt;\r\nDate: Mon, 03 Nov 2008 13:05:38 -0600\r\nUser-Agent: Thunderbird 2.0.0.17 (Windows/20080914)\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;genb5f+qgps@...&gt;\r\nIn-Reply-To: &lt;genb5f+qgps@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------020105020002000400050508&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jim O&#39;Flaherty &lt;jim_oflaherty_jr@...&gt;\r\nSubject: Re: [neat] Re: rtNEAT: max_depth() in an endless loop\r\nX-Yahoo-Group-Post: member; u=82117382; y=u7p2wWKCsEfWbpLt-JquxFqxAQemK4klAfYEeE3WqltuzQB-p_-a9S9P6w\r\nX-Yahoo-Profile: jim_oflaherty_jr\r\n\r\n\r\n--------------020105020002000400050508\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\n\r\nPeter,\n\nThat doesn&#39;t make sense to me. Cesar&#39;s comments indicate he has a \nsimilar implementation to mine. Basically, every node&#39;s value in a \nsingle instance of an ANN is calculated just once on an activation pass. \nWhen the node is calculated, each of the nodes attached to it as &quot;input&quot; \nare used (whether they have been activated in this pass, or hold a \nresidual value from the previous pass) to calculate it&#39;s current value. \nAnd assuming the ordering of the activations is lined up by dependency \nand they by node age, the network ought to activate deterministically \nmeaning that starting with an empty network (all node activation values \nare set to 0.0), providing the same input and making several activation \npasses ought to be able to return reliably repeatable results given the \nnode activation values are reset to 0.0 and precisely the same input is \nsubmitted for the same number of activation passes.\n\nI get that the network graph can have cycles, as in recurrent \nconnections. However, those have no relevance to activation order or \ncause any sort of &quot;loop&quot; in a straightforward ANN implementation. So, I \nam getting confused about where and how an &quot;endless loop&quot; could form. \nPerhaps they are talking about the network output never stabilizing to \nwithin some stable value ranges when activating it repeatedly with the \nsame input. That&#39;s to be expected in a network with enough recurrent \nconnections - non-uniformity in the output following activations with \nthe same input. Each additional recurrent connection increases the \n&quot;echos from the past&quot; causing a stable output cycle to become less and \nless probable.\n\nSaid another way, a single activation of an ANN, with or without \nrecurrent connections, will results in exactly the same number of node \nactivation calculations each time it is told to process input. There \nshould not be any variability to the number of node activations AT ALL. \nIf so, then some sort of different activation strategy is being \nemployed. And if so, what is it? And why?\n\n\nJim\n\n\npetar_chervenski wrote:\n&gt;\n&gt; It is about the loop in which you calculate the longest path from an\n&gt; input node to an output node. Not the activation loop in which you\n&gt; activate the network.\n&gt;\n&gt; Peter\n&gt;\n&gt; --- In neat@yahoogroups.com &lt;mailto:neat%40yahoogroups.com&gt;, Jim \n&gt; O&#39;Flaherty &lt;jim_oflaherty_jr@...&gt;\n&gt; wrote:\n&gt; &gt;\n&gt; &gt; Ken,\n&gt; &gt;\n&gt; &gt; I am confused how you could end up in an endless activation loop. If\n&gt; you\n&gt; &gt; are moving from the input nodes forward through the hidden nodes to\n&gt; the\n&gt; &gt; output nodes as a state calculation progression, there would be no\n&gt; need\n&gt; &gt; to worry about activation loops - you would only calculate the value\n&gt; of\n&gt; &gt; each node once in a single pass. The point of a recurrent connection\n&gt; is\n&gt; &gt; to carry state between full network activations. So, the value\n&gt; provided\n&gt; &gt; by a recurrent connection would not be used until the next\n&gt; activation\n&gt; &gt; pass (assuming all the nodes from the previous pass have not be\n&gt; &quot;zeroed\n&gt; &gt; out&quot;).\n&gt; &gt;\n&gt; &gt; How is it there is an endless loop?\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Jim\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Kenneth Stanley wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Yes I have heard about this problem coming up in the XOR\n&gt; experiment.\n&gt; &gt; &gt; Most neuroevolution experiments are not classification experiments\n&gt; &gt; &gt; (i.e. they don&#39;t have a &quot;final&quot; output), or they allow recurrent\n&gt; &gt; &gt; connections, and therefore do not require depth to be computed.\n&gt; &gt; &gt; Therefore, this problem will not come up in most expeirments.\n&gt; &gt; &gt;\n&gt; &gt; &gt; However, XOR is a benchmark classification problem that is only\n&gt; meant\n&gt; &gt; &gt; to be attempted by feedforward networks so it needs to have depth\n&gt; &gt; &gt; computed. It appears that my attempts to keep the network\n&gt; feedforward\n&gt; &gt; &gt; in all cases is not perfect, so sometimes when a loop arises, it\n&gt; sends\n&gt; &gt; &gt; the depth computation into an infinite loop. I have not had time\n&gt; to\n&gt; &gt; &gt; think about the most elegant solution to this problem: Maybe it\n&gt; should\n&gt; &gt; &gt; be a stronger check on recurrence, perhaps entirely different from\n&gt; how\n&gt; &gt; &gt; it works now. Or perhaps it should be a fixed abort-iteration for\n&gt; the\n&gt; &gt; &gt; depth routine.\n&gt; &gt; &gt;\n&gt; &gt; &gt; If someone does feel they have an elegant bit of code to address\n&gt; the\n&gt; &gt; &gt; issue, I will be happy to take a look.\n&gt; &gt; &gt;\n&gt; &gt; &gt; In any case, it should not cause serious problems in general. I\n&gt; &gt; &gt; apologize for any inconvenience.\n&gt; &gt; &gt;\n&gt; &gt; &gt; ken\n&gt; &gt; &gt;\n&gt; &gt; &gt; --- In neat@yahoogroups.com &lt;mailto:neat%40yahoogroups.com&gt; \n&gt; &lt;mailto:neat%40yahoogroups.com&gt;,\n&gt; &gt; &gt; &quot;petar_chervenski&quot; &lt;petar_chervenski@&gt;\n&gt; &gt; &gt; wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Hi Cesar,\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; I know of this problem. It is obvious that depth cannot be\n&gt; determined\n&gt; &gt; &gt; &gt; in a recurrent network, but in general it depends, what is your\n&gt; way to\n&gt; &gt; &gt; &gt; handle the situation. Try improving the add_link() code so that\n&gt; the\n&gt; &gt; &gt; &gt; right nodes are picked up when trying to add a forward or a\n&gt; recurrent\n&gt; &gt; &gt; &gt; connection. This is a good solution but in general the problem\n&gt; with\n&gt; &gt; &gt; &gt; looped networks cannot be avoided. Suppose you have 3 hidden\n&gt; nodes, A,\n&gt; &gt; &gt; &gt; B, and C. If you link these like A-&gt;B, B-&gt;C, C-&gt;A, it is a loop\n&gt; in the\n&gt; &gt; &gt; &gt; network, even though all connections are meant to be forward.\n&gt; &gt; &gt; &gt; The best solution in my opinion is to put a limit on the\n&gt; possible\n&gt; &gt; &gt; &gt; depth, say 32, if the depth exceeds 32, quit the recursion and\n&gt; &gt; &gt; &gt; activate the network 32 times. It slows things down but at least\n&gt; it\n&gt; &gt; &gt; &gt; will not hurt evolution as if you penalize looped networks.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Peter\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; --- In neat@yahoogroups.com &lt;mailto:neat%40yahoogroups.com&gt; \n&gt; &lt;mailto:neat%40yahoogroups.com&gt;,\n&gt; &quot;Cesar\n&gt; &gt; &gt; G. Miguel&quot; &lt;cesar.gomes@&gt;\n&gt; &gt; &gt; &gt; wrote:\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; Hi all,\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; I&#39;m not sure if someone else has notice this &quot;bug&quot; in rtNEAT,\n&gt; but\n&gt; &gt; &gt; &gt; the\n&gt; &gt; &gt; &gt; &gt; max_depth() method in network.cpp has the potential to be\n&gt; forever in\n&gt; &gt; &gt; &gt; &gt; loop if a recurrent link is added in a feedforward topology,\n&gt; e.g.,\n&gt; &gt; &gt; &gt; the\n&gt; &gt; &gt; &gt; &gt; XOR experiment (and that can happen even when the\n&gt; recur_only_prob\n&gt; &gt; &gt; &gt; &gt; parameter is set to zero). A real example is attached.\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; It seems to happen in 1 out of 10 runs. The max_depth() method\n&gt; calls\n&gt; &gt; &gt; &gt; &gt; depth() in nnode.cpp, which should return the max depth of\n&gt; that\n&gt; &gt; &gt; &gt; node.\n&gt; &gt; &gt; &gt; &gt; But it can get trapped in a loop if any recurrent link is\n&gt; present\n&gt; &gt; &gt; &gt; (as\n&gt; &gt; &gt; &gt; &gt; it is commented out in the source: DEPTH NOT DETERMINED FOR\n&gt; NETWORK\n&gt; &gt; &gt; &gt; &gt; WITH LOOP).\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; For those cases I have to force a return if an endless loop is\n&gt; &gt; &gt; &gt; &gt; detected and then set the chromosome&#39;s fitness to zero in\n&gt; order to\n&gt; &gt; &gt; &gt; &gt; continue.\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; Has anyone dealed with that before?\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; []&#39;s\n&gt; &gt; &gt; &gt; &gt; Cesar\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n&gt;  \n\r\n--------------020105020002000400050508\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta content=&quot;text/html;charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;&gt;\n&lt;/head&gt;\n&lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\nPeter,&lt;br&gt;\n&lt;br&gt;\nThat doesn&#39;t make sense to me. Cesar&#39;s comments indicate he has a\nsimilar implementation to mine. Basically, every node&#39;s value in a\nsingle instance of an ANN is calculated just once on an activation\npass. When the node is calculated, each of the nodes attached to it as\n&quot;input&quot; are used (whether they have been activated in this pass, or\nhold a residual value from the previous pass) to calculate it&#39;s current\nvalue. And assuming the ordering of the activations is lined up by\ndependency and they by node age, the network ought to activate\ndeterministically meaning that starting with an empty network (all node\nactivation values are set to 0.0), providing the same input and making\nseveral activation passes ought to be able to return reliably\nrepeatable results given the node activation values are reset to 0.0\nand precisely the same input is submitted for the same number of\nactivation passes.&lt;br&gt;\n&lt;br&gt;\nI get that the network graph can have cycles, as in recurrent\nconnections. However, those have no relevance to activation order or\ncause any sort of &quot;loop&quot; in a straightforward ANN implementation. So, I\nam getting confused about where and how an &quot;endless loop&quot; could form.\nPerhaps they are talking about the network output never stabilizing to\nwithin some stable value ranges when activating it repeatedly with the\nsame input. That&#39;s to be expected in a network with enough recurrent\nconnections - non-uniformity in the output following activations with\nthe same input. Each additional recurrent connection increases the\n&quot;echos from the past&quot; causing a stable output cycle to become less and\nless probable.&lt;br&gt;\n&lt;br&gt;\nSaid another way, a single activation of an ANN, with or without\nrecurrent connections, will results in exactly the same number of node\nactivation calculations each time it is told to process input. There\nshould not be any variability to the number of node activations AT ALL.\nIf so, then some sort of different activation strategy is being\nemployed. And if so, what is it? And why?&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nJim&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\npetar_chervenski wrote:\n&lt;blockquote cite=&quot;mid:genb5f+qgps@...&quot; type=&quot;cite&quot;&gt;\n  &lt;div id=&quot;ygrp-text&quot;&gt;\n  &lt;p&gt;It is about the loop in which you calculate the longest path from\nan &lt;br&gt;\ninput node to an output node. Not the activation loop in which you &lt;br&gt;\nactivate the network. &lt;br&gt;\n  &lt;br&gt;\nPeter&lt;br&gt;\n  &lt;br&gt;\n--- In &lt;a moz-do-not-send=&quot;true&quot; href=&quot;mailto:neat%40yahoogroups.com&quot;&gt;neat@yahoogroups.&lt;wbr&gt;com&lt;/a&gt;,\nJim O&#39;Flaherty &lt;jim_oflaherty_&lt;wbr&gt;jr@...&gt; &lt;br&gt;\nwrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Ken,&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; I am confused how you could end up in an endless activation loop.\nIf &lt;br&gt;\nyou &lt;br&gt;\n&gt; are moving from the input nodes forward through the hidden nodes\nto &lt;br&gt;\nthe &lt;br&gt;\n&gt; output nodes as a state calculation progression, there would be no\n  &lt;br&gt;\nneed &lt;br&gt;\n&gt; to worry about activation loops - you would only calculate the\nvalue &lt;br&gt;\nof &lt;br&gt;\n&gt; each node once in a single pass. The point of a recurrent\nconnection &lt;br&gt;\nis &lt;br&gt;\n&gt; to carry state between full network activations. So, the value &lt;br&gt;\nprovided &lt;br&gt;\n&gt; by a recurrent connection would not be used until the next &lt;br&gt;\nactivation &lt;br&gt;\n&gt; pass (assuming all the nodes from the previous pass have not be &lt;br&gt;\n&quot;zeroed &lt;br&gt;\n&gt; out&quot;).&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; How is it there is an endless loop?&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Jim&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Kenneth Stanley wrote:&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; Yes I have heard about this problem coming up in the XOR &lt;br&gt;\nexperiment.&lt;br&gt;\n&gt; &gt; Most neuroevolution experiments are not classification\nexperiments&lt;br&gt;\n&gt; &gt; (i.e. they don&#39;t have a &quot;final&quot; output), or they allow\nrecurrent&lt;br&gt;\n&gt; &gt; connections, and therefore do not require depth to be\ncomputed.&lt;br&gt;\n&gt; &gt; Therefore, this problem will not come up in most expeirments.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; However, XOR is a benchmark classification problem that is\nonly &lt;br&gt;\nmeant&lt;br&gt;\n&gt; &gt; to be attempted by feedforward networks so it needs to have\ndepth&lt;br&gt;\n&gt; &gt; computed. It appears that my attempts to keep the network &lt;br&gt;\nfeedforward&lt;br&gt;\n&gt; &gt; in all cases is not perfect, so sometimes when a loop arises,\nit &lt;br&gt;\nsends&lt;br&gt;\n&gt; &gt; the depth computation into an infinite loop. I have not had\ntime &lt;br&gt;\nto&lt;br&gt;\n&gt; &gt; think about the most elegant solution to this problem: Maybe\nit &lt;br&gt;\nshould&lt;br&gt;\n&gt; &gt; be a stronger check on recurrence, perhaps entirely different\nfrom &lt;br&gt;\nhow&lt;br&gt;\n&gt; &gt; it works now. Or perhaps it should be a fixed abort-iteration\nfor &lt;br&gt;\nthe&lt;br&gt;\n&gt; &gt; depth routine.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; If someone does feel they have an elegant bit of code to\naddress &lt;br&gt;\nthe&lt;br&gt;\n&gt; &gt; issue, I will be happy to take a look.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; In any case, it should not cause serious problems in general.\nI&lt;br&gt;\n&gt; &gt; apologize for any inconvenience.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; ken&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; --- In &lt;a moz-do-not-send=&quot;true&quot;\n href=&quot;mailto:neat%40yahoogroups.com&quot;&gt;neat@yahoogroups.&lt;wbr&gt;com&lt;/a&gt;\n&lt;&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;mailto:neat%&quot;&gt;mailto:neat%&lt;/a&gt;&lt;wbr&gt;40yahoogroups.&lt;wbr&gt;com&gt;, &lt;br&gt;\n&gt; &gt; &quot;petar_chervenski&quot; &lt;petar_chervenski@&lt;wbr&gt;&gt;&lt;br&gt;\n&gt; &gt; wrote:&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; Hi Cesar,&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; I know of this problem. It is obvious that depth cannot\nbe &lt;br&gt;\ndetermined&lt;br&gt;\n&gt; &gt; &gt; in a recurrent network, but in general it depends, what\nis your &lt;br&gt;\nway to&lt;br&gt;\n&gt; &gt; &gt; handle the situation. Try improving the add_link() code\nso that &lt;br&gt;\nthe&lt;br&gt;\n&gt; &gt; &gt; right nodes are picked up when trying to add a forward\nor a &lt;br&gt;\nrecurrent&lt;br&gt;\n&gt; &gt; &gt; connection. This is a good solution but in general the\nproblem &lt;br&gt;\nwith&lt;br&gt;\n&gt; &gt; &gt; looped networks cannot be avoided. Suppose you have 3\nhidden &lt;br&gt;\nnodes, A,&lt;br&gt;\n&gt; &gt; &gt; B, and C. If you link these like A-&gt;B, B-&gt;C,\nC-&gt;A, it is a loop &lt;br&gt;\nin the&lt;br&gt;\n&gt; &gt; &gt; network, even though all connections are meant to be\nforward.&lt;br&gt;\n&gt; &gt; &gt; The best solution in my opinion is to put a limit on the\n  &lt;br&gt;\npossible&lt;br&gt;\n&gt; &gt; &gt; depth, say 32, if the depth exceeds 32, quit the\nrecursion and&lt;br&gt;\n&gt; &gt; &gt; activate the network 32 times. It slows things down but\nat least &lt;br&gt;\nit&lt;br&gt;\n&gt; &gt; &gt; will not hurt evolution as if you penalize looped\nnetworks.&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; Peter&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; --- In &lt;a moz-do-not-send=&quot;true&quot;\n href=&quot;mailto:neat%40yahoogroups.com&quot;&gt;neat@yahoogroups.&lt;wbr&gt;com&lt;/a&gt;\n&lt;&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;mailto:neat%&quot;&gt;mailto:neat%&lt;/a&gt;&lt;wbr&gt;40yahoogroups.&lt;wbr&gt;com&gt;, &lt;br&gt;\n&quot;Cesar &lt;br&gt;\n&gt; &gt; G. Miguel&quot; &lt;cesar.gomes@&lt;wbr&gt;&gt;&lt;br&gt;\n&gt; &gt; &gt; wrote:&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; Hi all,&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; I&#39;m not sure if someone else has notice this &quot;bug&quot;\nin rtNEAT, &lt;br&gt;\nbut&lt;br&gt;\n&gt; &gt; &gt; the&lt;br&gt;\n&gt; &gt; &gt; &gt; max_depth() method in network.cpp has the potential\nto be &lt;br&gt;\nforever in&lt;br&gt;\n&gt; &gt; &gt; &gt; loop if a recurrent link is added in a feedforward\ntopology, &lt;br&gt;\ne.g.,&lt;br&gt;\n&gt; &gt; &gt; the&lt;br&gt;\n&gt; &gt; &gt; &gt; XOR experiment (and that can happen even when the &lt;br&gt;\nrecur_only_prob&lt;br&gt;\n&gt; &gt; &gt; &gt; parameter is set to zero). A real example is\nattached.&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; It seems to happen in 1 out of 10 runs. The\nmax_depth() method &lt;br&gt;\ncalls&lt;br&gt;\n&gt; &gt; &gt; &gt; depth() in nnode.cpp, which should return the max\ndepth of &lt;br&gt;\nthat&lt;br&gt;\n&gt; &gt; &gt; node.&lt;br&gt;\n&gt; &gt; &gt; &gt; But it can get trapped in a loop if any recurrent\nlink is &lt;br&gt;\npresent&lt;br&gt;\n&gt; &gt; &gt; (as&lt;br&gt;\n&gt; &gt; &gt; &gt; it is commented out in the source: DEPTH NOT\nDETERMINED FOR &lt;br&gt;\nNETWORK&lt;br&gt;\n&gt; &gt; &gt; &gt; WITH LOOP).&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; For those cases I have to force a return if an\nendless loop is&lt;br&gt;\n&gt; &gt; &gt; &gt; detected and then set the chromosome&#39;s fitness to\nzero in &lt;br&gt;\norder to&lt;br&gt;\n&gt; &gt; &gt; &gt; continue.&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; Has anyone dealed with that before?&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt; &gt; []&#39;s&lt;br&gt;\n&gt; &gt; &gt; &gt; Cesar&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt;&lt;br&gt;\n  &lt;br&gt;\n  &lt;/p&gt;\n  &lt;/div&gt;\n&lt;!--End group email --&gt; &lt;/blockquote&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------020105020002000400050508--\r\n\n"}}