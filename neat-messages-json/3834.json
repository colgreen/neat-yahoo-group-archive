{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302211244,"authorName":"Tom McCallum","from":"Tom McCallum &lt;termcc@...&gt;","profile":"tmccallum80","replyTo":"LIST","senderId":"R_06uLpuiFO3TYttK8pERyFZHcToJisuSCwiF6TYce_i0s5JvW4G04STjjYr6Rfhc46bEt6k0dxUFhfEwISfNwpdJ8GdCFDPaCPh","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: rtNeat and timeseries","postDate":"1204621728","msgId":3834,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PG9wLnQ3aGljeW91Y3NtZzA3QGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4=","inReplyToHeader":"PGZxaTBobytqbnBzQGVHcm91cHMuY29tPg==","referencesHeader":"PGZxaTBobytqbnBzQGVHcm91cHMuY29tPg=="},"prevInTopic":3833,"nextInTopic":3836,"prevInTime":3833,"nextInTime":3835,"topicId":2997,"numMessagesInTopic":9,"msgSnippet":"No I gave up and just built a static network but I would be interested if anyone has got it to evolve effective timeseries prediction. Tom ... -- PS Note this","rawEmail":"Return-Path: &lt;termcc@...&gt;\r\nX-Sender: termcc@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 91800 invoked from network); 4 Mar 2008 09:08:54 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m54.grp.scd.yahoo.com with QMQP; 4 Mar 2008 09:08:54 -0000\r\nX-Received: from unknown (HELO wx-out-0506.google.com) (66.249.82.225)\n  by mta16.grp.scd.yahoo.com with SMTP; 4 Mar 2008 09:08:53 -0000\r\nX-Received: by wx-out-0506.google.com with SMTP id i30so756826wxd.8\n        for &lt;neat@yahoogroups.com&gt;; Tue, 04 Mar 2008 01:08:53 -0800 (PST)\r\nX-Received: by 10.70.53.3 with SMTP id b3mr1256256wxa.82.1204621733118;\n        Tue, 04 Mar 2008 01:08:53 -0800 (PST)\r\nReturn-Path: &lt;termcc@...&gt;\r\nX-Received: from localhost.localdomain ( [86.153.165.62])\n        by mx.google.com with ESMTPS id h10sm1899328wxd.32.2008.03.04.01.08.51\n        (version=SSLv3 cipher=OTHER);\n        Tue, 04 Mar 2008 01:08:52 -0800 (PST)\r\nTo: neat@yahoogroups.com\r\nOrganization: My GMail Account\r\nContent-Type: text/plain; format=flowed; delsp=yes; charset=utf-8\r\nMIME-Version: 1.0\r\nReferences: &lt;fqi0ho+jnps@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Tue, 04 Mar 2008 09:08:48 -0000\r\nMessage-ID: &lt;op.t7hicyoucsmg07@...&gt;\r\nIn-Reply-To: &lt;fqi0ho+jnps@...&gt;\r\nUser-Agent: Opera Mail/9.24 (Linux)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Tom McCallum &lt;termcc@...&gt;\r\nSubject: Re: [neat] Re: rtNeat and timeseries\r\nX-Yahoo-Group-Post: member; u=302211244; y=pzwRouDz3iUKKJUWVFZaolvY-KtNJ6Bic72VPN1I7QN6rcJLoro\r\nX-Yahoo-Profile: tmccallum80\r\n\r\nNo I gave up and just built a static network but I would be interested if  \nanyone has got it to evolve effective timeseries prediction.\n\nTom\n\nOn Mon, 03 Mar 2008 23:10:48 -0000, Tyson &lt;tvmaly@...&gt; wrote:\n\n&gt; Tom, did you every solve the issue with the time series and rtNEAT?\n&gt;\n&gt;  Best Regards\n&gt;\n&gt;            Ty\n&gt;\n&gt; --- In neat@yahoogroups.com, Tom McCallum &lt;termcc@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; Hi everyone,\n&gt;&gt;\n&gt;&gt; I have been trying to evolve networks using rtNEAT which will learn a\n&gt;&gt; given target given the inputs, the target being a real number and the\n&gt;&gt; inputs are timeseries.  Now I know that there exists a neural net\n&gt; which\n&gt;&gt; can do this to a high degree of accuracy ( &gt; 95% ) but cannot\n&gt; reproduce\n&gt;&gt; the results using rtNeat ( the C++ version) and wondered if I was\n&gt; doing\n&gt;&gt; something silly or if it simply cannot evolve a net to learn it.\n&gt;&gt;\n&gt;&gt; Here is more information on my scenario:\n&gt;&gt;\n&gt;&gt; Inputs : {i1,i2,i3,...,iN}, all of which are real numbers\n&gt;&gt; Target Output : T, which is a real number value between 0 and 1\n&gt;&gt;\n&gt;&gt; Here is the start genome:\n&gt;&gt;\n&gt;&gt; genomestart 1\n&gt;&gt; trait 1 0.1 0 0 0 0 0 0 0\n&gt;&gt; trait 2 0.2 0 0 0 0 0 0 0\n&gt;&gt; trait 3 0.3 0 0 0 0 0 0 0\n&gt;&gt; node 1 0 1 1\n&gt;&gt; node 2 0 1 1\n&gt;&gt; node 3 0 0 2\n&gt;&gt; gene 1 1 3 0.0 0 1 0 1\n&gt;&gt; gene 2 2 3 0.0 0 2 0 1\n&gt;&gt; gene 3 3 3 0.0 0 2 0 1\n&gt;&gt; genomeend 1\n&gt;&gt;\n&gt;&gt; and here are my parameters:\n&gt;&gt;\n&gt;&gt; trait_param_mut_prob 0.5\n&gt;&gt; trait_mutation_power 1.0\n&gt;&gt; linktrait_mut_sig 1.0\n&gt;&gt; nodetrait_mut_sig 0.5\n&gt;&gt; weigh_mut_power 2.5\n&gt;&gt; recur_prob 0.00\n&gt;&gt; disjoint_coeff 1.0\n&gt;&gt; excess_coeff 1.0\n&gt;&gt; mutdiff_coeff 0.4\n&gt;&gt; compat_thresh 3.0\n&gt;&gt; age_significance 1.0\n&gt;&gt; survival_thresh 0.20\n&gt;&gt; mutate_only_prob 0.25\n&gt;&gt; mutate_random_trait_prob 0.1\n&gt;&gt; mutate_link_trait_prob 0.1\n&gt;&gt; mutate_node_trait_prob 0.1\n&gt;&gt; mutate_link_weights_prob 0.9\n&gt;&gt; mutate_toggle_enable_prob 0.00\n&gt;&gt; mutate_gene_reenable_prob 0.000\n&gt;&gt; mutate_add_node_prob 0.03\n&gt;&gt; mutate_add_link_prob 0.05\n&gt;&gt; interspecies_mate_rate 0.001\n&gt;&gt; mate_multipoint_prob 0.6\n&gt;&gt; mate_multipoint_avg_prob 0.4\n&gt;&gt; mate_singlepoint_prob 0.0\n&gt;&gt; mate_only_prob 0.2\n&gt;&gt; recur_only_prob 0.0\n&gt;&gt; pop_size 100\n&gt;&gt; dropoff_age 15\n&gt;&gt; newlink_tries 20\n&gt;&gt; print_every 30\n&gt;&gt; babies_stolen 0\n&gt;&gt; num_runs 15\n&gt;&gt;\n&gt;&gt; The fitness function is simply to minimise the difference between the\n&gt;&gt; output and target values.  A winner is declared when a network has at\n&gt;&gt; least 80% accuracy.\n&gt;&gt;\n&gt;&gt; Unfortunately despite running numerous attempts with varying amounts\n&gt; of\n&gt;&gt; runs, population sizes, and other parameters it still struggles to get\n&gt;&gt; consistently above 60%.   I know the structure required is a recurrent\n&gt;&gt; network with one hidden layer and it seems to get that far and the\n&gt; best it\n&gt;&gt; can achieve is 76% so far.  Could it be that the best networks are\n&gt; being\n&gt;&gt; destroyed through too higher mutation / crossover?  Is it that I\n&gt; need a\n&gt;&gt; diferent fitness function, if so what kind should i be using (i.e.\n&gt; should\n&gt;&gt; I be separating the outputs into wider ranges rather than approximate\n&gt;&gt; values) ?\n&gt;&gt;\n&gt;&gt; Can anyone make any suggestions as to how to make it find better\n&gt; networks?\n&gt;&gt;\n&gt;&gt; Many thanks in advance for any advice,\n&gt;&gt;\n&gt;&gt; Tom\n&gt;&gt;\n&gt;\n&gt;\n\n\n\n-- \nPS Note this is the new email address - delete term@... as it  \nwon&#39;t work soon!\n\n"}}