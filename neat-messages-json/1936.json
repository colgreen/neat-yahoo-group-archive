{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"OzvsKHkWYfTmhBekvRW6VirsuaYcoKas_l9sqGoSWP0smltiezftS7NoW9AAEtuDVXOo54Ta1CUiVOy-YbCGbBUQ9f2IJ041GA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] 6-Multiplexer Problem Domain - Success!","postDate":"1113776154","msgId":1936,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyNjJFMDFBLjYwNDA4MDZAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PDYuMi4wLjE0LjAuMjAwNTA0MDcxNDIzMDkuMDNjM2U3NDBAcG9wLm1haWwueWFob28uY28udWs+","referencesHeader":"PDQyNTA2RTE4LjgwOTAyMDRAZHNsLnBpcGV4LmNvbT4gPDYuMi4wLjE0LjAuMjAwNTA0MDUxMTQyNTMuMDNjOWYzYzhAcG9wLm1haWwueWFob28uY28udWs+IDw0MjU0NDRCQi43MDAwMEBkc2wucGlwZXguY29tPiA8Ni4yLjAuMTQuMC4yMDA1MDQwNzE0MjMwOS4wM2MzZTc0MEBwb3AubWFpbC55YWhvby5jby51az4="},"prevInTopic":1935,"nextInTopic":0,"prevInTime":1935,"nextInTime":1937,"topicId":1928,"numMessagesInTopic":7,"msgSnippet":"... The type of approach you suggest did cross my mind momentarily, but I didn t give them any thought because past experience suggests taking shortcuts gives","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 12901 invoked from network); 17 Apr 2005 22:17:57 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m25.grp.scd.yahoo.com with QMQP; 17 Apr 2005 22:17:57 -0000\r\nReceived: from unknown (HELO astro.systems.pipex.net) (62.241.163.6)\n  by mta3.grp.scd.yahoo.com with SMTP; 17 Apr 2005 22:17:56 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby astro.systems.pipex.net (Postfix) with ESMTP id 0D6D4E0000C8\n\tfor &lt;neat@yahoogroups.com&gt;; Sun, 17 Apr 2005 23:17:55 +0100 (BST)\r\nMessage-ID: &lt;4262E01A.6040806@...&gt;\r\nDate: Sun, 17 Apr 2005 23:15:54 +0100\r\nUser-Agent: Mozilla Thunderbird 0.9 (Windows/20041103)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;42506E18.8090204@...&gt; &lt;6.2.0.14.0.20050405114253.03c9f3c8@...&gt; &lt;425444BB.70000@...&gt; &lt;6.2.0.14.0.20050407142309.03c3e740@...&gt;\r\nIn-Reply-To: &lt;6.2.0.14.0.20050407142309.03c3e740@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] 6-Multiplexer Problem Domain - Success!\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;&gt;[...]\n&gt;&gt;    \n&gt;&gt;\n&gt;&gt;&gt;What is your fitness function like?\n&gt;&gt;&gt;      \n&gt;&gt;&gt;\n&gt;&gt;[...]\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;How about if you tested as follows:\n&gt;\n&gt;for each possible address\n&gt;         set corresponding input true\n&gt;         test\n&gt;         set corresponding input false\n&gt;         test\n&gt;next\n&gt;\n&gt;e.g. you are exploiting the fact that for an address of N, only input line \n&gt;n actually matters, and you can set the others to random values or start \n&gt;with a small set of random patterns and only check exhaustively when you \n&gt;get really fit networks...\n&gt;\n&gt;Or you could even have a fitness function that rewards a network for its \n&gt;output being _not_ affected by changes to the non-addressed inputs.\n&gt;  \n&gt;\nThe type of approach you suggest did cross my mind momentarily, but I \ndidn&#39;t give them any thought because past experience suggests taking \nshortcuts gives poor results. For 3 and 6 multiplexer it&#39;s a no brainer, \ntesting the 8 & 64 test cases is fast and a solution can be found in \njust a few seconds for 3-multiplexer, and a few minutes for 6-mplexer.\n\nFor 11 and greater the exhaustive testing becomes costly so I decided to \ntry out a shortcut. For each address I test 4 test cases:\n\n[Addressed Line, Other lines]\n-----------------------------\n[0 ,0]\n[0, 1]\n[1, 0]\n[1, 1]\n\nAny network that passes these tests 100% is tested exhaustively to get a \ntrue result.  A solution to the above fitness function is found rapidly \n(this is with 11-mplexer) but the network then performs really poorly on \nthe exhaustive test, and in fact searching doesn;t progress anything \nlike as well as when starting from a randomly initialised population.\n\nSo it loks like my fears are confirmed - that the solutions found have \ntaken functional shortcusts to get the correct answer, so that when we \nswitch to the exhaustive test the networks cannot seperate out the \nsignals from the different data lines. No doubt neurons are being \nre-used for several data lines, and this is a poor starting point in the \nsearch space for finding a solution to the exhaustive search. In fact I \nsuspect it&#39;s probably one of the worst places in the search space to \nstart from!\n\nSo your final comment about rewarding outputs that are not affected by \nnon-addressed inputs is the next logical step. I suppose you could set \neach input high in turn (others low) and then each input low (with \nothers high), for each addressed line. This gives 8*(8+8) = 128 (+2 more \nfor all signals high/low) test cases for 11-mplexer instead of  4*8=32 \nfor the above test case and 2048 for the exhaustive approach.\n\n2048/128 = 16 times faster, so worth trying I guess, If it works then \nthe 20-mplexer problem comes within reach.\n\n\n\n11-mplexer is solved BTW, although it takes some time - between 12-24hrs \nif memory serves. Although I&#39;ve since fixed a bug that caused pruning to \noccur more often than it should, so I need to revisit that experiment.\n\nIn other news... Co-evolution support is up and running, although I \ndon&#39;t have support for multiple competing populations yet as this \npresents a problem for the GUI interface! I am experimenting with co-ev \ntic-tac-toe right now with a single population. There are no really \nstrong results from this yet but the solutions found so far seem a \nlittle better than those from my previous TTT experiments.\n\nColin.\n\n\n\n\n"}}