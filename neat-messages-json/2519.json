{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":82117382,"authorName":"Jim O&#39;Flaherty, Jr.","from":"&quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;","profile":"jim_oflaherty_jr","replyTo":"LIST","senderId":"Uo5isnYVsysm5Mo3ex2y_1-_KBn-peMce42oqBWPMQnTRWg0LKl3SPQJugCUUoKQJU2UvhdU8NQdO4JwCN1pxF3dA61lxxhAIagts2svWUCzZA3eCETfVqQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Structure sharing","postDate":"1139238415","msgId":2519,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDYwMjA2MTUwNjU1LjIxMjkwLnFtYWlsQHdlYjUyODA4Lm1haWwueWFob28uY29tPg==","inReplyToHeader":"PGJhOTE5ZDBlMDYwMjA2MDMzM24zMWU0N2M5N3E4OGEzNWUxODU3MTI3ZWQzQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":2515,"nextInTopic":2524,"prevInTime":2518,"nextInTime":2520,"topicId":2515,"numMessagesInTopic":4,"msgSnippet":"Sandor, I created Semiann, an ANN in Java.  And it does exactly what you are thinking.  It is FOSS/GPLed.  You can find it here: ","rawEmail":"Return-Path: &lt;jim_oflaherty_jr@...&gt;\r\nX-Sender: jim_oflaherty_jr@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 58151 invoked from network); 6 Feb 2006 15:07:09 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m31.grp.scd.yahoo.com with QMQP; 6 Feb 2006 15:07:09 -0000\r\nReceived: from unknown (HELO web52808.mail.yahoo.com) (206.190.48.251)\n  by mta8.grp.scd.yahoo.com with SMTP; 6 Feb 2006 15:07:07 -0000\r\nReceived: (qmail 21292 invoked by uid 60001); 6 Feb 2006 15:06:55 -0000\r\nMessage-ID: &lt;20060206150655.21290.qmail@...&gt;\r\nDate: Mon, 6 Feb 2006 07:06:55 -0800 (PST)\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;ba919d0e0602060333n31e47c97q88a35e1857127ed3@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-922679239-1139238415=:15034&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: &quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;\r\nReply-To: &quot;Jim O&#39;Flaherty, Jr.&quot; &lt;jim_oflaherty_jr@...&gt;\r\nSubject: Re: [neat] Structure sharing\r\nX-Yahoo-Group-Post: member; u=82117382; y=Uh3esDFkGJJQYRp1DSQlLGB7LK0FQzUAVIRlf6PCGB62gDyOUgn15QNsog\r\nX-Yahoo-Profile: jim_oflaherty_jr\r\n\r\n\r\n--0-922679239-1139238415=:15034\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\nSandor,\n\nI created Semiann, an ANN in Java.  And it does exactly what you are thinking.  It is FOSS/GPLed.  You can find it here:\nhttp://sourceforge.net/projects/semiann\n\nBTW, typically the real burn is not in the genotype manipulation/phenotype creation part of a generation.  The real burn on the CPU is during the fitness evaluation phase (like 100 to 1).  So, engaging in optimizations where you are reducing expense in time around the genotype manipulation/phenotype creation is time not very effectively spent.  If you really want to reduce your total time, focus on making sure you are doing the minimum number of fitness evaluations per generation as is reasonable for you to maintain progress.\n\nThat said, if you read the detail docs within Semiann, you can see how I created an infrastructure to optimize the generated networks.  And you can see that I have designed it so that the next version includes dynamic code generation/compilation so as to maximize performance by unrolling loops and reording independent operations and caching precalculated values optimally to minimize CPU register/cache flushes.\n\nIf you get a chance to review it, please give me feedback if you have any issues or suggestions.\n\n\nJim\n\n\n----- Original Message ----\nFrom: Sandor Murakozi &lt;smurakozi@...&gt;\nTo: neat &lt;neat@yahoogroups.com&gt;\nSent: Monday, February 06, 2006 5:33:00 AM\nSubject: [neat] Structure sharing\n\n   Hi,\n\nI was playing with the idea of a kind of structure sharing between networks and I&#39;d like to hear your opinion about it.\nProblem:\nalgorithms related to the structure of networks are usually quite expensive ( e.g. determining recurrency, comparing structure, visiting nodes in a specific order, ...). Therefore most people try to avoid them whenever possible (using heuristics, or simply ignoring it).\n\nMy idea is to separate the structure of a network (nodes + connections) from all other info (connection weights, values...). Networks with the same structure would actually use the same &quot;structure&quot; object. Of course, it would make creation /modification of networks a bit more complex, but afterwards it could save a lot of time, just some ideas: \n\nWe would need to perform the expensive operations much less times. If we have several networks with the same structure we need to find e.g. recurrent connections only once.\n\nMost likely results of these operations could be stored  e.g. we could cache indices defining an order of nodes for network evaluation. I know some frameworks already do something similar, but it could be a more general pattern. \n\nDuring crossover if parents have the same structure (it would be trivial to determine) then just get the structure of them and perform crossover only on other attributes.  \n\nWhen we classify networks to species we could use much more info about structural similarities. If I got it correctly currently it is limited, because it takes too much time. With structure sharing we could reduce this time significantly. \n\nI&#39;m sure there are a lot of other things that could benefit from this feature.\n\nI know that in most of the cases the evaluation of network fitness takes much more time then these structural operations, but if evaluation itself is fast, then we could save significant time and/or use structural operations more frequently. \n\nWhat do you think about it?\n\nCheers,\ndon\n            \n\n        SPONSORED LINKS   \n                                                    Artificial intelligence                                       Computer science                                       Artificial intelligence software                                                                     Computer science degree                                       Online computer science degree                                                  \n         YAHOO! GROUPS LINKS \n \n     Visit your group &quot;neat&quot; on the web.\n     To unsubscribe from this group, send an email to:\n neat-unsubscribe@yahoogroups.com\n     Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service.  \n     \n \n     \n\n\r\n--0-922679239-1139238415=:15034\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;!-- DIV {margin:0px} --&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=&quot;font-family:times new roman, new york, times, serif;font-size:12pt&quot;&gt;&lt;div style=&quot;font-family: times new roman,new york,times,serif; font-size: 12pt;&quot;&gt;&lt;div&gt;Sandor,&lt;br&gt;&lt;br&gt;I created Semiann, an ANN in Java.&nbsp; And it does exactly what you are thinking.&nbsp; It is FOSS/GPLed.&nbsp; You can find it here:&lt;br&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://sourceforge.net/projects/semiann&quot;&gt;http://sourceforge.net/projects/semiann&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;BTW, typically the real burn is not in the genotype manipulation/phenotype creation part of a generation.&nbsp; The real burn on the CPU is during the fitness evaluation phase (like 100 to 1).&nbsp; So, engaging in optimizations where you are reducing expense in time around the genotype manipulation/phenotype creation is time not very effectively spent.&nbsp; If you really want to reduce your total time, focus on making sure you are doing the minimum\n number of fitness evaluations per generation as is reasonable for you to maintain progress.&lt;br&gt;&lt;br&gt;That said, if you read the detail docs within Semiann, you can see how I created an infrastructure to optimize the generated networks.&nbsp; And you can see that I have designed it so that the next version includes dynamic code generation/compilation so as to maximize performance by unrolling loops and reording independent operations and caching precalculated values optimally to minimize CPU register/cache flushes.&lt;br&gt;&lt;br&gt;If you get a chance to review it, please give me feedback if you have any issues or suggestions.&lt;br&gt;&lt;br&gt;&lt;br&gt;Jim&lt;br&gt;&lt;br&gt;&lt;br&gt;----- Original Message ----&lt;br&gt;From: Sandor Murakozi &lt;smurakozi@...&gt;&lt;br&gt;To: neat &lt;neat@yahoogroups.com&gt;&lt;br&gt;Sent: Monday, February 06, 2006 5:33:00 AM&lt;br&gt;Subject: [neat] Structure sharing&lt;br&gt;&lt;br&gt;   Hi,&lt;br&gt;&lt;br&gt;I was playing with the idea of a kind of structure sharing between networks and I&#39;d like to hear your opinion\n about it.&lt;br&gt;Problem:&lt;br&gt;algorithms related to the structure of networks are usually quite expensive ( e.g. determining recurrency, comparing structure, visiting nodes in a specific order, ...). Therefore most people try to avoid them whenever possible (using heuristics, or simply ignoring it).&lt;br&gt;&lt;br&gt;My idea is to separate the structure of a network (nodes + connections) from all other info (connection weights, values...). Networks with the same structure would actually use the same &quot;structure&quot; object. Of course, it would make creation /modification of networks a bit more complex, but afterwards it could save a lot of time, just some ideas: &lt;br&gt;&lt;br&gt;We would need to perform the expensive operations much less times. If we have several networks with the same structure we need to find e.g. recurrent connections only once.&lt;br&gt;&lt;br&gt;Most likely results of these operations could be stored  e.g. we could cache indices defining an order of nodes for network evaluation. I know some\n frameworks already do something similar, but it could be a more general pattern. &lt;br&gt;&lt;br&gt;During crossover if parents have the same structure (it would be trivial to determine) then just get the structure of them and perform crossover only on other attributes.  &lt;br&gt;&lt;br&gt;When we classify networks to species we could use much more info about structural similarities. If I got it correctly currently it is limited, because it takes too much time. With structure sharing we could reduce this time significantly. &lt;br&gt;&lt;br&gt;I&#39;m sure there are a lot of other things that could benefit from this feature.&lt;br&gt;&lt;br&gt;I know that in most of the cases the evaluation of network fitness takes much more time then these structural operations, but if evaluation itself is fast, then we could save significant time and/or use structural operations more frequently. &lt;br&gt;&lt;br&gt;What do you think about it?&lt;br&gt;&lt;br&gt;Cheers,&lt;br&gt;don&lt;br&gt;               &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\r\n--0-922679239-1139238415=:15034--\r\n\n"}}