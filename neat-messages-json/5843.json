{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":234577593,"authorName":"Oliver Coleman","from":"Oliver Coleman &lt;oliver.coleman@...&gt;","profile":"olivercoleman04","replyTo":"LIST","senderId":"nwIrzPBsp0zuf2-sMFmWdO6OBWFJNfGNX9qxOFWb_AYO4wG4uaQ94uYnXvLQD7MBt96Xlg0obtmsy53myDbCannCTyQIaonpma-Ps59h4uo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"New spiking and synaptic plasticity neural network simulator written in Java and using GPGPU","postDate":"1345436554","msgId":5843,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBK2R1aW1QazJXb0tuMCtFMkR6SEZDekJRUHpkOFArb2tRNjNwa2hOVXgwclFBN09uZ0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":5842,"nextInTime":5844,"topicId":5843,"numMessagesInTopic":1,"msgSnippet":"In case anyone finds this useful (I think a few people on here are interested in these sorts of models/this direction): I m writing a neural network simulator","rawEmail":"Return-Path: &lt;oliver.coleman@...&gt;\r\nX-Sender: oliver.coleman@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 16558 invoked from network); 20 Aug 2012 04:22:36 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m9.grp.sp2.yahoo.com with QMQP; 20 Aug 2012 04:22:36 -0000\r\nX-Received: from unknown (HELO mail-lb0-f172.google.com) (209.85.217.172)\n  by mta1.grp.sp2.yahoo.com with SMTP; 20 Aug 2012 04:22:35 -0000\r\nX-Received: by lbbgg6 with SMTP id gg6so3862398lbb.17\n        for &lt;neat@yahoogroups.com&gt;; Sun, 19 Aug 2012 21:22:34 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.152.131.68 with SMTP id ok4mr12411033lab.47.1345436554273;\n Sun, 19 Aug 2012 21:22:34 -0700 (PDT)\r\nX-Received: by 10.112.127.99 with HTTP; Sun, 19 Aug 2012 21:22:34 -0700 (PDT)\r\nDate: Mon, 20 Aug 2012 14:22:34 +1000\r\nMessage-ID: &lt;CA+duimPk2WoKn0+E2DzHFCzBQPzd8P+okQ63pkhNUx0rQA7Ong@...&gt;\r\nTo: neat@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=f46d0435c1d2e2a28804c7aadb28\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Oliver Coleman &lt;oliver.coleman@...&gt;\r\nSubject: New spiking and synaptic plasticity neural network simulator written\n in Java and using GPGPU\r\nX-Yahoo-Group-Post: member; u=234577593; y=lTeauQ6loI9_v1iA4s-nrL5W_ZwEpoY1F6EHcQViFKnTjS7rV6YOJnxWAS8vUi-D8BqXfo5DOg\r\nX-Yahoo-Profile: olivercoleman04\r\n\r\n\r\n--f46d0435c1d2e2a28804c7aadb28\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nIn case anyone finds this useful (I think a few people on here are\ninterested in these sorts of models/this direction): I&#39;m writing a neural\nnetwork simulator designed for spiking neurons and plastic synapses as part\nof my current work. The main interesting bit is that it can take advantage\nof GPU hardware to speed up the simulation for large networks (hundreds of\nthousands to millions of components). It&#39;s hosted on github and GPL\nlicensed: https://github.com/OliverColeman/bain It also contains a GUI for\nexperimenting with spike-timing dependent synaptic plasticity models which\nallows altering spiking protocols and the model parameters (see\nhttp://ojcoleman.com/content/fun-spike-timing-dependent-synaptic-plasticity).\nExcerpt of readme:\n\nThe Bain neural network simulator is designed to meet the following\nrequirements:\n - Simulate neural networks at a level of fidelity, with respect to natural\n     neural networks, greater than typical rate-based models used in\ncomputer\n     science but lower than biophysical models used in neuroscience.\n - Provide a framework to allow easily plugging in parameterised functional/\n     computational models for neurons, synapses and neuromodulators\n     (neuromodulator functionality coming soon). The framework is designed\n     for spiking neuron models and plastic synapses, but can also be used\n     for rate-based and fixed-weight models.\n - Support arbitrary topologies.\n - Simulate small to large neural networks (tens of neurons/synapses to\n     millions of neurons/synapses), efficiently and with high performance.\n - Make use of SIMD hardware (eg GPUs) for large networks via OpenCL and\n     Aparapi.\n - Be written in Java.\n\nAparapi allows writing Java code that follows certain conventions and\nrestrictions that it will then turn into OpenCL at run-time. If no OpenCL\ncompatible platforms are available then Aparapi falls back to using a Java\nThread Pool or regular sequential operation automatically. Thus to add a\nnew\nmodel of a neural network component, one only need extend the appropriate\nbase\nclass and implement a few methods, without thinking (very much) about\nOpenCL,\nthread pools, etcetera.\n\r\n--f46d0435c1d2e2a28804c7aadb28\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nIn case anyone finds this useful (I think a few people on here are interest=\r\ned in these sorts of models/this direction): I&#39;m writing a neural netwo=\r\nrk simulator designed for spiking neurons and plastic synapses as part of m=\r\ny current work. The main interesting bit is that it can take advantage of G=\r\nPU hardware to speed up the simulation for large networks (hundreds of thou=\r\nsands to millions of components). It&#39;s hosted on github and GPL license=\r\nd: &lt;a href=3D&quot;https://github.com/OliverColeman/bain&quot;&gt;https://github.com/Oli=\r\nverColeman/bain&lt;/a&gt; It also contains a GUI for experimenting with spike-tim=\r\ning dependent synaptic plasticity models which allows altering spiking prot=\r\nocols and the model parameters (see &lt;a href=3D&quot;http://ojcoleman.com/content=\r\n/fun-spike-timing-dependent-synaptic-plasticity&quot;&gt;http://ojcoleman.com/conte=\r\nnt/fun-spike-timing-dependent-synaptic-plasticity&lt;/a&gt; ). Excerpt of readme:=\r\n&lt;br&gt;\n&lt;br&gt;The Bain neural network simulator is designed to meet the followin=\r\ng &lt;br&gt;requirements:&lt;br&gt;=A0- Simulate neural networks at a level of fidelity=\r\n, with respect to natural &lt;br&gt;=A0=A0=A0=A0 neural networks, greater than ty=\r\npical rate-based models used in computer &lt;br&gt;\n=A0=A0=A0=A0 science but lowe=\r\nr than biophysical models used in neuroscience.&lt;br&gt;=A0- Provide a framework=\r\n to allow easily plugging in parameterised functional/&lt;br&gt;=A0=A0=A0=A0 comp=\r\nutational models for neurons, synapses and neuromodulators &lt;br&gt;\n=A0=A0=A0=\r\n=A0 (neuromodulator functionality coming soon). The framework is designed &lt;=\r\nbr&gt;=A0=A0=A0=A0 for spiking neuron models and plastic synapses, but can als=\r\no be used&lt;br&gt;=A0=A0=A0=A0 for rate-based and fixed-weight models.&lt;br&gt;=A0- S=\r\nupport arbitrary topologies.&lt;br&gt;\n=A0- Simulate small to large neural networ=\r\nks (tens of neurons/synapses to &lt;br&gt;=A0=A0=A0=A0 millions of neurons/synaps=\r\nes), efficiently and with high performance.&lt;br&gt;=A0- Make use of SIMD hardwa=\r\nre (eg GPUs) for large networks via OpenCL and &lt;br&gt;\n=A0=A0=A0=A0 Aparapi.&lt;b=\r\nr&gt;=A0- Be written in Java.&lt;br&gt;=A0=A0=A0=A0 &lt;br&gt;Aparapi allows writing Java =\r\ncode that follows certain conventions and &lt;br&gt;restrictions that it will the=\r\nn turn into OpenCL at run-time. If no OpenCL &lt;br&gt;compatible platforms are a=\r\nvailable then Aparapi falls back to using a Java &lt;br&gt;\nThread Pool or regula=\r\nr sequential operation automatically. Thus to add a new &lt;br&gt;model of a neur=\r\nal network component, one only need extend the appropriate base &lt;br&gt;class a=\r\nnd implement a few methods, without thinking (very much) about OpenCL, &lt;br&gt;=\r\n\nthread pools, etcetera.&lt;br&gt;\n\r\n--f46d0435c1d2e2a28804c7aadb28--\r\n\n"}}