{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"D1tSkehRYL391Nz2KsZ3LNJ8CdTq_Di6rSx30HBMCKTa2CP6KAkk7IsxMbVLtHFzA1EKf_CigzeMJ722klRlsdQANW-C_gwmCZg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Adding only feed-forward connections","postDate":"1131381694","msgId":2394,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4zLjQuMC4yMDA1MTEwNzE2MzQxMi4wMzNiOTZhOEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDQzNkU2RTAyLjcwMTAzMDRAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDYuMi4zLjQuMC4yMDA1MTEwMjEwNTMzOC4wMzMzYzczMEBwb3AubWFpbC55YWhvby5jby51az4gPDIwMDUxMTAyMTQ1MDA3LjgyNjI2LnFtYWlsQHdlYjUyODEzLm1haWwueWFob28uY29tPiA8Ni4yLjMuNC4wLjIwMDUxMTAyMTUxOTU2LjAzMzg1NzYwQHBvcC5tYWlsLnlhaG9vLmNvLnVrPiA8NDM2OTM4MjcuMjAyMDhAZHNsLnBpcGV4LmNvbT4gPDYuMi4zLjQuMC4yMDA1MTEwMzEyMTEwNS4wMzNhNGRjMEBwb3AubWFpbC55YWhvby5jby51az4gPDQzNkU2RTAyLjcwMTAzMDRAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":2390,"nextInTopic":2395,"prevInTime":2393,"nextInTime":2395,"topicId":2372,"numMessagesInTopic":22,"msgSnippet":"At 20:56 06/11/2005, you wrote:\n Ian Badcoe wrote:\n \n One cheap way to handle this might be to keep a bit-array on each\n node.  Each node owns a unique bit","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 21035 invoked from network); 7 Nov 2005 16:40:32 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m6.grp.scd.yahoo.com with QMQP; 7 Nov 2005 16:40:32 -0000\r\nReceived: from unknown (HELO smtp005.mail.ukl.yahoo.com) (217.12.11.36)\n  by mta4.grp.scd.yahoo.com with SMTP; 7 Nov 2005 16:40:31 -0000\r\nReceived: (qmail 88954 invoked from network); 7 Nov 2005 16:40:26 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp005.mail.ukl.yahoo.com with SMTP; 7 Nov 2005 16:40:25 -0000\r\nMessage-Id: &lt;6.2.3.4.0.20051107163412.033b96a8@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.3.4\r\nDate: Mon, 07 Nov 2005 16:41:34 +0000\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;436E6E02.7010304@...&gt;\r\nReferences: &lt;6.2.3.4.0.20051102105338.0333c730@...&gt;\n &lt;20051102145007.82626.qmail@...&gt;\n &lt;6.2.3.4.0.20051102151956.03385760@...&gt;\n &lt;43693827.20208@...&gt;\n &lt;6.2.3.4.0.20051103121105.033a4dc0@...&gt;\n &lt;436E6E02.7010304@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Adding only feed-forward connections\r\nX-Yahoo-Group-Post: member; u=7192225; y=eZJ9uVa94N2wqXLOUuWv-halTHeNJ3aLCxaRe2AFeDRi7EZtjQ\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 20:56 06/11/2005, you wrote:\n&gt;Ian Badcoe wrote:\n&gt;\n&gt; &gt;One cheap way to handle this might be to keep a bit-array on each\n&gt; &gt;node.  Each node owns a unique bit in that array (2 ^ innovation, if\n&gt; &gt;you like).  Now you can proceed as with the counting, only you are\n&gt; &gt;ORing in the bits.  So, nodes adjoining the input layer (I&#39;m skipping\n&gt; &gt;the inputs themselves as I assume you already avoid recurrent\n&gt; &gt;connections to them) have just their own bit set.  Other nodes have\n&gt; &gt;all the bits that are set in their children, plus their own bit set.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;This is quite efficient because:\n&gt; &gt;\n&gt; &gt;1) you detect recurrence when, if you are adding a connection, the\n&gt; &gt;source has the destination&#39;s bit set.  This means that the\n&gt; &gt;destination already exists upstream of the source.\n&gt; &gt;\n&gt; &gt;\n&gt;Ok yeh I&#39;ve got it. Each node has a bit array that indicates which nodes\n&gt;(through however long a pathway) connect into it. I suppose you could do\n&gt;it the other way around also - keep a bit array of all nodes that are\n&gt;connected to. Not sure if there&#39;s any gain in doing it that way.\n&gt;\n&gt; &gt;2) when you add a connection you just have to merge the source&#39;s bits\n&gt; &gt;into the destination.  Only when that leads to a change in the\n&gt; &gt;destination&#39;s bits do you need to recursively propagate those changes\n&gt; &gt;through its downstream connections.  And merging is just an OR\n&gt; &gt;operation, and ORing on an unsigned long will do 32 at once....\n&gt; &gt;\n&gt; &gt;\n&gt;So consider a network with say 2000 nodes, we&#39;re talking about\n&gt;(2000/32)*4bytes = 252 bytes of storage per node. 2000 * 252 = 504,000\n&gt;bytes in all. In a population of 1000 this comes to about 504 MBytes. It\n&gt;seems a little excessive but it&#39;s within reason these days.\n\nInstead of &quot;*4bytes&quot; I would have &quot;/8bits&quot; because I would store the \nbits as bits and not unsigned longs.\n\n((acherly, an efficient implementation will access them as an array \nof longs with 32bits in each one, as its far faster to access 32bit \naligned memory (x86, YMMV)))\n\nAnd that would not require premature optimisation, because I&#39;m 99% \nsure there is a custom parameterisation of the std::vector&lt;bool&gt; \nclass that already does this for me...  I&#39;ll just check that.\n\nI actually never have this problem, because I only ever connect from \nhigher innovation number to lower -- which I can do, because I did \nnot (yet) adopt Ken&#39;s paradigm of inserting nodes into existing \nconnections.  That is something I really need to think hard about, however.\n\n&gt; &gt;3) it gets a little more expensive if you delete a connection, you\n&gt; &gt;have to tear-down the destination&#39;s current bit array and rebuilt if\n&gt; &gt;from all children, but even that&#39;s not so expensive and 66.66% of all\n&gt; &gt;NEAT implementations don&#39;t delete connections anyway.\n&gt; &gt;\n&gt; &gt;\n&gt;In SharpNEAT you /can/ do what Derek & Philip called blended searches,\n&gt;but by default I switch between complexifying and pruning/simplifying.\n&gt;In which case I could just not update the bit arrays while I&#39;m pruning,\n&gt;and rebuild them all in one go when I switch back into complexifying\n&gt;mode. But if the user chooses to do both types of mutation then which\n&gt;technique is faster overall comes down to the relative rates of the two\n&gt;types of mutation. Probably there aren&#39;t many CPU cycles to be saved in\n&gt;such an approach, and probably not enough to warrant the extra\n&gt;complexity - I do like to optimise code but I also like to keep it as\n&gt;simple as possible.\n&gt;\n&gt; &gt;--\n&gt; &gt;\n&gt; &gt;All that said, to go back to my failed example:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt;&gt;A -&gt; B -&gt; C -&gt;D\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;A-&gt; B&#39; -&gt;C&#39; -&gt;D\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;\n&gt; &gt;Where the original scheme couldn&#39;t connect C to B&#39;.\n&gt; &gt;\n&gt; &gt;What happens now when individual 1 has just connected C to B&#39; and\n&gt; &gt;individual 2 has just connected C&#39; to B and they try to breed?\n&gt; &gt;\n&gt; &gt;\n&gt;This feels like something that has come up before. Anyone have a quick\n&gt;response to hand? I guess it&#39;s back to loop detection again.\n&gt;\n&gt;My instinct tells me this is getting a bit complex. It&#39;s been a useful\n&gt;exercise but right now the simple approach of ensuring connections are\n&gt;always to a higher ID seems favourable to my mind.\n\nThat&#39;s not actually what I was getting at, see my reply to Jim in a moment...\n\n         Ian\n\n&gt;Cheers,\n&gt;\n&gt;Colin.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n\nIn fifteen minutes, everybody will be in the future.\n\n\n\n\t\t\n___________________________________________________________ \nTo help you stay safe and secure online, we&#39;ve developed the all new Yahoo! Security Centre. http://uk.security.yahoo.com\r\n\n"}}