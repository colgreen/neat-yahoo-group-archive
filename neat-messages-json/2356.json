{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"MYOomIvN2V8jVGISNRxyW9E1IT1q1sCKIjGKhRJlA8-IDSa7Li21HXN2HAPiaufZLnU6ZLgO4tNrPvSUfhQ-6mzHXXAqj6l4XOI","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Continuous Species Control","postDate":"1130007743","msgId":2356,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4zLjQuMC4yMDA1MTAyMjExNTgzMS4wMzE1ZTQzOEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDQzNTQzRkQyLjcwMDAyMDlAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDYuMi4zLjQuMC4yMDA1MTAxNzE0NDcwNi4wMjc3NDViMEBwb3AubWFpbC55YWhvby5jby51az4gPDQzNTQzRkQyLjcwMDAyMDlAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":2349,"nextInTopic":2357,"prevInTime":2355,"nextInTime":2357,"topicId":2341,"numMessagesInTopic":11,"msgSnippet":"... This is true, but much of my work here is still trying to get to a basic start-point, so I m not too worried about subtle breakages because I haven t yet","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 59301 invoked from network); 24 Oct 2005 10:04:17 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m28.grp.scd.yahoo.com with QMQP; 24 Oct 2005 10:04:17 -0000\r\nReceived: from unknown (HELO smtp2.freeserve.com) (193.252.22.157)\n  by mta1.grp.scd.yahoo.com with SMTP; 24 Oct 2005 10:04:17 -0000\r\nReceived: from me-wanadoo.net (localhost [127.0.0.1])\n\tby mwinf3116.me.freeserve.com (SMTP Server) with ESMTP id 111A9340008E\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 24 Oct 2005 12:03:32 +0200 (CEST)\r\nReceived: from giles.yahoo.co.uk (modem-598.lemur.dialup.pol.co.uk [217.135.130.86])\n\tby mwinf3116.me.freeserve.com (SMTP Server) with ESMTP id 961BC3400086\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 24 Oct 2005 12:03:30 +0200 (CEST)\r\nX-ME-UUID: 20051024100330614.961BC3400086@...\r\nMessage-Id: &lt;6.2.3.4.0.20051022115831.0315e438@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.3.4\r\nDate: Sat, 22 Oct 2005 20:02:23 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;43543FD2.7000209@...&gt;\r\nReferences: &lt;6.2.3.4.0.20051017144706.027745b0@...&gt;\n &lt;43543FD2.7000209@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Continuous Species Control\r\nX-Yahoo-Group-Post: member; u=7192225; y=htxX7aa6HPyZrRWffCR8DxQZJozxKBQoB5MbF98eMHE63TEnrQ\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nAt 01:20 18/10/2005, you wrote:\n&gt;Ian Badcoe wrote:\n&gt;\n&gt; &gt;At 01:49 17/10/2005, you wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt;BTW are you still evaluating with Tic-Tac-Toe players?\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;\n&gt; &gt;Yup.  I&#39;ve not been saying anything, because I&#39;m also upgrading the\n&gt; &gt;algorithm at the same time, but I have been keeping going with a\n&gt; &gt;population, even though the algorithm operating on it is still\n&gt; &gt;regularly upgraded.  Obviously once the algorithm stabilizes I&#39;ll\n&gt; &gt;have to rerun it from the start with a constant environment.\n&gt; &gt;\n&gt; &gt;\n&gt;Indeed. In fact you may find you get better results if you start with a\n&gt;fresh population since earlier runs may have lead the population into a\n&gt;bad region of the fitness space. Maybe. I always tend to test tweaks to\n&gt;the core NEAT algorithm with fresh populations anyhow, it feels\n&gt;experimentally more sound that way. After all your new algorithm may be\n&gt;appalling at initially finding good solutions but Ok once it has some\n&gt;good individuals to work on, and you would never now.\n\nThis is true, but much of my work here is still trying to get to a \nbasic start-point, so I&#39;m not too worried about subtle breakages \nbecause I haven&#39;t yet got to that base implementation that I know \nisn&#39;t broken and can be used as a reference.\n\n&gt; &gt;For the moment, my top player has normalised PPS(legal-nl) of 0.9219\n&gt; &gt;(or 92.19%, which is easier to think about).  There&#39;s definitely a\n&gt; &gt;sharp decrease in rate of progress at around 90% so things are\n&gt; &gt;getting quite slow now.  That&#39;s one of the main reasons I&#39;ve\n&gt; &gt;continued to upgrade the algorithm, trying to keep the rate of \n&gt; progress up :)\n&gt; &gt;\n&gt; &gt;\n&gt;I think the law of dimishing returns is a common observation in many\n&gt;NEAT experiments - certainly I&#39;ve noticed it a lot -  and probably\n&gt;evolutionary techniques as a whole. Obviously it depends on the problem\n&gt;but all none trivial fitness functions I have tried have tended to\n&gt;achieve very good results but not perfect. Unfortunately in some cases\n&gt;the difference between 99% and 100% is the difference between an awful\n&gt;solution and a perfect one. I suspect most board games may be in this\n&gt;category, after all a human that scores 92% in your fitness scheme\n&gt;wouldn&#39;t be rated too highly by other humans. It&#39;s a much better score\n&gt;than my players though, I know they&#39;re not directly comparable results\n&gt;but my players still make stupid moves far more often than 7.81% of the\n&gt;time when playing a random player.\n\nI have played against my population leader a few times.  This was the\nlatest such game (92.74%):\n\nplay (F)irst or (S)econd\n\n(I pressed &quot;F&quot;)\n\n123\n456\n789\n\n(I play 1)\n\nX23\n456\n789\n\n(it plays 2)\n\nXO3\n456\n789\n\n(I play 9)\n\nXO3\n456\n78X\n\n(it plays 5, essential to avoid losing)\n\nXO3\n4O6\n78X\n\n(I play 6, again I had no choice)\n\nXO3\n4O6\n7XX\n\n(it plays 6)\n\nXO3\n4OO\n7XX\n\n(I play 4)\n\nXO3\nXOO\n7XX\n\n(it plays 3, this is it&#39;s only mistake)\n\nXOO\nXOO\n7XX\n\n(I win)\n\nXOO\nXOO\nXXX\n\nThis was a case where the CPU looked pretty good, however, in other \ngames it has made far more basic errors in the early or mid game...\n\n&gt;Just remember about optimisation being the root of all evil. I&#39;ve\n&gt;introduced some pretty nasty bugs into code in the name of optimisation,\n&gt;long term these optimisations are obviously beneficial as the problems\n&gt;get spotted and ironed out, but in the short term they can skew results\n&gt;if a bug breaks your search algorithm and you don&#39;t realise it. Ideally\n&gt;of course we&#39;d all be building units tests for our code, in reality this\n&gt;isn&#39;t feasible with the kind of experimental &#39;seat of your pants&#39; type\n&gt;coding we do.\n\nI&#39;m open to the idea of unit tests, but I have no idea how to go \nabout it in this case.\n\nActually, last week I almost started a thread on &quot;How do we test?&quot;\n\nIt seems to me that evolutionary algorithms are particularly \nresistant to testing, e.g because:\n\n1) behaviour depends on (pseudo) random numbers so as long as you \ndon&#39;t change anything, it behaves the same, but the chaotic \ndependence on earlier events is really strong, and the slightest \nchange means you are no longer repeating the same test-case\n\n2) there&#39;s a really broad spread of possible states for the system\n\n3) you may have to run it for 7 days before it exhibits a bug (or 70 \ndays if you are trying to use a debug build)...\n\nWhat do people do?  I don&#39;t mean tests in the sense of &quot;lets feed it \nXOR and see if it finds a solution&quot;.  I mean tests in the sense of \nbeing sure that (for example) your mutation operation doesn&#39;t bias \ntowards particular weights, or write a float out of bounds 1 time in \n1,000,000,000?\n\nAs an example, and a good illustration of the danger of \noptimising.  I have a cache of FID values to make rule look-ups \nfaster.  After a few days of running it (when progress was _really_ \nslow) I discovered that recalculating the fitness of the top \nindividual gave an answer of 75%, but written against it in the log \nfile was 91%.  After a couple of hours of head-scratching I \ndiscovered that this was because when I reproduce an individual, I \nwas copying one parent&#39;s cache, which obviously didn&#39;t contain any \nrecent changes to the FID values...  Thus the offspring were \ninheriting temporary state information from their parents, and this \nwas compensating for their mutations (rather like money does for rich \nkids :) - apologies if any of you are rich, just send me 25% of your \ncash and we&#39;ll say no more about it).\n\nHow do you test for that kind of bug, e.g. when the algorithm is \ngoing wrong but the expected behaviour is an emergent feature of \nmillions of events?\n\n         Ian\nIn 15 minutes everybody will be in the future.\n\n\n\n\n"}}