{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"Epr-_MH00JbVM68YA4LBpXKliRnU5tLuQRMK7pn7OQ8rARB_j3r3c4-gy_EkYtCRoxBhvHUxymc-rXEpqN9zdC9l2IdfBUR5TfIk_GsuYGDy","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Error in Neat C++","postDate":"1080639114","msgId":583,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGM0YmVxYStqc3JjQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGM0YmIzZCtmaWJpQGVHcm91cHMuY29tPg=="},"prevInTopic":582,"nextInTopic":0,"prevInTime":582,"nextInTime":584,"topicId":582,"numMessagesInTopic":2,"msgSnippet":"Mikkel, Of course I am familiar with that code.  That section of code is supposed to take the trait values associated with a gene in the genome and put them","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 53040 invoked from network); 30 Mar 2004 09:31:56 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m4.grp.scd.yahoo.com with QMQP; 30 Mar 2004 09:31:56 -0000\r\nReceived: from unknown (HELO n13.grp.scd.yahoo.com) (66.218.66.68)\n  by mta4.grp.scd.yahoo.com with SMTP; 30 Mar 2004 09:31:55 -0000\r\nReceived: from [66.218.67.176] by n13.grp.scd.yahoo.com with NNFMP; 30 Mar 2004 09:31:54 -0000\r\nDate: Tue, 30 Mar 2004 09:31:54 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;c4beqa+jsrc@...&gt;\r\nIn-Reply-To: &lt;c4bb3d+fibi@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 4274\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-eGroups-Remote-IP: 66.218.66.68\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: Error in Neat C++\r\nX-Yahoo-Group-Post: member; u=54567749\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nMikkel,\n\nOf course I am familiar with that code.  That section of code is\nsupposed to take the trait values associated with a gene in the genome\nand put them inside their respective link in the network.  Note that\nin the released version of NEAT, traits are not being used for\nanything explicit in the system so this function is not doing anything\nimportant.\n\nNevertheless, it should work.  It is very strange that it would crash\nat after several hours at that point in the code, since as you can\nsee, it checks to see whether the trait pointer is null, and when it\ncrashes it is not null.\n\nThus, the problem would have to be that NEAT::num_trait_params is\nsomehow not the right bound on the params array, causing params to\nstart writing into a bad part of memory, to read from a bad part of\nmemory.  But this scenario seems highly unlikely for two reasons:\n\n1) It has been running for hours and using the same\nNEAT::num_trait_params parameter.  (Unless you actively changed it\nsomewhere.\n\n2) I have never heard of this error in several years of NEAT being\nreleased.\n\nThus, my first guess would be you have a memory leak somewhere in your\ncode.  There is a good chance it is not inside the NEAT code itself,\nalthough of course that cannot be guaranteed.\n\nHere&#39;s what I would do: every time derive_trait is called, check the\nvariables NEAT::num_trait_params and also the entire params and\n(curtrait-&gt;params) arrays to see if any of them have been corrupted. \n If so, then you are one step closer to the culprit: you then just\nneed to find when the altered variable(s) are being overwritten.\n\nHope this helps.  If anyone else has had this bug as well that would\nbe helpful to know as well.\n\nken\n\n--- In neat@yahoogroups.com, &quot;mikkel_kjaergaard&quot; &lt;mikkelbk@d...&gt;\nwrote:\n&gt; Hi\n&gt; \n&gt; I have a problem with one of my experiments the others I have done\n&gt; have worked fine. The problem is that after some hours (1-3) the\n&gt; program goes down with a segmentation fault. I have included the\n&gt; information I could get with gdb and the code that fails. It looks\n&gt; like a problem in the central neat code. Does anybody know what is\nwrong?\n&gt; \n&gt; Mikkel Baun Kjaergaard\n&gt; \n&gt; &gt;&gt;&gt;&gt;&gt;\n&gt; Reproducing\n&gt; \n&gt; Program received signal SIGSEGV, Segmentation fault.\n&gt; 0x0806cdd4 in Link::derive_trait(Trait*) (this=0x897f618,\n&gt; curtrait=0xa) at neat/networks.cpp:300\n&gt; 300           params[count]=(curtrait-&gt;params)[count];\n&gt; (gdb) bt\n&gt; #0  0x0806cdd4 in Link::derive_trait(Trait*) (this=0x897f618,\n&gt; curtrait=0xa) at neat/networks.cpp:300\n&gt; #1  0x080717fc in Genome::genesis(int) (this=0x897bd20, id=0) at\n&gt; neat/genetics.cpp:334\n&gt; #2  0x0808201d in Organism (this=0x924cb58, fit=0, g=0x897bd20,\n&gt; gen=299) at genetics.h:718\n&gt; #3  0x0807e060 in Species::reproduce(int, Population*,\n&gt; std::list&lt;Species*, std::allocator&lt;Species*&gt; &gt;&) (this=0x80b6cd8,\n&gt; generation=299, pop=0x80b5b90, \n&gt;     sorted_species=@0xbfffd380) at neat/genetics.cpp:3675\n&gt; #4  0x0807ccb3 in Population::epoch(int) (this=0x80b5b90,\n&gt; generation=299) at neat/genetics.cpp:3197\n&gt; #5  0x080652f5 in CoEvolutionExp::epoch(int, char*) (this=0x80b7058,\n&gt; generation=299, filename=0x8fdb720 &quot;othello_gen_\nco/othello_gen_co_299&quot;)\n&gt;     at othello/NeatExperiment.cpp:145\n&gt; #6  0x0806468a in Experiment::evolve(int, int) (this=0x80b7058,\n&gt; startgen=290, generations=3000) at othello/NeatExperiment.cpp:34\n&gt; #7  0x0806452b in performExp(char*, char*, char*, char*)\n&gt; (arg2=0xbffff65d &quot;1&quot;, arg3=0xbffff65f &quot;othello_gen_co&quot;,\n&gt; arg4=0xbffff66e &quot;290&quot;, arg5=0xbffff672 &quot;3000&quot;)\n&gt;     at othello/NeatExperiment.cpp:21\n&gt; #8  0x0808fb9c in main (argc=6, argv=0xbfffd6b4) at\n&gt; neat/neatmain_ng.cpp:109\n&gt; #9  0x42015574 in __libc_start_main () from /lib/tls/libc.so.6\n&gt; &lt;&lt;&lt;&lt;&lt;\n&gt; \n&gt; Line 300 is\n&gt; \n&gt; \n&gt; /* ************************************************************** */\n&gt; /* *                       LINK METHODS HERE                    * */\n&gt; /* ************************************************************** */\n&gt; //Reserved for future system expansion\n&gt; void Link::derive_trait(Trait *curtrait) {\n&gt;  \n&gt;   if (curtrait!=0) {\n&gt;     for (int count=0;count&lt;NEAT::num_trait_params;count++)\n&gt; &gt;&gt;300&gt;&gt;    params[count]=(curtrait-&gt;params)[count];\n&gt;   }\n&gt;   else {\n&gt;     for (int count=0;count&lt;NEAT::num_trait_params;count++)\n&gt;       params[count]=0;\n&gt;   }\n&gt; \n&gt; }\n\n\n"}}