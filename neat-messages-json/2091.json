{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":151231063,"authorName":"Joseph Reisinger","from":"Joseph Reisinger &lt;joeraii@...&gt;","profile":"joeraii","replyTo":"LIST","senderId":"tTiZMczZJqsRgfa2VkdYhftykyO4y2shfLuUzd47F2l1mKU2SRdy9n8V8nWMNK2PsU8dGewI0Yexeu8Iz7QMQ93W8f7Hb2wgjGAA_i25hA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Introduction/Some Questions (resend, sorry if its a dupe)","postDate":"1121441919","msgId":2091,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuNjMuMDUwNzE1MTAzODEyMC41MDgyQG9yYW5nZS1wZWtvZS5jcy51dGV4YXMuZWR1Pg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":2090,"nextInTime":2092,"topicId":2091,"numMessagesInTopic":1,"msgSnippet":"Hi Ashot, Its great to see another face in the modular NEAT camp, at the moment we re greatly outnumbered :) But anyway in general its nice to see more people ","rawEmail":"Return-Path: &lt;joeraii@...&gt;\r\nX-Sender: joeraii@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 7097 invoked from network); 15 Jul 2005 15:50:46 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m29.grp.scd.yahoo.com with QMQP; 15 Jul 2005 15:50:46 -0000\r\nReceived: from unknown (HELO nobodaddy.cs.utexas.edu) (128.83.120.154)\n  by mta2.grp.scd.yahoo.com with SMTP; 15 Jul 2005 15:50:46 -0000\r\nReceived: from orange-pekoe.cs.utexas.edu (joeraii@... [128.83.120.122])\n\tby nobodaddy.cs.utexas.edu (8.13.4/8.13.4) with ESMTP id j6FFcem9005480\n\tfor &lt;neat@yahoogroups.com&gt;; Fri, 15 Jul 2005 10:38:40 -0500 (CDT)\r\nReceived: (from joeraii@localhost)\n\tby orange-pekoe.cs.utexas.edu (8.13.4/8.13.4/Submit) id j6FFcdwJ005096;\n\tFri, 15 Jul 2005 10:38:39 -0500\r\nDate: Fri, 15 Jul 2005 10:38:39 -0500 (CDT)\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;Pine.LNX.4.63.0507151038120.5082@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Joseph Reisinger &lt;joeraii@...&gt;\r\nSubject: Re: [neat] Introduction/Some Questions (resend, sorry if its a dupe)\r\nX-Yahoo-Group-Post: member; u=151231063; y=lzwdxX0PlUzJLpDcsTwdevyTbHCfrs143n_Q1kI2Wjv4kA\r\nX-Yahoo-Profile: joeraii\r\n\r\nHi Ashot,\n\nIts great to see another face in the modular NEAT camp, at the moment we&#39;re \ngreatly outnumbered :) But anyway in general its nice to see more people \ntacking the &quot;NN representation problem,&quot; particularly since the limitations of \ndirect NN encodings are so painful.\n\n&gt; \tMy initial idea was a type of modular NEAT. Essentially the way it\n&gt; works is that each new innovation actually creates a coevolving NEAT\n&gt; population which starts as simple but can complexify (which then have\n&gt; nodes which can complexify).  Every network that uses this innovation\n&gt; would actually share the same &#39;module&#39; which would be the module with\n&gt; the best average fitness across all networks.  Modules would be\n&gt; evolved for several generations before the &#39;top&#39; NEAT population was\n&gt; given one generation.  The benefits here are that this would allow\n&gt; evolution to choose the level of modularity that was fitting for the\n&gt; problem, would be a continuous &#39;evolution&#39;(pardon) on NEAT rather than\n&gt; a radical change (in other words it reduces to NEAT), and would solve\n&gt; the problem of adding on new modules while maintaining smooth mutation\n&gt; (by starting them small).  Sort of an ESP meets NEAT idea perhaps.\n&gt; I&#39;ve looked over some of Joe&#39;s stuff, but I think this is different in\n&gt; that modularity is optional rather than forced.\n\nThis is definitely an interesting direction, I particular appreciate that \nyou&#39;ve found a way to circumvent &quot;forcing&quot; modularity, as this would probably \nimprove your performance in cases where a lot of modularity is not strictly \nnecessary to solve the problem. I have a few questions though:\n\n1) What is the fitness function of the co-evolved module populations? Just \nmaximizing the average fitness of the &#39;top&#39; population? One of the things we \nfound out running modular NEAT was that promoting &quot;generalist&quot; module \nstrategies over &quot;specialist&quot; module strategies didn&#39;t really make sense. \nShouldn&#39;t you want to keep any module that creates an innovative breakthrough, \neven if it only does so in one member of the &#39;top&#39; population (i.e. has a low \naverage fitness, but generates a fitness spike in one parent).\n\n2) How will you generate the initial seeding of a module population?\n\n3) How will you allocate input/outputs and module connectivity? This was one of \nthe trickiest problems in writing modular NEAT (you discuss this at length \nbelow, see my reply).\n\n4) How will you deal with the stochastic evaluation situation created by \nmodule-module co-evolution. Consider this case: two modules (A and B) compose \nnetwork X. Under your algorithm (if I understand correctly) A gets an evolution \nphase, B gets an evolution phase, and then X evolves one generation. So now \nwhen we come back to A&#39;s evolution phase, the population fitness rankings may \nhave completely changed, because fitness is dependent on B&#39;s evolution is well. \nIn modular NEAT this proved to be the biggest weak point in the algorithm, \nsince it yielded no real module evolution (if you read the paper: modules \nevolved to be /highly/\ngeneralist, and then it turned out that only bindings really mattered for \nfitness).\n\nOne approach Ken and I discussed akin to this is &quot;hierarchical modularizing \nNEAT&quot; where subpopulations could have their own subpopulations of modules, ad \ninfinitum. This allows evolution to choose the right granularity for each \nmodule more effectively, at the cost of having to evaluate many, many more \nsubpopulations. Initially, you don&#39;t really know how complex a module needs to \nbe, so you start by making naive module partitions. Later, however, it may turn \nout that some modules you partitioned off can stay simple, but others may need \nto become very complex (i.e. should be constructed out of sub-modules). Anyway, \nit seems your approach is a good first step towards this. I&#39;m very interested \nin to\nsee your results.\n\n&gt; \tThe main questions with this approach is what the base building block\n&gt; should be and how to produce the initial selection pressure for\n&gt; modularity (since the &#39;module&#39; would be used in the same network).\n&gt; The building block can be just a node, just a link, or more.  By more\n&gt; perhaps the new module should have the option of connecting from a\n&gt; random set of up to n to another random set of up to n nodes.  By\n&gt; changing the n we can have different binding specificity for the\n&gt; modules.\n\nDid Risto show you the (unpublished) paper by Steetskamp? He did some tests on \ndoing SANE/ESP with things other than fully connected nodes (for example \nindividual links, half-nodes, etc). And the main thing he found was that once \nyou introduce hard-dependencies between two modules (i.e. if module A&#39;s output \nfeeds only into module B), then correctly evaluating module performance becomes \nvery difficult (i.e. module A&#39;s fitness is now completely at the whim of module \nB, and vice-versa).\n\nAnyway,  if the building block is just a link, how would you then do \ncomplexification? You&#39;d need some mechanism to pull in more inputs and maybe \nmore outputs later (similar perhaps to Shimon&#39;s work on fsNEAT).\n\n&gt; \tThink along these lines brought up some other questions.  When NEAT\n&gt; adds a node it actually is functionally no different then a weight\n&gt; mutation (with the exception of the non-linearity of the sigmoid).\n&gt; For a node to really add functionality above what direct link can\n&gt; accomplish it must at least have two inputs or two outputs.  So for\n&gt; NEAT to take advantage of a new node mutation it actually has to get\n&gt; lucky twice, once to add node in the right place, and another two add\n&gt; a link to/from it.  I think in general this problem is sidestepped by\n&gt; having a much higher add-connection rate.  If I&#39;m right on this (am I?\n&gt; ) then perhaps the mutation should  be changed to add a node which\n&gt; connects two inputs/outputs simultaneously, or n inputs/outputs?\n\nThis is probably worth exploring. I&#39;ll defer to Ken on discussing it, though.\n\n&gt; \tAlong the same lines of thinking, has anyone tried using more\n&gt; powerful functions at the nodes rather than just a threshold? For\n&gt; example an average, or maximum, or minimum, or a switch, or so on?\n\nI was just discussing adding gating/competition to NEAT with Risto a few weeks \nago. He seems to think it might be worthwhile. For example, competition between \nnodes could be implemented simply using a &quot;compete&quot; type link, which would then \ncompare the activation of the two competing nodes, and only allow the node with \nthe higher activation to fire.\n\n&gt; mutations incremental by being clever.  The only drawback I see here\n&gt; is that this is less biologically &#39;accurate&#39;, but this is irrelevant\n&gt; for us right?  I can think of several functions that would be\n&gt; particularly useful in combining modules together, or reusing modules\n&gt; in new places.\n\nYes, Ken gave a great talk at GECCO this year on fully exploring where we \nshould be shackled to biology, and where we should cast off our slimy organic \nfetters.\n\n&gt; \tMore along the same lines, and with some inspiration from this paper:\n&gt; http://nn.cs.utexas.edu/lookup?whiteson:gecco03, what I am leaning\n&gt; towards now is writing a switch network on top of the regular NEAT\n&gt; population.  The algorithm would start with just one NEAT population\n&gt; which attempts to solve the entire problem, then after n generations,\n&gt; or after stagnation, a switch network would complexify on top of this\n&gt; population. At each &#39;switch&#39; an NN also evolves which makes the\n&gt; decision on which network to choose to perform the task.  I think the\n&gt; difficulty here is the chicken and egg problem in getting the system\n&gt; off the ground.  What I&#39;m aiming for is to solve the 3v1 keepaway task\n&gt; (from the paper) without using hand coded sub-tasks.  I&#39;m not sure\n&gt; I&#39;ve atriculated this very well, but hopefully the gist comes across.\n&gt; Thanks for any thoughts.\n\nThis is definitely a more tractable architecture, but its more rigid, and \nlimited a-priori. What if you find you need 4 behaviors, instead of 3? Also, \nhow would you handle the switching in networks with recurrent connections (i.e. \nmemory)? Would each network &quot;observe&quot; and keep track of memory individually, or \nwould a switch start running from a &quot;newly awakened&quot; sub-network?\n\nAnyway, this looks like a great start, and I hope you will be continuing this \nwork in the Fall as well.\n\n\n-- \n\nJoseph Reisinger\nhttp://www.cs.utexas.edu/users/joeraii\n\n"}}