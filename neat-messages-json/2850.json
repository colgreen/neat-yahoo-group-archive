{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"rxPoeZbPn4oyrVo7UP12lCIJdUrEge7VFkEel3djHCqfhCujSZNtvLaGgLyyDn0lid1SaWHT7tYNS4g7K3eUTsjPt7DCzvOMsA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: SharpNEAT code optimizations","postDate":"1164586300","msgId":2850,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1NkEyRDNDLjMwNjA1MDdAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PGVrMWVkZCtpZGp0QGVHcm91cHMuY29tPg==","referencesHeader":"PGVrMWVkZCtpZGp0QGVHcm91cHMuY29tPg=="},"prevInTopic":2849,"nextInTopic":2852,"prevInTime":2849,"nextInTime":2852,"topicId":2816,"numMessagesInTopic":16,"msgSnippet":"... Hi Mike, I went through a similar research exercise when I first started looking at C# and considering SharpNeat and came to similar conclusions to","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 6875 invoked from network); 27 Nov 2006 02:21:02 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m21.grp.scd.yahoo.com with QMQP; 27 Nov 2006 02:21:02 -0000\r\nReceived: from unknown (HELO ranger.systems.pipex.net) (62.241.162.32)\n  by mta9.grp.scd.yahoo.com with SMTP; 27 Nov 2006 02:21:00 -0000\r\nReceived: from [10.0.0.13] (81-86-161-87.dsl.pipex.com [81.86.161.87])\n\tby ranger.systems.pipex.net (Postfix) with ESMTP id 943DDE0003A4\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 27 Nov 2006 00:11:26 +0000 (GMT)\r\nMessage-ID: &lt;456A2D3C.3060507@...&gt;\r\nDate: Mon, 27 Nov 2006 00:11:40 +0000\r\nUser-Agent: Thunderbird 1.5.0.8 (Windows/20061025)\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;ek1edd+idjt@...&gt;\r\nIn-Reply-To: &lt;ek1edd+idjt@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: SharpNEAT code optimizations\r\nX-Yahoo-Group-Post: member; u=127853030; y=m5Dye-Easz8k_yXVkVP0lYUv0MYbvjLpmq6uftcBTQP3BidFAz6P\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nMike Woodhouse wrote:\n&gt; Ken,\n&gt;\n&gt; Colin&#39;s educational (to me at least) optimisations notwithstanding,\n&gt; I&#39;ve been interested to see how fast C# and .Net actually can be. As\n&gt; an example, I recently ported part of a (non-AI related)\n&gt; heavily-optimised &quot;straight&quot; C library to C#, expecting to see a\n&gt; fairly substantial reduction in performance. The result? Almost\n&gt; exactly the same. And by &quot;almost&quot; I mean within 1 or 2 percent either\n&gt; way: it&#39;s possible, without putting stop-watch code in, that C# is\n&gt; marginally faster, although I can&#39;t quite see what JIT optimisations\n&gt; might be in play within the .Net runtime. And I haven&#39;t made any\n&gt; particular effort to speed up my C# code.\n&gt;   \n\nHi Mike, I went through a similar research exercise when I first started \nlooking at C# and considering SharpNeat and came to similar conclusions \nto yourself with regards to the speed. You&#39;re never going to get the \nabsolute tightest machine code from C# as from C++ simply because it is \nhigher level and goes through two compilers instead of one but it&#39;s \npretty close. The are also scenarios where having a managed environment \nwith a garbage collector can save more time overall than not having one, \nprimarily because the runtime can periodically stop everything, relocate \nobjects in memory (fixing up pointers as it does so) so that they are in \ncontiguous address space and then continue on. This means that memory \nallocation from the heap is almost as fast as from the stack, that you \ndon&#39;t get memory fragmentation problems and that your objects are close \ntogether in memory thus producing better usage of the CPU cache (probably!).\n\nIt does require a different type of thinking sometimes, trying to \nconsider what is optimal from the point of view of the garbage collector \nwhich can be opposite to what you might think is optimal.\n\n\n\n&gt; And as someone who has a blind spot as regards C++ (despite being able\n&gt; to code in about a dozen languages from Cobol to Ruby I just can&#39;t\n&gt; assimilate C++&#39;s arcane syntax) this is a big plus. I&#39;ve been very\n&gt; impressed indeed by the speed I get from my SharpNEAT models and by\n&gt; the ease with which they were integrated. Not happy with the results,\n&gt; mind, but that&#39;s my problem!\n&gt;   \n\nStill logging those football results Mike? :)\n\nColin.\n\n\n\n\n"}}