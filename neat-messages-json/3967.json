{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":151231063,"authorName":"Joseph Reisinger","from":"Joseph Reisinger &lt;joeraii@...&gt;","profile":"joeraii","replyTo":"LIST","senderId":"xSn7KsUJOzeD_DRd9VLGkUza2QOqoL4zLdM6dAPq9MImbPind8UUjLpNqBlxmthrD0NR8yDrNbSZ0iS_rO-_u2VHqjWG24qs2FmZPYjDtA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: New HyperNEAT Paper in the Domain of Checkers","postDate":"1208608337","msgId":3967,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAzRjREQ0U3LTI2NUMtNDlDRC04N0YyLUM1RkMyQUJGOUZCN0Bjcy51dGV4YXMuZWR1Pg==","inReplyToHeader":"PDE5YjEwZDUxMDgwNDE4MDUwMmg2ZjYzYThmYW9iYWFlMzc1MDM4MWI4MzI4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGZ0cXM1ZytuNDIwQGVHcm91cHMuY29tPiA8QzQyRDBFODQuMjIzQzElamNsdW5lQG1zdS5lZHU+IDwxOWIxMGQ1MTA4MDQxNzExMzdoN2I5ZmUwNTdqODA2YjRjMjM0OTE1MDA3N0BtYWlsLmdtYWlsLmNvbT4gPDk0RTRDMzIwLTYxQTUtNEY1MS1CN0Q5LUM0RTIzMDU0NzQ4OUBjcy51dGV4YXMuZWR1PiA8MTliMTBkNTEwODA0MTgwNTAyaDZmNjNhOGZhb2JhYWUzNzUwMzgxYjgzMjhAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":3966,"nextInTopic":3968,"prevInTime":3966,"nextInTime":3968,"topicId":3942,"numMessagesInTopic":27,"msgSnippet":"... Right, the key point here I think is that UCT is /just/ a pruning method for performing more efficient monte-carlo game tree search. Its basically an","rawEmail":"Return-Path: &lt;joeraii@...&gt;\r\nX-Sender: joeraii@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 86429 invoked from network); 19 Apr 2008 12:32:21 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m55.grp.scd.yahoo.com with QMQP; 19 Apr 2008 12:32:21 -0000\r\nX-Received: from unknown (HELO spunkymail-a10.g.dreamhost.com) (208.97.132.207)\n  by mta15.grp.scd.yahoo.com with SMTP; 19 Apr 2008 12:32:21 -0000\r\nX-Received: from [10.0.1.188] (i219-167-228-13.s04.a013.ap.plala.or.jp [219.167.228.13])\n\t(using TLSv1 with cipher AES128-SHA (128/128 bits))\n\t(No client certificate requested)\n\tby spunkymail-a10.g.dreamhost.com (Postfix) with ESMTP id 34D3B1638DC\n\tfor &lt;neat@yahoogroups.com&gt;; Sat, 19 Apr 2008 05:32:20 -0700 (PDT)\r\nMessage-Id: &lt;03F4DCE7-265C-49CD-87F2-C5FC2ABF9FB7@...&gt;\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;19b10d510804180502h6f63a8faobaae3750381b8328@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\nMime-Version: 1.0 (Apple Message framework v919.2)\r\nDate: Sat, 19 Apr 2008 07:32:17 -0500\r\nReferences: &lt;ftqs5g+n420@...&gt; &lt;C42D0E84.223C1%jclune@...&gt; &lt;19b10d510804171137h7b9fe057j806b4c2349150077@...&gt; &lt;94E4C320-61A5-4F51-B7D9-C4E230547489@...&gt; &lt;19b10d510804180502h6f63a8faobaae3750381b8328@...&gt;\r\nX-Mailer: Apple Mail (2.919.2)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Joseph Reisinger &lt;joeraii@...&gt;\r\nSubject: Re: [neat] Re: New HyperNEAT Paper in the Domain of Checkers\r\nX-Yahoo-Group-Post: member; u=151231063; y=mOtNFQSj8yKEWzvx0ugVmFdevvrHmtHNgilQzOyFNmGgGw\r\nX-Yahoo-Profile: joeraii\r\n\r\n\nOn 2008/04/18, at 7:02, Derek James wrote:\n\n&gt; On Thu, Apr 17, 2008 at 8:25 PM, Joseph Reisinger &lt;joeraii@... \n&gt; &gt; wrote:\n&gt;&gt;\n&gt;&gt; Anyway, I&#39;m curious to know why you believe such methods won&#39;t scale\n&gt;&gt; or generalize well? (sorry I know that sounds like a totally loaded\n&gt;&gt; question now, but I&#39;m genuinely interested in hearing your opinion --\n&gt;&gt; I&#39;ve been keeping an eye on the UCT literature for a while and its\n&gt;&gt; hard to see the world without UCT-colored glasses anymore :P)\n&gt;\n&gt; Hey Joe...yeah, it&#39;s a loaded question, but I&#39;ll give it a shot. :)\n&gt;\n&gt; My current perspective on how humans (and to a lesser extent other\n&gt; species) are able to flexibly learn a wide range of novel cognitive\n&gt; tasks has to do with their ability to encode invariant representations\n&gt; of spatio-temporal patterns, and once acquired, use those encodings to\n&gt; recognize, generate, and predict sequences. I think this general\n&gt; perspective helps frame how people can learn to play tennis, speak\n&gt; Chinese, play the piano, and master games like Go.\n&gt;\n&gt; My understanding of UCT is that it is a method of pruning the search\n&gt; tree for Monte Carlo methods, but in the end you&#39;re still talking\n&gt; about a brute force search of child nodes in a tree, right? I was\n&gt; wondering how MoGo dealt with simple iterative or repeating patterns\n&gt; that arise in Go, like Ko fights and ladders. For those who don&#39;t\n&gt; know, ladders are simple repeating structures that arise in the game\n&gt; that many amateurs can instantly recognize, but which tree-search\n&gt; methods perform extremely poorly at. I think the reason for this is\n&gt; that a human can readily learn an invariant representation of a simple\n&gt; pattern and recognize and predict the outcome regardless of\n&gt; orientation or size of the board.\n\nRight, the key point here I think is that UCT is /just/ a pruning  \nmethod for performing more efficient monte-carlo game tree search. Its  \nbasically an extension of monte-carlo methods in the same way that  \nalpha-beta is an extension of standard brute-force search. The  \ncleverness of MoGo comes in via heuristics which encode things like  \nlocation and rotation invariant representations and hence provides  \nboth a way to generalize from a small amount of experience (e.g.  \nexploit symmetries) and also to bias the MC search towards &quot;more  \npromising&quot; parts of the game tree (e.g. exploit heuristic knowledge of  \nladders). These representations themselves aren&#39;t learned directly (as  \nfar as I have seen) but the potential is of course there, and in  \nparticular there is nothing inherent in the UCT framework itself  \npreventing this from happening. Since UCT is basically just a  \nframework for performing biased random search, I don&#39;t really agree  \nthat its not scalable. Scalability comes from providing a stronger  \nsearch bias. Stronger search biases are formed by generalizing  \nacquired knowledge.\n\nAnyway, to my main point: I think the idea of biased random search in  \nUCT is actually very intuitive and useful both in enhancing the  \nabilities of AI search as well as in understanding how humans play.  \nThe former is sort of obvious given how well UCT-based algorithms  \nperform in practice and the latter stems directly from the notion of  \nbias: If the heuristics we have don&#39;t provide any information about  \nthe value of a board-position, the only thing we can do is play  \nrandomly until we learn about that value. If the heuristics provide  \nweak information, then we play randomly, but slightly biased by this  \nweak knowledge (e.g. &quot;I know that a lot of the time this kind of move  \nworks pretty well.....&quot;), etc. I think this idea of degree of bias and  \nconfidence in heuristic scoring really does to a large extent underly  \nhow humans reason about these kinds of games.\n\nSo, hopefully I can at least convince at least some of the people in  \nthis group to read the paper I posted earlier; these algorithms really  \nare profoundly interesting, not because of their inherent properties  \nper se, but because of the way they allow us to frame the more  \ninteresting questions, like learning representation.\n\n&gt;\n&gt;\n&gt; A quick scan of the Computer Go discussion group on the issue makes it\n&gt; sound like this is a reasonably correct assessment, and that\n&gt; programmers generally include some kind of ad hoc mechanism for coping\n&gt; with things like ladders. This explains why MoGo can do reasonably\n&gt; well when powered by a supercomputer in playing on a 9x9 board, since\n&gt; structures like ladders are limited in size.\n&gt;\n&gt; So my criticism of an algorithm like MoGo would probably boil down to\n&gt; &quot;Where is its representation of a ladder?&quot; And if that representation\n&gt; is not at all part of its core algorithm, that&#39;s where my skepticism\n&gt; enters that the methodology will not scale very well, either to larger\n&gt; Go boards or to other domains. I think the ability to encode and\n&gt; employ invariant representations of patterns is the root of the\n&gt; problem, and the whole class of MC methods seems in the spirit of\n&gt; traditional AI approaches which I just don&#39;t think are going to do the\n&gt; job.\n&gt;\n&gt; --Derek\n&gt;\n&gt; --------------\n\n"}}