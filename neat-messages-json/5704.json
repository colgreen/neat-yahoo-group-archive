{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":159465226,"authorName":"Matthew_Hausknecht","from":"&quot;Matthew_Hausknecht&quot; &lt;matthew_hausknecht@...&gt;","profile":"Matthew_Hausknecht","replyTo":"LIST","senderId":"0vfL-vElfm2wUEdjV1uDZxmigo1D0qe1W8Y5PycYe5PWYfFmZTVSuNg4M8D4_v8P7cztMZAUVSY3lFrz8f8nMjIb2rUJ0lj0RMevqir78ZwvAa7L6Gg83gJI","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Hyperneat Network Output Layer All Zero","postDate":"1321927561","msgId":5704,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGphZjAyOStpbHJxQGVHcm91cHMuY29tPg==","inReplyToHeader":"PENBRUI1NXRYSnFyK0J6c0V0ZlpxRzh0Y3NObkVwSlgzc3VfZUpFalpCU0UzR1J4T0hnUUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":5703,"nextInTopic":5705,"prevInTime":5703,"nextInTime":5705,"topicId":5699,"numMessagesInTopic":7,"msgSnippet":"I am not using the GPU version. It is the case that after the substrate.populateSubstrate(individual) call, all of the weights in the network are zero -- which","rawEmail":"Return-Path: &lt;matthew_hausknecht@...&gt;\r\nX-Sender: matthew_hausknecht@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 13681 invoked from network); 22 Nov 2011 02:06:03 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.sp2.yahoo.com with QMQP; 22 Nov 2011 02:06:03 -0000\r\nX-Received: from unknown (HELO ng14-ip2.bullet.mail.bf1.yahoo.com) (98.139.165.118)\n  by mta2.grp.sp2.yahoo.com with SMTP; 22 Nov 2011 02:06:03 -0000\r\nX-Received: from [98.139.164.126] by ng14.bullet.mail.bf1.yahoo.com with NNFMP; 22 Nov 2011 02:06:02 -0000\r\nX-Received: from [69.147.65.148] by tg7.bullet.mail.bf1.yahoo.com with NNFMP; 22 Nov 2011 02:06:02 -0000\r\nX-Received: from [98.137.34.73] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 22 Nov 2011 02:06:02 -0000\r\nDate: Tue, 22 Nov 2011 02:06:01 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;jaf029+ilrq@...&gt;\r\nIn-Reply-To: &lt;CAEB55tXJqr+BzsEtfZqG8tcsNnEpJX3su_eJEjZBSE3GRxOHgQ@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Matthew_Hausknecht&quot; &lt;matthew_hausknecht@...&gt;\r\nSubject: Re: Hyperneat Network Output Layer All Zero\r\nX-Yahoo-Group-Post: member; u=159465226; y=KPmgWPIVDa0L_m7elRvLJoGEf-WFFIn-OGBldpGMzWd6pJ9iaCUywvlQ3e4k\r\nX-Yahoo-Profile: Matthew_Hausknecht\r\n\r\nI am not using the GPU version. It is the case that after the substrate.pop=\r\nulateSubstrate(individual) call, all of the weights in the network are zero=\r\n -- which explains why all the output nodes are also zero. If I&#39;m correct, =\r\nthe weights of the network are a function of the individual&#39;s CPPN so perha=\r\nps this individual was pretty uninteresting. However, after running for man=\r\ny generations none of the individuals produce non-zero weights.\n\n--- In nea=\r\nt@yahoogroups.com, Jason Gauci &lt;jgmath2000@...&gt; wrote:\n&gt;\n&gt; In the populates=\r\nubstrate function make sure the substrate has some nonzero\n&gt; weights.\n&gt; \n&gt; =\r\nAre you using the gpu version?\n&gt; On Nov 21, 2011 4:50 PM, &quot;Matthew_Hausknec=\r\nht&quot; &lt;matthew_hausknecht@...&gt;\n&gt; wrote:\n&gt; \n&gt; &gt; **\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Thanks for the =\r\nsuggestions Jeff. In my case I have only one layer of\n&gt; &gt; hidden nodes. Whe=\r\nn printing them out for debugging purposes they are all\n&gt; &gt; zero after upda=\r\nte is called (also tried calling update multiple times with\n&gt; &gt; no success)=\r\n.\n&gt; &gt;\n&gt; &gt; --- In neat@yahoogroups.com, Jeff Clune &lt;jeffclune@&gt; wrote:\n&gt; &gt; &gt;=\r\n\n&gt; &gt; &gt; Hello. Make sure you are doing enough updates of the phenotype neura=\r\nl\n&gt; &gt; net to propagate the info all the way through the network....for debu=\r\ngging\n&gt; &gt; you may wish to print out the values of the first hidden layer af=\r\nter one\n&gt; &gt; update...and possibly the values at each hidden layer after eac=\r\nh\n&gt; &gt; update...so you can see what is going on. Or just make sure to have t=\r\nhe\n&gt; &gt; number of updates be greater than or equal to the number of hidden l=\r\nayers.\n&gt; &gt; That might not be your issue, but that is a common mistake.\n&gt; &gt; =\r\n&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Best regards,\n&gt; &gt; &gt; Jeff Clune\n&gt; &gt; &gt;\n&gt; &gt; &gt; Postdoctoral Fello=\r\nw\n&gt; &gt; &gt; Hod Lipson&#39;s Creative Machines Laboratory\n&gt; &gt; &gt; Cornell University\n=\r\n&gt; &gt; &gt; jeffclune@\n&gt; &gt; &gt; jeffclune.com\n&gt; &gt; &gt;\n&gt; &gt; &gt; On Nov 21, 2011, at 5:57 P=\r\nM, Matthew_Hausknecht wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Hi, I&#39;m trying to run Hyperneat =\r\non a simple Atari game and was\n&gt; &gt; starting out by replicating some of the =\r\nexperiment examples. My code\n&gt; &gt; compiles and runs, but the value of the ou=\r\ntput node in the network always\n&gt; &gt; seems to be zero. I suspect I am doing =\r\nsomething wrong in the\n&gt; &gt; initalization/update step, but I&#39;m not sure what=\r\n... Code is as follows:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; #include &quot;HCUBE_Defines.h&quot;\n&gt; &gt; &gt; &gt;\n=\r\n&gt; &gt; &gt; &gt; #include &quot;Experiments/HCUBE_AtariExperiment.h&quot;\n&gt; &gt; &gt; &gt; #include &lt;bo=\r\nost/foreach.hpp&gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; using namespace NEAT;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; enum=\r\n GamePositionValue {\n&gt; &gt; &gt; &gt; EMPTY,\n&gt; &gt; &gt; &gt; CHICKEN,\n&gt; &gt; &gt; &gt; VEHICLE\n&gt; &gt; &gt; =\r\n&gt; };\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; namespace HCUBE\n&gt; &gt; &gt; &gt; {\n&gt; &gt; &gt; &gt; AtariExperiment::Ata=\r\nriExperiment(string _experimentName,int _threadID):\n&gt; &gt; &gt; &gt; Experiment(_exp=\r\nerimentName,_threadID)\n&gt; &gt; &gt; &gt; {\n&gt; &gt; &gt; &gt; layerInfo =3D NEAT::LayeredSubstra=\r\nteInfo();\n&gt; &gt; &gt; &gt; layerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));\n&gt; &gt; &gt; =\r\n&gt; layerInfo.layerIsInput.push_back(true);\n&gt; &gt; &gt; &gt; layerInfo.layerLocations.=\r\npush_back(Vector3&lt;float&gt;(0,0,0));\n&gt; &gt; &gt; &gt; layerInfo.layerNames.push_back(&quot;I=\r\nnput&quot;);\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; layerInfo.layerSizes.push_back(Vector2&lt;int&gt;(8,8));\n=\r\n&gt; &gt; &gt; &gt; layerInfo.layerIsInput.push_back(false);\n&gt; &gt; &gt; &gt; layerInfo.layerLoc=\r\nations.push_back(Vector3&lt;float&gt;(0,4,0));\n&gt; &gt; &gt; &gt; layerInfo.layerNames.push_=\r\nback(&quot;Output&quot;);\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; layerInfo.layerAdjacencyList.push_back(=\r\nstd::pair&lt;string,string&gt;(&quot;Input&quot;,&quot;Output&quot;));\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; layerInfo.norm=\r\nalize =3D true;\n&gt; &gt; &gt; &gt; layerInfo.useOldOutputNames =3D false;\n&gt; &gt; &gt; &gt; laye=\r\nrInfo.layerValidSizes =3D layerInfo.layerSizes;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; substrate =\r\n=3D NEAT::LayeredSubstrate&lt;float&gt;();\n&gt; &gt; &gt; &gt; substrate.setLayerInfo(layerIn=\r\nfo);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; NEAT::GeneticPopulation* AtariExperiment::cr=\r\neateInitialPopulation(int\n&gt; &gt; populationSize) {\n&gt; &gt; &gt; &gt; GeneticPopulation *=\r\npopulation =3D new GeneticPopulation();\n&gt; &gt; &gt; &gt; vector&lt;GeneticNodeGene&gt; gen=\r\nes;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;Bias&quot;,&quot;NetworkSensor&quot;,=\r\n0,false));\n&gt; &gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;X1&quot;,&quot;NetworkSensor&quot;,0,f=\r\nalse));\n&gt; &gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;X2&quot;,&quot;NetworkSensor&quot;,0,fals=\r\ne));\n&gt; &gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;Y1&quot;,&quot;NetworkSensor&quot;,0,false))=\r\n;\n&gt; &gt; &gt; &gt; genes.push_back(GeneticNodeGene(&quot;Y2&quot;,&quot;NetworkSensor&quot;,0,false));\n&gt;=\r\n &gt; &gt; &gt;\n&gt; &gt; genes.push_back(GeneticNodeGene(&quot;Output&quot;,&quot;NetworkOutputNode&quot;,1,f=\r\nalse,ACTIVATION_FUNCTION_SIGMOID));\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; for (int a=3D0;a&lt;popula=\r\ntionSize;a++) {\n&gt; &gt; &gt; &gt; shared_ptr&lt;GeneticIndividual&gt; individual(new\n&gt; &gt; Ge=\r\nneticIndividual(genes,true,1.0));\n&gt; &gt; &gt; &gt; for (int b=3D0;b&lt;0;b++) {\n&gt; &gt; &gt; &gt;=\r\n individual-&gt;testMutate();\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; population-&gt;addIndividual(indi=\r\nvidual);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; cout &lt;&lt; &quot;Finished creating population&#92;n&quot;=\r\n;\n&gt; &gt; &gt; &gt; return population;\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; void\n&gt; &gt; AtariExperi=\r\nment::populateSubstrate(shared_ptr&lt;NEAT::GeneticIndividual&gt;\n&gt; &gt; individual)=\r\n {\n&gt; &gt; &gt; &gt; if (currentSubstrateIndividual =3D=3D individual)\n&gt; &gt; &gt; &gt; return=\r\n;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; currentSubstrateIndividual =3D individual;\n&gt; &gt; &gt; &gt; substr=\r\nate.populateSubstrate(individual);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; void AtariExpe=\r\nriment::processGroup(shared_ptr&lt;NEAT::GeneticGeneration&gt;\n&gt; &gt; generation)\n&gt; =\r\n&gt; &gt; &gt; {\n&gt; &gt; &gt; &gt; shared_ptr&lt;NEAT::GeneticIndividual&gt; individual =3D group.fr=\r\nont();\n&gt; &gt; &gt; &gt; //You get 10 points just for being processed, wahooo!\n&gt; &gt; &gt; =\r\n&gt; individual-&gt;setFitness(10);\n&gt; &gt; &gt; &gt; populateSubstrate(individual);\n&gt; &gt; &gt; =\r\n&gt; runAtariEpisode(individual);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; void\n&gt; &gt; AtariExpe=\r\nriment::runAtariEpisode(shared_ptr&lt;NEAT::GeneticIndividual&gt;\n&gt; &gt; individual)=\r\n {\n&gt; &gt; &gt; &gt; GamePositionValue gameState[8][8];\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; int chic_x =\r\n=3D 4, chic_y =3D 7;\n&gt; &gt; &gt; &gt; float total_reward =3D 0.0;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; //=\r\n Initialize Game\n&gt; &gt; &gt; &gt; for (int x=3D0;x&lt;8;x++) {\n&gt; &gt; &gt; &gt; for (int y=3D0;y=\r\n&lt;8;y++) {\n&gt; &gt; &gt; &gt; gameState[x][y] =3D EMPTY;\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; ga=\r\nmeState[chic_x][chic_y] =3D CHICKEN;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; // Run simulation for =\r\nt timesteps\n&gt; &gt; &gt; &gt; int num_timesteps =3D 10;\n&gt; &gt; &gt; &gt; for (int t=3D0; t&lt;num=\r\n_timesteps; t++) {\n&gt; &gt; &gt; &gt; substrate.getNetwork()-&gt;reinitialize();\n&gt; &gt; &gt; &gt; =\r\nsubstrate.getNetwork()-&gt;dummyActivation();\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; // Set substrate=\r\n values\n&gt; &gt; &gt; &gt; for (int x=3D0; x&lt;8; ++x) {\n&gt; &gt; &gt; &gt; for (int y=3D0; y&lt;8; ++=\r\ny) {\n&gt; &gt; &gt; &gt; // if (gameState[x][y] =3D=3D CHICKEN) {\n&gt; &gt; &gt; &gt; // substrate.=\r\nsetValue((Node(x,y,0)), 1.0);\n&gt; &gt; &gt; &gt; // } else if (gameState[x][y] =3D=3D =\r\nVEHICLE) {\n&gt; &gt; &gt; &gt; // substrate.setValue((Node(x,y,0)), -1.0);\n&gt; &gt; &gt; &gt; // }=\r\n else {\n&gt; &gt; &gt; &gt; // substrate.setValue((Node(x,y,0)), 0.0);\n&gt; &gt; &gt; &gt; // }\n&gt; &gt;=\r\n &gt; &gt; substrate.setValue((Node(x,y,0)), (float)((7.0-y)/7.0));\n&gt; &gt; &gt; &gt; }\n&gt; &gt;=\r\n &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; substrate.getNetwork()-&gt;update();\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; fo=\r\nr (int x=3D0; x&lt;8; ++x) {\n&gt; &gt; &gt; &gt; for (int y=3D0; y&lt;8; ++y) {\n&gt; &gt; &gt; &gt; float=\r\n val =3D substrate.getValue((Node(x,y,1)));\n&gt; &gt; &gt; &gt; if (val !=3D 0)\n&gt; &gt; &gt; &gt;=\r\n printf(&quot;Got Nonzero val %f at %d,%d&#92;n&quot;,val,x,y);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt;=\r\n &gt; float chicken_val =3D substrate.getValue((Node(chic_x,chic_y,1)));\n&gt; &gt; &gt;=\r\n &gt; float down_val =3D (chic_y =3D=3D 7) ? chicken_val :\n&gt; &gt; substrate.getVa=\r\nlue((Node(chic_x,chic_y+1,1)));\n&gt; &gt; &gt; &gt; float up_val =3D (chic_y =3D=3D 0) =\r\n? chicken_val :\n&gt; &gt; substrate.getValue((Node(chic_x,chic_y-1,1)));\n&gt; &gt; &gt; &gt;\n=\r\n&gt; &gt; &gt; &gt; int action;\n&gt; &gt; &gt; &gt; if (chicken_val &gt;=3D up_val) {\n&gt; &gt; &gt; &gt; if (chic=\r\nken_val &gt;=3D down_val) {\n&gt; &gt; &gt; &gt; action =3D 0;\n&gt; &gt; &gt; &gt; } else {\n&gt; &gt; &gt; &gt; act=\r\nion =3D +1;\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; } else {\n&gt; &gt; &gt; &gt; if (up_val &gt;=3D down_val) {\n=\r\n&gt; &gt; &gt; &gt; action =3D -1;\n&gt; &gt; &gt; &gt; } else {\n&gt; &gt; &gt; &gt; action =3D 1;\n&gt; &gt; &gt; &gt; }\n&gt; &gt;=\r\n &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; // Update game state with action\n&gt; &gt; &gt; &gt; gameState[c=\r\nhic_x][chic_y] =3D EMPTY;\n&gt; &gt; &gt; &gt; gameState[chic_x][chic_y+action] =3D CHIC=\r\nKEN;\n&gt; &gt; &gt; &gt; chic_y +=3D action;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; // Compute reward\n&gt; &gt; &gt; &gt; =\r\nif (chic_y =3D=3D 0) {\n&gt; &gt; &gt; &gt; total_reward +=3D 1.0;\n&gt; &gt; &gt; &gt; // Reset the =\r\nsim\n&gt; &gt; &gt; &gt; gameState[chic_x][chic_y] =3D EMPTY;\n&gt; &gt; &gt; &gt; gameState[chic_x][=\r\n7] =3D CHICKEN;\n&gt; &gt; &gt; &gt; chic_y =3D 7;\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt; //cout &lt;&lt;=\r\n &quot;Got total reward: &quot; &lt;&lt; total_reward &lt;&lt; endl;\n&gt; &gt; &gt; &gt; individual-&gt;reward(t=\r\notal_reward);\n&gt; &gt; &gt; &gt; }\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;  \n&gt; &gt;\n&gt;\n\n\n\n"}}