{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":29390171,"authorName":"Mattias Fagerlund","from":"&quot;Mattias Fagerlund&quot; &lt;mattias@...&gt;","profile":"mattias_fagerlund","replyTo":"LIST","senderId":"xj59zEQkViVM1bmXPr0RashserBlcAlUeQiFptAZKv_fSkN_2KDLBtW58MozTjrJojx5fRcliOdXGb94WEpgZnhPi3v_YeqbYctvxg17Z-Z5DkfG3g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Delphi NEAT","postDate":"1075838206","msgId":368,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFdvcmxkQ2xpZW50LUYyMDA0MDIwMzIwNTYuQUE1NjQ2MDI2M0BjYW1icmlhbmxhYnMuY29tPg==","inReplyToHeader":"PGJ2b3Rocys0NHE0QGVHcm91cHMuY29tPg==","referencesHeader":"PFdvcmxkQ2xpZW50LUYyMDA0MDIwMzEwNDcuQUE0NzA5MDI0OEBjYW1icmlhbmxhYnMuY29tPiA8YnZvdGhzKzQ0cTRAZUdyb3Vwcy5jb20+"},"prevInTopic":367,"nextInTopic":369,"prevInTime":367,"nextInTime":369,"topicId":365,"numMessagesInTopic":6,"msgSnippet":"... I m sorry, I was referring to genes (they re identified by their innovation id). Genes (both nodes and connections) are sorted by their innovation id. When","rawEmail":"Return-Path: &lt;mattias@...&gt;\r\nX-Sender: mattias@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 23913 invoked from network); 3 Feb 2004 19:53:20 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m11.grp.scd.yahoo.com with QMQP; 3 Feb 2004 19:53:20 -0000\r\nReceived: from unknown (HELO endeavour.mit.um.bostream.net) (81.26.227.9)\n  by mta6.grp.scd.yahoo.com with SMTP; 3 Feb 2004 19:53:20 -0000\r\nReceived: from bredin.nu (h135n2c1o838.bredband.skanova.com [81.227.1.135])\n\tby endeavour.mit.um.bostream.net (Postfix) with ESMTP id ACFF46802C\n\tfor &lt;neat@yahoogroups.com&gt;; Tue,  3 Feb 2004 20:53:18 +0100 (CET)\r\nReceived: from WorldClient ([127.0.0.1])\n\t(authenticated user mattias@...)\n\tby bredin.nu (bredin.nu [127.0.0.1])\n\t(MDaemon.PRO.v6.8.5.R)\n\twith ESMTP id 43-md50000000031.tmp\n\tfor &lt;neat@yahoogroups.com&gt;; Tue, 03 Feb 2004 20:56:46 +0100\r\nReceived: from [127.0.0.1] via WorldClient with HTTP;\n\tTue, 03 Feb 2004 20:56:46 +0100\r\nDate: Tue, 03 Feb 2004 20:56:46 +0100\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;WorldClient-F200402032056.AA56460263@...&gt;\r\nX-Mailer: WorldClient 6.8.5\r\nIn-Reply-To: &lt;bvoths+44q4@...&gt;\r\nReferences: &lt;WorldClient-F200402031047.AA47090248@...&gt; &lt;bvoths+44q4@...&gt;\r\nX-Authenticated-Sender: mattias@...\r\nX-Spam-Processed: bredin.nu, Tue, 03 Feb 2004 20:56:46 +0100\n\t(not processed: message from valid local sender)\r\nX-MDRemoteIP: 127.0.0.1\r\nX-Return-Path: mattias@...\r\nX-MDaemon-Deliver-To: neat@yahoogroups.com\r\nX-eGroups-Remote-IP: 81.26.227.9\r\nFrom: &quot;Mattias Fagerlund&quot; &lt;mattias@...&gt;\r\nSubject: Re: [neat] Re: Delphi NEAT\r\nX-Yahoo-Group-Post: member; u=29390171\r\nX-Yahoo-Profile: mattias_fagerlund\r\n\r\n&gt; Do you keep the list of innovations around forever or do you delete it\n&gt; after each generation?\n\nI&#39;m sorry, I was referring to genes (they&#39;re identified by their \ninnovation id). Genes (both nodes and connections) are sorted by their \ninnovation id. When determining species / unrelatedness, the process of \ncomparing nodes and connections is time consuming for large genomes. \nThis improvement came about when I was testing OCR - about 100 inputs \nand 26 outputs =&gt; 2600 genes to compare to determine species.\n\nI outlined a simple method that&#39;s O(m * ln(n)), where m is the number of \ngenes in genome 1 and n is the number of genes in genome 2. Now, this is \nobviously (?) still wasteful, since both lists are sorted. \n\nI actually run down gene list 1 and gene list 2, making sure they&#39;re in \nsynch, and then I compare away. Which is O(m+n) - vastly superior to the \nprevious O(m * n) for large genomes. For smaller genomes, the work of \nkeeping the gene list sorted cancels out the performance boost of having \na sorted list during the comparison.\n\nWith the original method, O(m * n) = O( 2600 * 2600) =&gt; very slow. New \nmethod = O(m + n) = O(2600 + 2600) =&gt; much better.\n\nPerhaps this is the way original NEAT always behaved, but DelphiNEAT \ndidn&#39;t.\n\ncheers,\nm\n\n\n"}}