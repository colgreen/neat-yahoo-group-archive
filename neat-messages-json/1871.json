{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"s6NU3D4Z0dB9GMXw-E60IC1AjOWSMQUTOZG0jqTIoLdn3UWD1AaJP0_Se35fHZVT4_y769gOpLhlgGsbscs6_D-psxm4b5Efv5U","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Modularity and interfaces","postDate":"1108489386","msgId":1871,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4wLjE0LjAuMjAwNTAyMTUxMTM2MjQuMDNjMzQwMDhAcG9wLm1haWwueWFob28uY28udWs+","inReplyToHeader":"PGN1cjlibCtiZnY0QGVHcm91cHMuY29tPg==","referencesHeader":"PDYuMi4wLjE0LjAuMjAwNTAyMDcxMTQ2NTAuMDNiY2ViZTBAcG9wLm1haWwueWFob28uY28udWs+IDxjdXI5YmwrYmZ2NEBlR3JvdXBzLmNvbT4="},"prevInTopic":1870,"nextInTopic":1872,"prevInTime":1870,"nextInTime":1872,"topicId":1853,"numMessagesInTopic":13,"msgSnippet":"Hi,\n\n Basically what I m saying is it would be interesting to hear about\n simple experiments that test the power of modular systems.  Also,\n I d be especially","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 60558 invoked from network); 15 Feb 2005 17:40:39 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m21.grp.scd.yahoo.com with QMQP; 15 Feb 2005 17:40:39 -0000\r\nReceived: from unknown (HELO smtp002.mail.ukl.yahoo.com) (217.12.11.33)\n  by mta3.grp.scd.yahoo.com with SMTP; 15 Feb 2005 17:40:38 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp002.mail.ukl.yahoo.com with SMTP; 15 Feb 2005 17:40:35 -0000\r\nMessage-Id: &lt;6.2.0.14.0.20050215113624.03c34008@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.0.14\r\nDate: Tue, 15 Feb 2005 17:43:06 +0000\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;cur9bl+bfv4@...&gt;\r\nReferences: &lt;6.2.0.14.0.20050207114650.03bcebe0@...&gt;\n &lt;cur9bl+bfv4@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.33\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Re: Modularity and interfaces\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi,\n\n&gt;Basically what I&#39;m saying is it would be interesting to hear about\n&gt;simple experiments that test the power of modular systems.  Also,\n&gt;I&#39;d be especially interested in problems that are not board games.\n&gt;While board games certainly demonstrate something, they are\n&gt;frequently very difficult for a variety of reasons that are not\n&gt;related to modularity, meaning the results can be confounded.  Is\n&gt;there some kind of experiment that really separates the modularity\n&gt;aspect out cleanly and clearly?\n\n         We seem to see eye-to-eye on this!\n\n         The first problem we have is that there are different types of \nmodularity.\n\n         This will look a lot more complex than it really is, as all I have \nhere really is a quick review of ways in which modules could be \nimplemented.  I&#39;m only going to the trouble of listing them out because \nthere are more than I expected, so it might be useful both for your own \nthoughts, and also maybe to give us some nice jargon to discuss it with :)\n\n         (I&#39;ll talk about &quot;genes&quot; and &quot;genome&quot; here with not particular \nprejudice towards any particular type).\n\n1) We can classify by concept:\n\ninheritance module --\n         where a group of genes tend to be inherited together,\n         irrespective of how that happens (e.g mechanically or\n         by selection) or whether they encode related\n         functions\n\n         an additional aspect of this might be that, for\n         example, the group also has a good chance of being\n         completely duplicated (as opposed to partially\n         duplicated) by a gene-duplication mutation (but is\n         that then two modules, or two copies of the same\n         module?)\n\nfunctional module --\n         where a group of genes encode related functions but\n         may not be inherited together\n\ntopological module --\n         where some aspect of network topology marks as\n         set of neurones (and hence the corresponding\n         genes) as a module\n\n--\n\n2) Or we can classify in terms of the context in which the modularity is \nexploited:\n\nevolutionary module --\n         where we see the module remain together in spite\n         of changing external connections over multiple\n         generations and (if we can prove it) contribute to the\n         efficiency of the process\n\nlearning module --\n         where the module remains internally undisrupted but\n         its external context is switched as the network\n         learns (if we are using learning by evolution then this\n         is not distinct from the previous; if we are using a\n         single-lifetime learning technique then this might\n         require &quot;routing&quot; before a module _can_ get a\n         different context without mutation)\n\nprocessing module -\n         where even in non-learning situations, the context\n         of the module changes during network evaluation\n         (e.g. if the module is scanned over a range of  inputs)\n\n--\n\n3) Or we can classify according to how the connections to the module are \nformed:\n\ngenetically linked\n         individual genes directly encode static connections\n\ndevelopmentally linked\n         genes encode rules for forming static connections\n\nlearning linked\n         connections to the module can be altered during\n         one lifetime, as a result of learning\n\ndynamically linked\n         where we have some sort of &quot;routing&quot; and\n         connections can be altered during evaluation, even\n         without learning\n\nexternally linked\n         where the some external agency defines module\n         connections (e.g. the programmer or another\n         algorithm)\n\n--\n\n4) Or we can classify them according to how they are &quot;instanced&quot;:\n\nsingle instance\n         one copy of the module\n\nmultiple instance by input\n         one copy of the module for each different input\n         context it is bound to (&quot;input context&quot; because,\n         given the possibility of &quot;routing&quot;, it may not be as\n         simple as a concrete set of inputs)\n\nmultiple instance by user\n         one copy of the module for each context it outputs\n         into\n\nmultiple instance by IO\n         combination of both of the preceding, e.g. most\n         plausibly where there are &quot;function semantics&quot; and\n         the same &quot;user&quot; module provides both the input and\n         takes the output\n\nmultiple by other\n         multiple instances for some other reason, such as\n         just wanting 10 copies so that they can be\n         specialized into different functions later\n\n--------------------\n\nThe first of these is only useful philosophically, or to discuss partial \nsuccesses, because a real success will combine have both the inheritance \nand functional properties, and (very probably) the topological as well.\n\nThe others allow us to distinguish different approaches, e.g., a roving eye \napproach is:\n\n1) all three (by default)\n2) a processing module\n         (and also an evolutionary module, but only by default, being the \nwhole network)\n3) externally and dynamically linked\n         (external because we go outside the network to shift the view, \ndynamic because it is the network which decides how to shift it)\n4) single instance\n\nI guess the type of modularity most to do with consciousness is:\n\n1) inherited, very very probably functional, topology - who knows\n2) learning and processing modules\n3) developmentally, learning and dynamically linked (the last open to debate)\n4) multiple instances by ?????\n\nWhich is so far beyond the state of the art that its only of academic \ninterest.  However, I would think that a reasonable start point if we want \nproof of concept experiments is:\n\n1) cheat with the inheritance/topology and leave the function to evolve\n2) evolutionary module\n3) genetically linked\n4) single instance\n\nAnd just one module with one &quot;user&quot;.\n\nAnd then move on to either not cheating with point 1, or else more modules \nor users (with a proviso that simple genetic linkage may not be enough for \nmultiple modules/users).\n\nI&#39;ll get some ideas for actual experiments together over the next week or so...\n\n         Ian\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n\r\n\n"}}