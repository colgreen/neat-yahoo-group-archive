{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"hiY6zn8LZ7m7Cg7nOSCQBi4irKGhOQWT70p19WkZK6zLQcCdW5cn3y0NX-WUGWMe8WaHpZnVTfLO5XXi7Y9qZIv_jLBMNK6Evg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Performance Sensitivity to float precision","postDate":"1096223702","msgId":1600,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxNTcwQkQ2LjIwOTA0QGRzbC5waXBleC5jb20+","inReplyToHeader":"PDYuMS4yLjAuMC4yMDA0MDkyMzEwNTg0OS4wMjRmOGUxOEBwb3AubWFpbC55YWhvby5jby51az4=","referencesHeader":"PDYuMS4yLjAuMC4yMDA0MDkyMTEwNTgxMS4wMjU4YzAwOEBwb3AubWFpbC55YWhvby5jby51az4gPDIwMDQwOTIwMTcwMzA0LjY5MTMyLnFtYWlsQHdlYjYwODA3Lm1haWwueWFob28uY29tPiA8NDE0RjQ1QkYuODAxMDQwM0Bkc2wucGlwZXguY29tPiA8Ni4xLjIuMC4wLjIwMDQwOTIxMTA1ODExLjAyNThjMDA4QHBvcC5tYWlsLnlhaG9vLmNvLnVrPiA8NS4xLjAuMTQuMC4yMDA0MDkyMTIxNDMzNy4wMjE0ZmJkMEBwb3AubWFpbC55YWhvby5jby51az4gPDQxNTFGODg3LjIwMzAyMDJAZHNsLnBpcGV4LmNvbT4gPDYuMS4yLjAuMC4yMDA0MDkyMzEwNTg0OS4wMjRmOGUxOEBwb3AubWFpbC55YWhvby5jby51az4="},"prevInTopic":1591,"nextInTopic":0,"prevInTime":1599,"nextInTime":1601,"topicId":1555,"numMessagesInTopic":16,"msgSnippet":"... [sound of penny dropping] Sorry yeh I wrongly equated fixed point with integer maths in my head. ... Yes I see the distinction now. ... Yeh I didn t spot","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 49803 invoked from network); 26 Sep 2004 18:35:07 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m21.grp.scd.yahoo.com with QMQP; 26 Sep 2004 18:35:07 -0000\r\nReceived: from unknown (HELO shockwave.systems.pipex.net) (62.241.160.9)\n  by mta6.grp.scd.yahoo.com with SMTP; 26 Sep 2004 18:35:06 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby shockwave.systems.pipex.net (Postfix) with ESMTP id 3C5EA1C002EF\n\tfor &lt;neat@yahoogroups.com&gt;; Sun, 26 Sep 2004 19:35:01 +0100 (BST)\r\nMessage-ID: &lt;41570BD6.20904@...&gt;\r\nDate: Sun, 26 Sep 2004 19:35:02 +0100\r\nUser-Agent: Mozilla Thunderbird 0.7.1 (Windows/20040626)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;6.1.2.0.0.20040921105811.0258c008@...&gt; &lt;20040920170304.69132.qmail@...&gt; &lt;414F45BF.8010403@...&gt; &lt;6.1.2.0.0.20040921105811.0258c008@...&gt; &lt;5.1.0.14.0.20040921214337.0214fbd0@...&gt; &lt;4151F887.2030202@...&gt; &lt;6.1.2.0.0.20040923105849.024f8e18@...&gt;\r\nIn-Reply-To: &lt;6.1.2.0.0.20040923105849.024f8e18@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.9\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Performance Sensitivity to float precision\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nIan Badcoe wrote:\n\n&gt;Maybe you&#39;re not familiar with the term &quot;fixed point maths&quot;.  It&#39;s maths, \n&gt;done using integers, but implementing a fixed number of binary places in \n&gt;each value, thus, if we wanted 3 b.p.:\n&gt;\n&gt;add:\n&gt;         int1 + int2\n&gt;\n&gt;multiply:\n&gt;         (int1 * int2) &gt;&gt; 3\n&gt;\n&gt;divide:\n&gt;         ((int1 &lt;&lt; 3) / int2\n&gt;\n&gt;etc etc\n&gt;\n&gt;It&#39;s much cheaper than emulating floating point but it needs careful \n&gt;consideration of ranges.\n&gt;  \n&gt;\n[sound of penny dropping] Sorry yeh I wrongly equated fixed point with \ninteger maths in my head.\n\n&gt;What we did later in our emails was effectively a fixed-point \n&gt;implementation, but you cleverly avoided renormalising (shifts) throughout \n&gt;the whole system until you hit the activation function.  \n&gt;\nYes I see the distinction now.\n\n&gt;&gt;Ok yep, so lets try and wrap this one up:\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;Cool.  One thing I messed (not sure whether you would find it obvious) but \n&gt;the activation function has to be located tightly enough about x=0 that \n&gt;even a neurone with only one input can reach the flat regions.  Thus we \n&gt;need the flat parts of the activation curve to start inside +/- 0x1000000.\n&gt;  \n&gt;\nYeh I didn&#39;t spot that one.\n\n&gt;Not sure I see how your piecemeal function works, did you miss the outer \n&gt;clauses off?\n&gt;  \n&gt;\nIn my first attempt the outer clauses were  unecesssary because the \nsigmoid is a long slope that covers the whole range of the x-axis \n(+-2^31), so the two remaining clauses cover the whole range. If you \nlook at my next email with the steepened sigmoid you can see I had to \nre-introduce them. In fact lets modify it so the sigmoid is within the \nrange +- 0x1000000 as you suggest...\n\nIt took some time to get my head around this, infact I may have got my \nprevious revision slightly wrong but it&#39;s actually quite straightforward.\n\n---------------------------------------\n\nif( x &lt; -0x1000000 )\n{\n    return 0x0;\n}\nelse if( x &lt; 0x0 )\n{\n    // Scale x down to a max of 2^15 so it won&#39;t overflow when we square it.\n    // Within this condition part, x has a max of 2^24, 24-15=9, so divide by\n    // 2^9.  Then translate the value up into the +ve.\n    int tmp = (x&gt;&gt;9) + 0x8000;\n\n    // Square tmp to generate the curve. max result is 2^30. Expected max output \n    // for this half of the curve is 2^11. 30-11=19, so...\n    return ((tmp*tmp)&gt;&gt;19);\n}\nelse if( x &lt; 0x1000000 )\n{\n    // Same thing again except we flip the curve and translate it at the same time \n    // by subtracting the result from 2^12.\n    int tmp = (x&gt;&gt;9) - 0x8000;\n    return 0x1000 - ((tmp*tmp)&gt;&gt;19;\n}\nelse\n{\n    return 0x1000;\n}\n---------------------------------\n\n\n\n\nI /think/ this is optimal. As I said before we /could/ discard one of \nthe shifts, e.g. the first condition part could be:\n\n---------------------------------------------\n\nelse if( x &lt; 0x0 )\n{\n    // Scale down from 2^24 to 2^5.\n    int tmp = (x&gt;&gt;19) + 0x20;\n\n    // Square tmp to generate the curve. max result is 2^10. \n    return (tmp*tmp);\n}\n---------------------------------------------\n\nThe number&#39;s don&#39;t quite fit right because we are trying to achieve a range of 0 to 2^11 (not 2^10), which we can do via arithmetic division but we prefer to use the shift-right because it&#39;s faster. Thus we would need to adjust the output range of our activation function to make it fit nicely. Anyway the point is that with this approach the curve generated only has 32 distinct values (well, 64 because this condition is only describing half of the curve), so you see a lot of precision has been lost. Whereas using two shifts has avoided this problem (I think!).\n\nAnyway here is a graph of the sigmoid part of the funtion generated with gnuplot using the following commands:\n\nfn1(x) = (int(x)/512) + 32768\nfn1_1(x) = (fn1(x)*fn1(x))/524288\nfn2(x) = (int(x)/512) - 32768\nfn2_1(x) = 4096 - ((fn2(x)*fn2(x))/524288)\nfn3(x) = (x&lt;0) ? fn1_1(x) : fn2_1(x)\nplot fn3(x)\n\nhttp://www.cgreen.dsl.pipex.com/integernetwork/activationFunction.png\n\n\nOne final point is that the steepened sigmoid that some have found to perform well has it&#39;s range over -1.5 to 1.5, and since the max weight is capped at +-5 we can see that the extremes of the curve are well within the x range achievable by a single connection. So actually I should probably steepen the function even more.\n\nColin.\n\n\n\n\n\n\n\n"}}