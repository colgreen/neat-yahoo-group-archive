{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":206967455,"authorName":"Julian Togelius","from":"&quot;Julian Togelius&quot; &lt;julian@...&gt;","profile":"jtogel","replyTo":"LIST","senderId":"obW4Rs8NtmNr5YDiMyiu6_XZaIgAl8nvIf3pJ35XwLqesx-QQBpQpgCpXNWsWUSys81Q_kUYEopHTPRm9TYQ5uhOQSQUwDOPv0aEswVp","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Robotics Application","postDate":"1214518481","msgId":4185,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIzMGU0NjNlMDgwNjI2MTUxNHQzNTJiMmJlY2g5ZTQ3MjQ5ZjRmNmMyNmIzQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGc0MG1ncytyN2dnQGVHcm91cHMuY29tPg==","referencesHeader":"PGc0MG1ncytyN2dnQGVHcm91cHMuY29tPg=="},"prevInTopic":4184,"nextInTopic":0,"prevInTime":4184,"nextInTime":4186,"topicId":4183,"numMessagesInTopic":3,"msgSnippet":"Hi Erik, There is plenty of work done in evolutionary robotics on evolving neural networks for real robots. A good but somewhat dated overview is this book: ","rawEmail":"Return-Path: &lt;julian.togelius@...&gt;\r\nX-Sender: julian.togelius@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 40043 invoked from network); 26 Jun 2008 22:14:43 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m47.grp.scd.yahoo.com with QMQP; 26 Jun 2008 22:14:43 -0000\r\nX-Received: from unknown (HELO wa-out-1112.google.com) (209.85.146.181)\n  by mta16.grp.scd.yahoo.com with SMTP; 26 Jun 2008 22:14:43 -0000\r\nX-Received: by wa-out-1112.google.com with SMTP id j40so139474wah.15\n        for &lt;neat@yahoogroups.com&gt;; Thu, 26 Jun 2008 15:14:43 -0700 (PDT)\r\nX-Received: by 10.114.184.11 with SMTP id h11mr653039waf.175.1214518481949;\n        Thu, 26 Jun 2008 15:14:41 -0700 (PDT)\r\nX-Received: by 10.114.209.19 with HTTP; Thu, 26 Jun 2008 15:14:41 -0700 (PDT)\r\nMessage-ID: &lt;230e463e0806261514t352b2bech9e47249f4f6c26b3@...&gt;\r\nDate: Fri, 27 Jun 2008 00:14:41 +0200\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;g40mgs+r7gg@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;g40mgs+r7gg@...&gt;\r\nX-Google-Sender-Auth: 323a1c35091f99da\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Julian Togelius&quot; &lt;julian@...&gt;\r\nSubject: Re: [neat] Robotics Application\r\nX-Yahoo-Group-Post: member; u=206967455; y=PeugYbgMdQehKKZ8f3UYhAmF988wiBEN9Qj-MO0mmaEh\r\nX-Yahoo-Profile: jtogel\r\n\r\nHi Erik,\n\nThere is plenty of work done in evolutionary robotics on evolving\nneural networks for real robots. A good but somewhat dated overview is\nthis book:\nhttp://laral.istc.cnr.it/nolfi/er-book.html\n\nEvolving on real robots is definitely tricky, as you figured out\nyourself, and using simulations has its own set of problems.\nEspecially, most simulations differ from the real robot + environment\nin at least some ways that make it easier to accomplish the task in\nsimulation than reality, and evolution will almost certainly find and\nexploit this weakness. There are a number of solutions proposed:\n\nJakobi&#39;s radical envelope of noise hypothesis: black out all\nirrelevant aspects of the simulation with lots of noise.\nhttp://citeseer.ist.psu.edu/jakobi98minimal.html\n\nFor some robots, it might be possible to remodel the robot\ncontinuously, in other words use the differences between the\nsimulation and the real robot to improve the simulation dynamically\n(seems a bit similar to what you were proposing):\nhttp://www.cs.uvm.edu/~jbongard/papers/2006_Science_Bongard_Zykov_Lipson.pdf\n\nOr you could just infer a number of models from the same data, use\nthem all as separate simulators, and use the lowest fitness your\ncontroller gets on any of these simulators to avoid exploiting such\nweaknesses (a weakness in one simulation is likely to be cancelled by\nanother simulation):\nhttp://julian.togelius.com/Togelius2007Nonlinear.pdf\n\nAs you can see, the whole issue of how to use simulators to best\nevolve controllers for real robots is quite complex and cannot in any\nway be considered solved, so it&#39;s a good research area to get into.\n\nJulian\n\n2008/6/26 erikcss &lt;erikcss@...&gt;:\n&gt; Some explanation and background before my question... setting the\n&gt; stage if you will:\n&gt;\n&gt; I have been developing a robot for quite some years now and while\n&gt; doing this have been looking for a suitable neural network engine to\n&gt; drive some of the cognitive functions.\n&gt;\n&gt; Years back, I learned that the standard neural network methodology\n&gt; will not work because of the need of a training set. Good luck\n&gt; creating a training set for a mobile robot. So, I developed a few\n&gt; methods to emulate a training set, effectively evolve the network\n&gt; dynamically. But, this had several obvious deficiencies. I soon found\n&gt; NEAT, rtNEAT, and hyperNEAT.\n&gt;\n&gt; From what I understand after reading several publications and\n&gt; experimenting with some established demonstrations, I found the the\n&gt; NEAT model is quite useful, but also presents several obstacles of\n&gt; its own. In a physical robot, evolving networks is not very\n&gt; practical. So, after some careful consideration, I came up with a\n&gt; solution.\n&gt;\n&gt; The solution was to have two environments. One drives the robot with\n&gt; a basic hyperNEAT neural network, while a second environment runs in\n&gt; a simulated environment. The NEAT in the simulation will be allowed\n&gt; to evolve until a threshold is met for a Fitness improvement. When\n&gt; this threshold is achieved, that neural network is transitioned to\n&gt; the live robot, and the simulation is given fresh environment data\n&gt; from the sensors, and the cycle begins again. This will allow the\n&gt; NEAT to evolve, and still allow for good operation of the robot.\n&gt;\n&gt; A lot of this is going to be done in MRDS to minimise computation in\n&gt; the robot, and also take advantage of the physics and other\n&gt; components of the simulation environment.\n&gt;\n&gt; This is the model I am going to try to implement, which then leads me\n&gt; to my question.\n&gt;\n&gt; Question 1:\n&gt; I have been able to find quite a bit of documentation on the various\n&gt; forms of NEAT. But, I have been able to find no information on how to\n&gt; actually use NEAT in code. Perhaps I am not looking in the right\n&gt; places. Hopefully you can point me in the right direction.\n&gt;\n&gt; Question 2:\n&gt; Has anybody done any work along this line? I see many projects that\n&gt; use NEAT for various organism simulations and such, but not really\n&gt; anything to drive a physical robot. I would appreciate any help on\n&gt; this.\n&gt;\n&gt; \n\n\n\n-- \nJulian Togelius\nIDSIA\nGalleria 2\n6928 Manno-Lugano\nSwitzerland\njulian@...\nhttp://julian.togelius.com\nhttp://www.idsia.ch/~togelius\n+41-764-110679\n+46-705-192088\n\n"}}