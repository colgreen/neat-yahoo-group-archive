{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"tJlHb29IXYfB5Qg1BY8WLJ39cHwIjm6PtdLZ2gOaf79qbp1LtIfdfg5xoR4iXlJEIiVTWVmg5txe0q7EHsabucHw936uWUw6RA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: Python NEAT","postDate":"1121518492","msgId":2101,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQyRDkwMzlDLjIwOTA3MDhAZHNsLnBpcGV4LmNvbT4=","inReplyToHeader":"PFBpbmUuTE5YLjQuNjMuMDUwNzE1MTAyNDU2MC40OTIzQG9yYW5nZS1wZWtvZS5jcy51dGV4YXMuZWR1Pg==","referencesHeader":"PGRiN24xNit0OTM1QGVHcm91cHMuY29tPiA8UGluZS5MTlguNC42My4wNTA3MTUxMDI0NTYwLjQ5MjNAb3JhbmdlLXBla29lLmNzLnV0ZXhhcy5lZHU+"},"prevInTopic":2098,"nextInTopic":2109,"prevInTime":2100,"nextInTime":2102,"topicId":535,"numMessagesInTopic":47,"msgSnippet":"... I think the key here is to define an absract class that contains the bare essentials of a genome that are requried for decoding into a network. That way","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 93085 invoked from network); 16 Jul 2005 12:54:55 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m13.grp.scd.yahoo.com with QMQP; 16 Jul 2005 12:54:55 -0000\r\nReceived: from unknown (HELO galaxy.systems.pipex.net) (62.241.162.31)\n  by mta3.grp.scd.yahoo.com with SMTP; 16 Jul 2005 12:54:55 -0000\r\nReceived: from [10.0.0.10] (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby galaxy.systems.pipex.net (Postfix) with ESMTP id 922AFE0000B8\n\tfor &lt;neat@yahoogroups.com&gt;; Sat, 16 Jul 2005 13:54:54 +0100 (BST)\r\nMessage-ID: &lt;42D9039C.2090708@...&gt;\r\nDate: Sat, 16 Jul 2005 13:54:52 +0100\r\nUser-Agent: Mozilla Thunderbird 1.0.2 (Windows/20050317)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;db7n16+t935@...&gt; &lt;Pine.LNX.4.63.0507151024560.4923@...&gt;\r\nIn-Reply-To: &lt;Pine.LNX.4.63.0507151024560.4923@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: Python NEAT\r\nX-Yahoo-Group-Post: member; u=127853030; y=GuAFIOiQy3vE_VfalwttQhAuRrc655jufJ8Rf1ds3zpo9UL3rox8\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nJoseph Reisinger wrote:\n\n&gt;On Fri, 15 Jul 2005, Ashot_Petrosian wrote:\n&gt;\n&gt;  \n&gt;\n&gt;&gt;\tJoe (or anyone really) - I haven&#39;t had a chance to look at your code\n&gt;&gt;yet, but I am curious to know how you kept the GA and the network\n&gt;&gt;seperate and still had innovation numbers?  I found that this was the\n&gt;&gt;most difficult thing to deal with and essentially made any sort of\n&gt;&gt;strict meaningful OO seperation difficult to impossible.\n&gt;&gt;    \n&gt;&gt;\n&gt;\n&gt;My most recent implementation uses a function like:\n&gt;\n&gt;network = genotype_to_phenotype( genome )\n&gt;\n&gt;I think Ken&#39;s implementation does this as well. MNEAT implemented networks \n&gt;as a class that took in a genome in the constructor. I&#39;m not sure if this \n&gt;meets the criterion of &quot;strict meaningful OO separation&quot; but it seems \n&gt;clean enough to me.\n&gt;  \n&gt;\nI think the key here is to define an absract class that contains the \nbare essentials of a genome that are requried for decoding into a \nnetwork. That way you can create new genome sub-classes and slot them \ninto the existing code base nicely. Unfortunately if you&#39;re \nexperimenting with different types of genome and/or network then you \ncan&#39;t really define an abstract genome that contains anything useful, \nand so in SharpNEAT I just have a GenomeDecoder class with a load of \nstatic methods for decoding genomes (actually I only have one type of \ngenome right now) into various types of network. At least this way you \nkeep the messy code that works on very specific types and isn&#39;t \nre-usable in one place. A sort of &#39;sweep it under the rug&#39; approach :)\n\nColin.\n\n\n"}}