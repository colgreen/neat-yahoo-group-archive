{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":230385553,"authorName":"Cesar G. Miguel","from":"&quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;","profile":"fdital","replyTo":"LIST","senderId":"3dVu4Wc9pflayrG0c4a0wtHnh92-AhfXZq3MThJK1zk5bXbOjJQobHmxcQ774dtPgXb3zpCK3BE8qy2zalGH8XBCoZRan7UFvAVSkbDl0O8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] NEAT-python","postDate":"1225813767","msgId":4418,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRkZjEwMDc4MDgxMTA0MDc0OWwxMWViNWEzYWo0MmNmZDRjMzhkOGM0ZGQ4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdlcGJobSsyZ3FqQGVHcm91cHMuY29tPg==","referencesHeader":"PGdlcGJobSsyZ3FqQGVHcm91cHMuY29tPg=="},"prevInTopic":4417,"nextInTopic":4419,"prevInTime":4417,"nextInTime":4419,"topicId":4417,"numMessagesInTopic":7,"msgSnippet":"Hi shaflidason, The only reliable enough experiment on the repository is xor2.py. The double pole balancing needs some fixing, but I have a working version on","rawEmail":"Return-Path: &lt;cesar.gomes@...&gt;\r\nX-Sender: cesar.gomes@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 74025 invoked from network); 4 Nov 2008 15:49:29 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m43.grp.scd.yahoo.com with QMQP; 4 Nov 2008 15:49:29 -0000\r\nX-Received: from unknown (HELO nf-out-0910.google.com) (64.233.182.188)\n  by mta17.grp.scd.yahoo.com with SMTP; 4 Nov 2008 15:49:29 -0000\r\nX-Received: by nf-out-0910.google.com with SMTP id d21so1509434nfb.35\n        for &lt;neat@yahoogroups.com&gt;; Tue, 04 Nov 2008 07:49:27 -0800 (PST)\r\nX-Received: by 10.103.241.15 with SMTP id t15mr760219mur.92.1225813767846;\n        Tue, 04 Nov 2008 07:49:27 -0800 (PST)\r\nX-Received: by 10.103.241.10 with HTTP; Tue, 4 Nov 2008 07:49:27 -0800 (PST)\r\nMessage-ID: &lt;ddf100780811040749l11eb5a3aj42cfd4c38d8c4dd8@...&gt;\r\nDate: Tue, 4 Nov 2008 13:49:27 -0200\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;gepbhm+2gqj@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;gepbhm+2gqj@...&gt;\r\nX-Google-Sender-Auth: bb07b9f55aebc336\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nX-eGroups-From: &quot;Cesar G. Miguel&quot; &lt;cesargm@...&gt;\r\nFrom: &quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;\r\nSubject: Re: [neat] NEAT-python\r\nX-Yahoo-Group-Post: member; u=230385553; y=O9jXgfqkfEWSeec9VOYBQ8ai9XL37yp7_EAM6m2YgN3N\r\nX-Yahoo-Profile: fdital\r\n\r\nHi shaflidason,\n\nThe only reliable enough experiment on the repository is xor2.py. The\ndouble pole balancing needs some fixing, but I have a working version\non my local copy (still need to clean the code yet).\n\nYou can use the xor as a template to create more elaborated\nexperiments. They all follow the same basic steps (as you might have\nnoticed).\n\nWhat needs to be done:\n\n- Documentation;\n- Fix the mess with some C/C++ extensions (they work, but not as\nbeautifully as the python version);\n- Better integration with CTRNNs and spiking models;\n- The idea is to be platform independent, but as the project is\ndeveloped on linux, I&#39;m not sure how to compile those C/C++ extensions\non windows.\n\nWe wanted to keep NEAT-Python as simple as possible, following the\nUNIX philosophy: a tool to do one thing, and that thing is to evolve\nneural networks based on Stanley&#39;s original idea. The source code was\nimplemented based on the C++ version and the thesis itself [1]. There\nare some add-ons such as: visualize species dynamics, network\ntopology, and plot fitness evolution (but these external modules are\nnot required in order to simply use NEAT-Python).\n\nI have done extensive tests comparing Stanley&#39;s C++ and our Python\nversions for the XOR experiment and the double pole non-markov\nproblem. I&#39;ve tried to minimize the differences between the two while\ncomparing them and I often get statistically similar results, if not\nbetter (in terms of smaller networks and less evaluations). I&#39;m a very\nsuspicious guy with enough CPU time, so most of the time the results\nwere averaged over 5k+ runs!\n\nBut that&#39;s only me. I encourage people to work with NEAT-Python and\nmake your own benchmarks, not only use it as an &quot;alternative\nimplementation&quot;. The project page on Google gets hits from all around\nthe world, mainly United States (after Stanley has gently linked the\nproject on his website) but I have no idea of what people are doing\nwith NEAT-Python and how useful it is for them.\n\nWe&#39;re planning to release version 1.0 until the end of the year, and\nfrom there we will probably only be fixing bugs (I have some other\nprojects in mind). I hope it to be reliable enough for publication,\nbut I need people to test it, criticize it, and report the results :)\n\n[]&#39;s\nCesar\n\n[1] I have played a lot with all those Java and Python versions too\nand I have to thank Matt Simmerson, the author of NEAT4J, for his\nkindness in replying all my doubts regarding his nice implementation.\nMat Buckland&#39;s C++ version was also of great help (his book chapter on\nNEAT was extremely helpful).\n\nOn Tue, Nov 4, 2008 at 9:26 AM, shaflidason &lt;styrmis@...&gt; wrote:\n&gt; I work primarily in Python so I was pleased to see two implementations\n&gt; on Google Code.\n&gt;\n&gt; NEAT-python (http://code.google.com/p/neat-python/) appears to be the\n&gt; more mature of the two* and I&#39;ve seen at least one of the maintainers\n&gt; posting here which is also encouraging.\n&gt;\n&gt; To the maintainers:\n&gt;\n&gt; - How complete is your NEAT implementation?\n&gt; - What tasks/bugs are still outstanding?\n&gt;\n&gt; I&#39;m willing to put some time into this but at the moment the &#39;issues&#39;\n&gt; section on the project doesn&#39;t seem to be enabled so it&#39;s not clear\n&gt; what is currently being worked on.\n&gt;\n&gt; Assuming the algorithm implementation itself is mostly done I&#39;d also\n&gt; be very interested in working on a GUI to aid with visualisation.\n&gt;\n&gt; A more general question: which NEAT implementation is generally\n&gt; considered to be the best to compare to when it comes to publications?\n&gt; In order to compile Ken Stanley&#39;s reference C++ implementation I need\n&gt; to make a number of changes to satisfy the version of g++ that I have\n&gt; here which concerns me as I may introduce mistakes in doing so.\n&gt;\n&gt; My aim with the python implementation would be to bring it to a level\n&gt; where it can be readily considered as suitable for use in comparisons\n&gt; in research; any thoughts on this?\n&gt;\n&gt; * The other being pyneat http://code.google.com/p/pyneat/\n&gt;\n&gt; \n\n"}}