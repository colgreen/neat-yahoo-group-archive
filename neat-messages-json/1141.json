{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"8l5Y-kOoOoW1jFWzTFNGF_JqUzE2QUxKOluBT9agGJNW-iQprBHaABE6Lt-6CwlmUmHV9Y3HByn67J2IIWU90MvSbKP2NicWkAE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Computation Time","postDate":"1088159554","msgId":1141,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4wLjYuMC4yMDA0MDYyNDExMTQyMy4wMjUwY2I5MEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PEJBWTItRjI5dDNjZXc4azY5UkswMDAwOGQyNEBob3RtYWlsLmNvbT4=","referencesHeader":"PEJBWTItRjI5dDNjZXc4azY5UkswMDAwOGQyNEBob3RtYWlsLmNvbT4="},"prevInTopic":1131,"nextInTopic":1142,"prevInTime":1140,"nextInTime":1142,"topicId":845,"numMessagesInTopic":99,"msgSnippet":"Hi, ... Now I see why I didn t understand before.  When you said activation function I thought you meant the sigmoid-generating function, but I see now that","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 37564 invoked from network); 25 Jun 2004 10:39:23 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m22.grp.scd.yahoo.com with QMQP; 25 Jun 2004 10:39:23 -0000\r\nReceived: from unknown (HELO smtp004.mail.ukl.yahoo.com) (217.12.11.35)\n  by mta4.grp.scd.yahoo.com with SMTP; 25 Jun 2004 10:39:23 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp004.mail.ukl.yahoo.com with SMTP; 25 Jun 2004 10:39:19 -0000\r\nMessage-Id: &lt;6.1.0.6.0.20040624111423.0250cb90@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.0.6\r\nDate: Fri, 25 Jun 2004 11:32:34 +0100\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;BAY2-F29t3cew8k69RK00008d24@...&gt;\r\nReferences: &lt;BAY2-F29t3cew8k69RK00008d24@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 217.12.11.35\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Computation Time\r\nX-Yahoo-Group-Post: member; u=7192225\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi,\n\nAt 16:56 23/06/2004, you wrote:\n&gt; &gt;From: Ian Badcoe &lt;ian_badcoe@...&gt;\n&gt; &gt;Maybe we should stop theorizing and wait for the real code?  I&#39;m perfectly\n&gt; &gt;happy to help you dissect one of your real, big generated functions when\n&gt; &gt;the you have it.\n&gt;\n&gt;Well, the activation functions are completely unrolled.  And that&#39;s the way\n&gt;I want it.  There is no loop, only a linear calculation of node values.  And\n&gt;that&#39;s plenty fast.  Once I have a more complicated network to look at, I&#39;ll\n&gt;send you the code so you can see what it looks like.  In the mean time, the\n&gt;code I was asking about was this:\n\nNow I see why I didn&#39;t understand before.  When you said &quot;activation \nfunction&quot; I thought you meant the sigmoid-generating function, but I see \nnow that you&#39;re selecting an entire network by choosing a function \npointer.  Thoughts...\n\nCould you use float throughout instead of double?  That would reduce memory \nbandwidth requirements...\n\n--\n\nTop, left, bottom and right are stored as data, that&#39;s 16 megs of memory \naccess.  Why not calculate them with nested loops.  Or even maths within \nyour one loop -- although, since your sizes are not powers of 2, you&#39;d need \ndivides (modulus also contains a divide) so nested loops are probably the \nway to go.\n\n--\n\nSquaring and summing reasonably sized doubles should not generate NaN.  I&#39;d \nworry about the type of values coming out of activate.  It might indicate \nout of range values passed into exp (you did have exp in your activation \nfunction?).  Or divide-by-zero.  Or it might just indicate unreasonable \nlarge values which overflow when squared and summed.  I&#39;d check that \nout.  It may indicate an error in the arithmetic, or it might indicate \nunreasonably large weights or inputs.  You really want to avoid that \nbecause, for example, a NaN generated in neurone 1 may propagate right \nthrough to neurone 30, overriding every sane value along the way.\n\n(if I may blow the trumpet for my inv-abs activation function here, it \nshould be more-stable w.r.t extreme numbers...)\n\nOTOH, maybe it&#39;s just an old comment.\n\n--\n\nTaking the reciprocal of the fitness may not be the best way to treat \nit.  e.g. large numbers differ by a lot but their reciprocals get very \nsimilar.  Since this is a double-&gt;double (or float-&gt;float) mapping, it may \nbe that in the unfit region of the spectrum, there is not enough precision \nto represent distinct reciprocals for distinct fitnesses.  I&#39;m not sure \nabout this, it gets complex with float formats...\n\nSince you only need a ranking (or order) for fitnesses, and not absolute \nvalues, why not leave it non-reciprocal, rename it as &quot;unfitness&quot; and \nreverse the selection logic?\n\n&gt;        2727 int main( void )\n&gt;        2728 {\n&gt;        2729     int f;          // function index\n&gt;        2730     afp activate;   // activation function pointer\n&gt;        2731     int i;          // input index\n&gt;        2732     double output;  // output of single activation\n&gt;        2733     double error;   // error\n&gt;        2734     double fitness; // network fitness, or error\n&gt;        2735\n&gt;        2736     SetExpectedValues();\n&gt;        2737\n&gt;        2738     // calculate fitness of each network\n&gt;        2739     for ( f=0 ; f&lt;500 ; f++ )\n&gt;        2740     {\n&gt;        2741         activate = af[f];\n&gt;        2742         fitness = 1.0;\n&gt;        2743\n&gt;        2744         for ( i=0 ; i&lt;1005720 ; i++ )\n&gt;        2745         {\n&gt;        2746             output = activate(\n&gt;        2747                 expected[i].top,\n&gt;        2748                 expected[i].left,\n&gt;        2749                 expected[i].bottom,\n&gt;        2750                 expected[i].right );\n&gt;        2751             error = expected[i].expected - output;\n&gt;        2752             fitness += abs( error );  // getting nan if using\n&gt;(error*error)\n&gt;        2753         }\n&gt;        2754         printf( &quot;%s=%0.55f&#92;n&quot;, net[f], 1 / fitness );  //\n&gt;fitness is converted to a number between 0 and 1\n&gt;        2755     }\n&gt;        2756     return 0;\n&gt;        2757 } //\n\n--\n\nOther than that, the inside of activate will be more significant than the \ndetail of this loop.  Do you have an example of &quot;activate&quot; generated the \nway you (currently) plan, and using network data of about the expected size \nand connection density?\n\nI could probably tell you more if I could consider the detail of that in \nthe context of this outer loop.\n\nI think your approach is looking pretty efficient, given the presupposition \nof processing 500 nets over one picture.  Which in turn sounds good, given \nyour intention to break things up for grid-style computing (although you \nmay need to think about the batch-size when you know about actual speeds \nand node-reliability etc etc ).\n\n&gt;Suggestions on what I&#39;m doing with the fitness calculation are also welcome.\n\nThere&#39;s a few in there.\n\n         Ian Badcoe\n\n\n\n\nLiving@Home - Open Source Evolving Organisms - \nhttp://livingathome.sourceforge.net/\n\n\n\n\n"}}