{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":127853030,"authorName":"Colin Green","from":"Colin Green &lt;cgreen@...&gt;","profile":"alienseedpod","replyTo":"LIST","senderId":"_PT56VZx15V4oxEjfsOAikpqm-REuXSe7bmf-ZCRyJa3XBBu9oiHGGtXPSfRTxDqd9WoAVoISanH6pYJQ8i6E1oXhQ07FUFVlQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [neat] Re: Basic Implementation Question","postDate":"1085435354","msgId":839,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwQjI2RERBLjcwNDA3QGRzbC5waXBleC5jb20+","inReplyToHeader":"PGM4dG83cys1bGhkQGVHcm91cHMuY29tPg==","referencesHeader":"PGM4dG83cys1bGhkQGVHcm91cHMuY29tPg=="},"prevInTopic":838,"nextInTopic":841,"prevInTime":838,"nextInTime":840,"topicId":829,"numMessagesInTopic":15,"msgSnippet":"... In SharpNEAT I opted for (2) as in Ken s implemenatation. My logic being that I thought matching like innovations is beneficial but costly in terms of CPU","rawEmail":"Return-Path: &lt;cgreen@...&gt;\r\nX-Sender: cgreen@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 98915 invoked from network); 24 May 2004 21:49:11 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m12.grp.scd.yahoo.com with QMQP; 24 May 2004 21:49:11 -0000\r\nReceived: from unknown (HELO colossus.systems.pipex.net) (62.241.160.73)\n  by mta6.grp.scd.yahoo.com with SMTP; 24 May 2004 21:49:11 -0000\r\nReceived: from dsl.pipex.com (81-86-175-101.dsl.pipex.com [81.86.175.101])\n\tby colossus.systems.pipex.net (Postfix) with ESMTP id 7523D1C000D2\n\tfor &lt;neat@yahoogroups.com&gt;; Mon, 24 May 2004 22:49:09 +0100 (BST)\r\nMessage-ID: &lt;40B26DDA.70407@...&gt;\r\nDate: Mon, 24 May 2004 22:49:14 +0100\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: neat@yahoogroups.com\r\nReferences: &lt;c8to7s+5lhd@...&gt;\r\nIn-Reply-To: &lt;c8to7s+5lhd@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 62.241.160.73\r\nFrom: Colin Green &lt;cgreen@...&gt;\r\nSubject: Re: [neat] Re: Basic Implementation Question\r\nX-Yahoo-Group-Post: member; u=127853030\r\nX-Yahoo-Profile: alienseedpod\r\n\r\nKenneth Stanley wrote:\n\n&gt;3 types of implementation:\n&gt;\n&gt;1.  Don&#39;t have NEAT keep any record of previous innovations at all.  \n&gt;In that case, splitting the same link multiple times will always \n&gt;lead to new nodes.\n&gt;\n&gt;2.  Have NEAT keep a record of innovations, but clear that record \n&gt;after each generation.  In that case, the same innovation occurring \n&gt;in the same generation will get the same historical marking, but in \n&gt;the next generation the same innovation (e.g. connecting the same \n&gt;two nodes) would get a different marking.\n&gt;\n&gt;3.  Have NEAT keep a record of innovations forever.  In that case, \n&gt;the same innovation *always* gets the same number for the entire run.\n&gt;\n&gt;The FAQ question I cited earlier talks about the issues involved in \n&gt;choosing how to do it, but the short answer is that it&#39;s a judgment \n&gt;call, and there is no data to suggest one should strongly prefer one \n&gt;option over the other.  You may have opinions about which is most \n&gt;elegant/biologically plausible/conservative, and those will guide \n&gt;your choice.\n&gt;  \n&gt;\n\nIn SharpNEAT I opted for (2) as in Ken&#39;s implemenatation. My logic being \nthat I thought matching like innovations is beneficial but costly in \nterms of CPU time. So I figured this gives a good balance. However I \njust traced a bug whereby evolved networks where seen - by Ken - to have \nmultiple recurrent connections on a single node. I realise now that this \nis a result of crossover between two genomes that contained the same \nconnection, but with a different innovation ID. To fix this I should \ncheck for duplicate connections within genomes created by crossover, \nwhich erodes some of the performance gain obtained from using technique \n(2).\n\nInstictively I would expect (3) to be the better technique, so I may try \nthis and see how it compares on speed.with (2).\n\nColin.\n\n\n"}}