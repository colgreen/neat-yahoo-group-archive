{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":230385553,"authorName":"Cesar G. Miguel","from":"&quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;","profile":"fdital","replyTo":"LIST","senderId":"Bt02YfuOvMNwE9F9x8_Bv7yh7Vguf2rilfXnZTdH_tb-4hfXZxBTk_6uhoHnnHoG1LJvHzmWQwed82RyDXWVUDP8iVA-8J-79D_x3OIpyfc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Re: rtNEAT: max_depth() in an endless loop","postDate":"1225726951","msgId":4402,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRkZjEwMDc4MDgxMTAzMDc0MnMxZWJiMzk5OW83ODM4OTE0M2Q2ODg4NWRjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdlbTJlZSsybjhuQGVHcm91cHMuY29tPg==","referencesHeader":"PGdlam40aSttMnZwQGVHcm91cHMuY29tPiA8Z2VtMmVlKzJuOG5AZUdyb3Vwcy5jb20+"},"prevInTopic":4401,"nextInTopic":4403,"prevInTime":4401,"nextInTime":4403,"topicId":4396,"numMessagesInTopic":16,"msgSnippet":"Hi Ken, While implementing NEAT-Python we had to solve the same problem and I wasn t sure how to do it efficiently for arbitrary feedforward networks (for","rawEmail":"Return-Path: &lt;cesar.gomes@...&gt;\r\nX-Sender: cesar.gomes@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 56879 invoked from network); 3 Nov 2008 15:42:33 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m54.grp.scd.yahoo.com with QMQP; 3 Nov 2008 15:42:33 -0000\r\nX-Received: from unknown (HELO gv-out-0910.google.com) (216.239.58.190)\n  by mta15.grp.scd.yahoo.com with SMTP; 3 Nov 2008 15:42:33 -0000\r\nX-Received: by gv-out-0910.google.com with SMTP id y18so302683gvf.27\n        for &lt;neat@yahoogroups.com&gt;; Mon, 03 Nov 2008 07:42:32 -0800 (PST)\r\nX-Received: by 10.103.198.20 with SMTP id a20mr129524muq.27.1225726952022;\n        Mon, 03 Nov 2008 07:42:32 -0800 (PST)\r\nX-Received: by 10.103.241.10 with HTTP; Mon, 3 Nov 2008 07:42:31 -0800 (PST)\r\nMessage-ID: &lt;ddf100780811030742s1ebb3999o78389143d68885dc@...&gt;\r\nDate: Mon, 3 Nov 2008 13:42:31 -0200\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;gem2ee+2n8n@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;gejn4i+m2vp@...&gt; &lt;gem2ee+2n8n@...&gt;\r\nX-Google-Sender-Auth: c2e034b93dd72890\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nX-eGroups-From: &quot;Cesar G. Miguel&quot; &lt;cesargm@...&gt;\r\nFrom: &quot;Cesar G. Miguel&quot; &lt;cesar.gomes@...&gt;\r\nSubject: Re: [neat] Re: rtNEAT: max_depth() in an endless loop\r\nX-Yahoo-Group-Post: member; u=230385553; y=m7MY70BUiiwCPmBiCy7lrFUbRMCKT1GgguxwDXaTgCjs\r\nX-Yahoo-Profile: fdital\r\n\r\nHi Ken,\n\nWhile implementing NEAT-Python we had to solve the same problem and I\nwasn&#39;t sure how to do it efficiently for arbitrary feedforward\nnetworks (for recurrent nets it&#39;s easy). Then we came up with an idea\nwithout using depth level: we have a &quot;list of ordered nodes&quot; to follow\nwhen activating the network. The list is built while augmenting the\ntopology. Example:\n\nConsider the activation order: [N1, N2, N7, N5, N3, N4]\n\nNode 7 depends on the activations coming from N1 and N2. Node 5\ndepends on N1, N2, and N7.\nN3 depends on N1 and N4 on N7, N3, and N5.\n\nIf a mutation adds a new node (N8) between, say, N7 and N5, the list\nis updated accordingly:\n\nNew activation order: [N1, N2, N7, N8, N5, N3, N4]\n\nIn that context, depth would be the size of the activation list. But\nthat&#39;s irrelevant when following the right order (it&#39;s much like a\nsimple MLP with several layers, but now the topology can be\narbitrary). I will try to explain our algorithm later (with the help\nof some graphical representation) and post it here.\n\n[]&#39;s\nCesar\n\n"}}