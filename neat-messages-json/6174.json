{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":190115458,"authorName":"Drew Kirkpatrick","from":"Drew Kirkpatrick &lt;drew.kirkpatrick@...&gt;","profile":"ze_dakster","replyTo":"LIST","senderId":"fsPBeQjAUugheM4MAKkgevYlxXRarPOlB03cKz21MR6lOgRe52yuXZt7GAP7jVBoOQcVrdJsPDHrEKLKoI1Q68En4KWJWz-LSrdbOYdnc-cCt3jS","spamInfo":{"isSpam":false,"reason":"5"},"subject":"Re: [neat] first steps with NEAT","postDate":"1374676877","msgId":6174,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRmNVUFFZd2hZZnRxV1BKXzM0SEt6Wl84NGhWRUFYWGIyenZUdVJ0OG9SUE5iVXQ1UUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGtzb284MCt1ajI4QGVHcm91cHMuY29tPg==","referencesHeader":"PGtzb284MCt1ajI4QGVHcm91cHMuY29tPg=="},"prevInTopic":6173,"nextInTopic":6176,"prevInTime":6173,"nextInTime":6175,"topicId":6173,"numMessagesInTopic":7,"msgSnippet":"Aline, I used a NEAT implementation based off of Buckland s in school as well. Mine is still C++/object oriented, but I remember I spent a good amount of time","rawEmail":"Return-Path: &lt;drew.kirkpatrick@...&gt;\r\nX-Sender: drew.kirkpatrick@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nX-Received: (qmail 14130 invoked by uid 102); 24 Jul 2013 14:41:35 -0000\r\nX-Received: from unknown (HELO mtaq6.grp.bf1.yahoo.com) (10.193.84.37)\n  by m12.grp.bf1.yahoo.com with SMTP; 24 Jul 2013 14:41:35 -0000\r\nX-Received: (qmail 26641 invoked from network); 24 Jul 2013 14:41:34 -0000\r\nX-Received: from unknown (HELO mail-wi0-f173.google.com) (209.85.212.173)\n  by mtaq6.grp.bf1.yahoo.com with SMTP; 24 Jul 2013 14:41:34 -0000\r\nX-Received: by mail-wi0-f173.google.com with SMTP id hq4so4375561wib.6\n        for &lt;neat@yahoogroups.com&gt;; Wed, 24 Jul 2013 07:41:33 -0700 (PDT)\r\nX-Received: by 10.194.110.39 with SMTP id hx7mr26951909wjb.4.1374676893767;\n Wed, 24 Jul 2013 07:41:33 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.194.134.102 with HTTP; Wed, 24 Jul 2013 07:41:17 -0700 (PDT)\r\nIn-Reply-To: &lt;ksoo80+uj28@...&gt;\r\nReferences: &lt;ksoo80+uj28@...&gt;\r\nDate: Wed, 24 Jul 2013 10:41:17 -0400\r\nMessage-ID: &lt;CAFcUPQYwhYftqWPJ_34HKzZ_84hVEAXXb2zvTuRt8oRPNbUt5Q@...&gt;\r\nTo: neat@yahoogroups.com\r\nContent-Type: multipart/mixed; boundary=089e010d8a02ef1f6904e242e7ee\r\nX-eGroups-Msg-Info: 1:5:0:0:0\r\nFrom: Drew Kirkpatrick &lt;drew.kirkpatrick@...&gt;\r\nSubject: Re: [neat] first steps with NEAT\r\nX-Yahoo-Group-Post: member; u=190115458; y=rA2wbuwOJVCw-6n5-FGceTub6OLVHeP0DJ2zkMrTSayT0M4KH2JhXT9n-HZA3nQ9oNk4UuQtoqEeq8A\r\nX-Yahoo-Profile: ze_dakster\r\n\r\n\r\n--089e010d8a02ef1f6904e242e7ee\r\nContent-Type: multipart/alternative; boundary=089e010d8a02ef1f6404e242e7ec\r\n\r\n\r\n--089e010d8a02ef1f6404e242e7ec\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nAline,\n\nI used a NEAT implementation based off of Buckland&#39;s in school as w=\r\nell.\nMine is still C++/object oriented, but I remember I spent a good amoun=\r\nt of\ntime polishing up some bugs in the Buckland implementation. I&#39;d dig in=\r\nto\nyour problem more, except I&#39;m completely overwhelmed at work currently.\n=\r\n\nI&#39;ve attached a copy of my source code. Maybe if you compare my neat code\n=\r\nchanges compared to Buckland&#39;s original you can find some fixes that might\n=\r\nhelp. The neat implementation is in the competitiveCoevolution directory,\na=\r\nnd is in the following files:\nCga.cpp\nCInnovation.cpp\nCSpecies.cpp\ngenotype=\r\n.cpp\nphenotype.cpp\nand associated .h files.\n\nIt never proved to be a great =\r\nimplementation, but it definitely worked.\nThere&#39;s a built in XOR test too i=\r\nf you grep for that. This is Linux code,\nbut I don&#39;t think it would be too =\r\ndifficult to get working in windows if\nthat&#39;s what you&#39;re using.\n\nLet me kn=\r\now if you have any questions about the code, and I&#39;ll try to\nremember how i=\r\nt worked :)\n\nGood luck.\n\n\n-Drew\n\n\nOn Wed, Jul 24, 2013 at 10:27 AM, alinehu=\r\nf2 &lt;alinehuf2@...&gt; wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; Hello all,\n&gt;\n&gt; I&#39;m a french stu=\r\ndent at Paris university (sorry for my &quot;broken&quot; English).\n&gt; I&#39;m doing my fi=\r\nrst steps with NEAT and I encounter some difficulties. I\n&gt; have read the FA=\r\nQ on this web page :\n&gt; http://www.cs.ucf.edu/~kstanley/neat.html but I have=\r\n not found answers to\n&gt; my problems.\n&gt; I converted the Buckland implementat=\r\nion from C++ to C (I am not\n&gt; comfortable with C++) : https://github.com/al=\r\ninehuf/neattest.\n&gt; I tried the XOR test as decribed by Stanley in &quot;Evolving=\r\n Neural Networks\n&gt; through Augmenting Topologies&quot;, but I had a really poor =\r\nresult. My program\n&gt; found a solution 981 times out of 1000 tests (98%) and=\r\n it tooks an average\n&gt; of 184 generations and a solution has 5 hidden nodes=\r\n=85\n&gt;\n&gt; I tried to change my implementation to make it look more like the\n&gt;=\r\n Stanley&#39;s neat 1.1 (reproduction and delta coding). In his article\n&gt; &quot;Evol=\r\nving Neural Networks through Augmenting Topologies&quot; he said that NEAT\n&gt; can=\r\n solde the XOR problem 100% of the time, in an average of 32 generations\n&gt; =\r\nand 2,35 hidden nodes=85 but even with the modifications the results of my\n=\r\n&gt; program are always disappointing (100% solution found in an average of 13=\r\n0\n&gt; generation and with 5 hidden neurons)=85\n&gt;\n&gt; Buckland uses parameters q=\r\nuite different from those of Stanley especially\n&gt; concerning the penalizati=\r\non or bonus awarded to the species :\n&gt; iYoungBonusAgeThreshhold =3D&gt; 10\n&gt; d=\r\nYoungFitnessBonus =3D&gt; Stanley 1.0 - Buckland 1.3\n&gt; iOldAgeThreshold =3D&gt; S=\r\ntanley 15 - Buckland 50\n&gt; dOldAgePenalty =3D&gt; Stanley 0.01 - Buckland 0.7\n&gt;=\r\n I tested both sets of parameters without any significant difference in the=\r\n\n&gt; average result for the 1000 tests.\n&gt;\n&gt; I tried different variations in r=\r\neproductive functions, speciation,\n&gt; mutation ... but without more success.=\r\n\n&gt;\n&gt; When I look at my log file, I realize that the best species (or best\n&gt;=\r\n genome) dies regularly. Sometimes the best species doesn&#39;t evolve for some=\r\n\n&gt; generation and is fatally penalized. The best species doesn&#39;t reproduce =\r\nand\n&gt; then the best fitness disappears=85\n&gt;\n&gt; My goal is to use NEAT to eva=\r\nluate the final positions of games in General\n&gt; Game Playing. If NEAT can p=\r\nredict the score, then I hope to be able to use\n&gt; the network generated to =\r\nevaluate non-terminal positions. But for the\n&gt; moment, I do not manage to a=\r\nchieve satisfactory results with the simple XOR\n&gt; problem and I do not know=\r\n what could be the problem. Do you have any advice\n&gt; or tips?\n&gt;\n&gt; Best rega=\r\nrds,\n&gt; Aline Huf.\n&gt;\n&gt;  \n&gt;\n\r\n--089e010d8a02ef1f6404e242e7ec\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;Aline,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I used a NEAT implementation bas=\r\ned off of Buckland&#39;s in school as well. Mine is still C++/object orient=\r\ned, but I remember I spent a good amount of time polishing up some bugs in =\r\nthe Buckland implementation. I&#39;d dig into your problem more, except I&#=\r\n39;m completely overwhelmed at work currently.=A0&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;di=\r\nv&gt;I&#39;ve attached a copy of my source code. Maybe if you compare my neat =\r\ncode changes compared to Buckland&#39;s original you can find some fixes th=\r\nat might help. The neat implementation is in the competitiveCoevolution dir=\r\nectory, and is in the following files:&lt;/div&gt;\n\n&lt;div&gt;Cga.cpp&lt;/div&gt;&lt;div&gt;CInnov=\r\nation.cpp&lt;/div&gt;&lt;div&gt;CSpecies.cpp&lt;/div&gt;&lt;div&gt;genotype.cpp&lt;/div&gt;&lt;div&gt;phenotype=\r\n.cpp&lt;/div&gt;&lt;div&gt;and associated .h files.=A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It neve=\r\nr proved to be a great implementation, but it definitely worked. There&#39;=\r\ns a built in XOR test too if you grep for that. This is Linux code, but I d=\r\non&#39;t think it would be too difficult to get working in windows if that&=\r\n#39;s what you&#39;re using.=A0&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let me know if y=\r\nou have any questions about the code, and I&#39;ll try to remember how it w=\r\norked :)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Good luck.=A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;-Drew=A0&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;\n\n&lt;br&gt;&lt;br&gt;&lt;div =\r\nclass=3D&quot;gmail_quote&quot;&gt;On Wed, Jul 24, 2013 at 10:27 AM, alinehuf2 &lt;span dir=\r\n=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:alinehuf2@...&quot; target=3D&quot;_blank&quot;&gt;aline=\r\nhuf2@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; s=\r\ntyle=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n=\r\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;=\r\n\n      \n      \n      &lt;p&gt;Hello all,&lt;br&gt;\n&lt;br&gt;\nI&#39;m a french student at Par=\r\nis university (sorry for my &quot;broken&quot; English).&lt;br&gt;\nI&#39;m doing =\r\nmy first steps with NEAT and I encounter some difficulties. I have read the=\r\n FAQ on this web page : &lt;a href=3D&quot;http://www.cs.ucf.edu/~kstanley/neat.htm=\r\nl&quot; target=3D&quot;_blank&quot;&gt;http://www.cs.ucf.edu/~kstanley/neat.html&lt;/a&gt; but I ha=\r\nve not found answers to my problems.&lt;br&gt;\n\n\nI converted the Buckland impleme=\r\nntation from C++ to C (I am not comfortable with C++) : &lt;a href=3D&quot;https://=\r\ngithub.com/alinehuf/neattest.&quot; target=3D&quot;_blank&quot;&gt;https://github.com/alinehu=\r\nf/neattest.&lt;/a&gt; &lt;br&gt;\nI tried the XOR test as decribed by Stanley in &quot;E=\r\nvolving Neural Networks through Augmenting Topologies&quot;, but I had a re=\r\nally poor result. My program found a solution 981 times out of 1000 tests (=\r\n98%) and it tooks an average of 184 generations and a solution has 5 hidden=\r\n nodes=85&lt;br&gt;\n\n\n&lt;br&gt;\nI tried to change my implementation to make it look mo=\r\nre like the Stanley&#39;s neat 1.1 (reproduction and delta coding). In his =\r\narticle &quot;Evolving Neural Networks through Augmenting Topologies&quot; =\r\nhe said that NEAT can solde the XOR problem 100% of the time, in an average=\r\n of 32 generations and 2,35 hidden nodes=85 but even with the modifications=\r\n the results of my program are always disappointing (100% solution found in=\r\n an average of 130 generation and with 5 hidden neurons)=85 &lt;br&gt;\n\n\n&lt;br&gt;\nBuc=\r\nkland uses parameters quite different from those of Stanley especially conc=\r\nerning the penalization or bonus awarded to the species :&lt;br&gt;\niYoungBonusAg=\r\neThreshhold =3D&gt; 10&lt;br&gt;\ndYoungFitnessBonus =3D&gt; Stanley 1.0  - Buckla=\r\nnd 1.3&lt;br&gt;\niOldAgeThreshold =3D&gt; Stanley 15   - Buckland 50&lt;br&gt;\ndOldAgeP=\r\nenalty =3D&gt; Stanley 0.01 - Buckland 0.7&lt;br&gt;\nI tested both sets of parame=\r\nters without any significant difference in the average result for the 1000 =\r\ntests.&lt;br&gt;\n&lt;br&gt;\nI tried different variations in reproductive functions, spe=\r\nciation, mutation ... but without more success.&lt;br&gt;\n&lt;br&gt;\nWhen I look at my =\r\nlog file, I realize that the best species (or best genome) dies regularly. =\r\nSometimes the best species doesn&#39;t evolve for some generation and is fa=\r\ntally penalized. The best species doesn&#39;t reproduce and then the best f=\r\nitness disappears=85&lt;br&gt;\n\n\n&lt;br&gt;\nMy goal is to use NEAT to evaluate the fina=\r\nl positions of games in General Game Playing. If NEAT can predict the score=\r\n, then I hope to be able to use the network generated to evaluate non-termi=\r\nnal positions. But for the moment, I do not manage to achieve satisfactory =\r\nresults with the simple XOR problem and I do not know what could be the pro=\r\nblem. Do you have any advice or tips?&lt;br&gt;\n\n\n&lt;br&gt;\nBest regards,&lt;br&gt;\nAline Hu=\r\nf.&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-h=\r\neight:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--089e010d8a02ef1f6404e242e7ec--\r\n\n\r\n--089e010d8a02ef1f6904e242e7ee\r\nContent-Type: application/x-bzip2; \n\tname=&quot;noveltySearchCompetitiveCoev.tar.bz2&quot;\r\nContent-Disposition: attachment; \n\tfilename=&quot;noveltySearchCompetitiveCoev.tar.bz2&quot;\r\nX-Attachment-Id: f_hjimxrtu0\r\n\r\n[ Attachment content not displayed ]\r\n--089e010d8a02ef1f6904e242e7ee--\r\n\n"}}