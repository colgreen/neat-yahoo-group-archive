{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"nAV5gJbkYVu1yrBN1T8SJckq0QtfihjIAt5xr5VFBNYxWoYM_Ed-rGMfXDrlJAX94jrxBAWEyeVDTEh7wMnuDmmh-uTMPDjU3p8YCLLdRkxp","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Single pole and robotic arm","postDate":"1190000377","msgId":3557,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGZja3N0cCtkOWNtQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMDcwOTEzLjE4MDQ0My42ODY3MDU2NC5qZWFuLWJhcHRpc3RlLm1vdXJldEBsaXA2LmZyPg=="},"prevInTopic":3554,"nextInTopic":3559,"prevInTime":3556,"nextInTime":3558,"topicId":3554,"numMessagesInTopic":7,"msgSnippet":"... need ... fitness as ... spent ... and ... benchmark ... Have you tried using p2nv.ne (the non-Markovian parameters) instead of pole2_markov?  Perhaps they","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 41848 invoked from network); 17 Sep 2007 03:41:57 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m49.grp.scd.yahoo.com with QMQP; 17 Sep 2007 03:41:57 -0000\r\nReceived: from unknown (HELO n7b.bullet.sp1.yahoo.com) (69.147.64.166)\n  by mta11.grp.scd.yahoo.com with SMTP; 17 Sep 2007 03:41:57 -0000\r\nReceived: from [216.252.122.216] by n7.bullet.sp1.yahoo.com with NNFMP; 17 Sep 2007 03:39:39 -0000\r\nReceived: from [66.218.69.1] by t1.bullet.sp1.yahoo.com with NNFMP; 17 Sep 2007 03:39:39 -0000\r\nReceived: from [66.218.66.92] by t1.bullet.scd.yahoo.com with NNFMP; 17 Sep 2007 03:39:39 -0000\r\nDate: Mon, 17 Sep 2007 03:39:37 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;fckstp+d9cm@...&gt;\r\nIn-Reply-To: &lt;20070913.180443.68670564.jean-baptiste.mouret@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: Single pole and robotic arm\r\nX-Yahoo-Group-Post: member; u=54567749; y=m3YtHbyq5m6m8HYec6mlvzzTbdhnmPKYggsz5b6QsHmwb97jSnTZ\r\nX-Yahoo-Profile: kenstanley01\r\n\r\n--- In neat@yahoogroups.com, Jean-Baptiste Mouret / Mandor \n&lt;mandor@...&gt; wr=\r\note:\n&gt;\n&gt; \t\tHi Neat-users,\n&gt; \n&gt; I&#39;m starting to evaluate NEAT for simple rob=\r\notics problems and I \nneed\n&gt; your advices to be sure to use the correct sta=\r\nrting networks and\n&gt; parameters. I work on two simple problems: single pole=\r\n balancing\n&gt; (non-markovian) and simple 3-DOF robotic arm control.\n&gt; \n&gt; 1. =\r\nSingle pole balancing\n&gt; \n&gt; I try to obtain good controllers for a single no=\r\nn-markovian\n&gt; pole-balancing task. I used the NEAT c++ code and modified th=\r\ne \nfitness as\n&gt; follows (to match Doncieux&#39;s work with ModNet, see :\n&gt; http=\r\n://animatlab.lip6.fr/papers/DoncieuxMeyer_IJCIS05.ps.gz ) :\n&gt; \n&gt; - the mean=\r\n normalized error for the angle theta and the position\n&gt; x during the durat=\r\nion T:  \n&gt; e_&#92;theta(g) =3D &#92;frac{1}{T} &#92;sum_{t=3D1}^{T} e_&#92;theta(t, g)\n&gt; e_=\r\nx(g) =3D &#92;frac{1}{T} &#92;sum_{t=3D1}^{T} e_x(t, g)\n&gt; where e_&#92;theta(t, g) and =\r\ne_x(t, g) denote the normalized errors\n&gt; at step t.\n&gt; \n&gt; - The fitness is t=\r\nhe sum of two terms, a decimal and an integer \none: \n&gt; f(g) =3D e(g) + &#92;fra=\r\nc{1}{2} ((1 - e_&#92;theta(g)) + (1 - e_x(g)))\n&gt; where p(g) denotes the percent=\r\nage of evaluation time the pendulum \nspent\n&gt; before going out of the bounda=\r\nries (+/- 0.2 rad and +- 2 m).\n&gt; \n&gt; I used pole2_markov.ne as a config file=\r\n and the following network:\n&gt; genomestart 1\n&gt; trait 1 0.1 0 0 0 0 0 0 0\n&gt; n=\r\node 1 0 1 3\n&gt; node 2 0 1 1\n&gt; node 3 0 1 1\n&gt; node 4 0 0 2\n&gt; gene 1 1 4 0.0 0=\r\n 1 0 1\n&gt; gene 1 2 4 0.0 0 2 0 1\n&gt; gene 1 3 4 0.0 0 3 0 1\n&gt; genomeend 1\n&gt; \n&gt;=\r\n Basically, there is two inputs and one output. I tried with and\n&gt; without =\r\nbias.\n&gt; \n&gt; =3D&gt; I get fitness values of about 100.85 whereas a PD controlle=\r\nr get\n&gt; 100.96, a P controller 100.75 and ModNet controllers between 100.8 =\r\n\nand\n&gt; 100.92. This difference is significant since slight oscillations\n&gt; r=\r\nemain at 100.8.\n&gt; -&gt; how could I improve these results ? Does someone has s=\r\nome \nbenchmark\n&gt; results on this classical problem ?\n&gt; \n\nHave you tried usi=\r\nng p2nv.ne (the non-Markovian parameters) instead \nof pole2_markov?  Perhap=\r\ns they would do better.  Perhaps a smaller \nmut_weight_power (weight mutati=\r\non power) would help too, since you \nare concerned very small oscillations =\r\nthat may be hard to damp \nwithout our very fine-grained weight adjustments.=\r\n\n\n&gt; 2. Robotic arm \n&gt; \n&gt; I used a simple 3-DOF (in a plane) simulated robot=\r\nic arm, the \nevolved\n&gt; neural networks have to drive each motor to a target=\r\n position T =3D \n(a1,\n&gt; a2, a3) by knowing only T and its current position =\r\nP =3D (b1, b2,\n&gt; b3). The difficulty lies in the difference computation (th=\r\ne\n&gt; controllers have to compute (a_i - b_i) * P, where P is a \nproportional=\r\n\n&gt; factor).\n&gt; \n&gt; Fitness is simply the normalized sum of errors for each DO=\r\nF.\n&gt; \n&gt; =3D&gt; I can&#39;t get any working controller using NEAT. What config fil=\r\ne \nand\n&gt; starting network do you suggest ?\n&gt; \n\nMaybe you can try simplifyin=\r\ng the problem until you get NEAT to work \nand then build up from there.  Fo=\r\nr example, create an arm with only \n1-DOF and see if it can simply swing to=\r\n the right position.  If it \ncannot, you can probably then discern what abo=\r\nut your setup is \nstopping it, since it is such a simple problem.\n\nken\n\n\n\n\n"}}