{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7192225,"authorName":"Ian Badcoe","from":"Ian Badcoe &lt;ian_badcoe@...&gt;","profile":"ian_badcoe","replyTo":"LIST","senderId":"TeviPIV53vX2dJke3VHtzZT2t63iBrHSWv-U8rbTDInesDaIuHLRK1JtglcEmiyvd8QT1SbJpMQW7F87p_tNx2aqy7g3xvXrPa0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [neat] Terminology - Genome/Phenome super system","postDate":"1133871442","msgId":2461,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMi4zLjQuMC4yMDA1MTIwNjExMTkyNi4wMzNiMmVlMEBwb3AubWFpbC55YWhvby5jby51az4=","inReplyToHeader":"PDQzOTRBOUY2LjgwMDA1MDZAZHNsLnBpcGV4LmNvbT4=","referencesHeader":"PDQzOTM2QUNCLjMwOTAxQGRzbC5waXBleC5jb20+IDw2LjIuMy40LjAuMjAwNTEyMDUxMTU2NTcuMDMzYWZjMzhAcG9wLm1haWwueWFob28uY28udWs+IDw0Mzk0QTlGNi44MDAwNTA2QGRzbC5waXBleC5jb20+"},"prevInTopic":2459,"nextInTopic":2463,"prevInTime":2460,"nextInTime":2462,"topicId":2451,"numMessagesInTopic":11,"msgSnippet":"Hi Colin,\n\n\tIt sounds to me that the only way in which different implementations \nof IGenome would be related is that they have to display a small set \nof","rawEmail":"Return-Path: &lt;ian_badcoe@...&gt;\r\nX-Sender: ian_badcoe@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 96860 invoked from network); 6 Dec 2005 12:15:25 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m35.grp.scd.yahoo.com with QMQP; 6 Dec 2005 12:15:25 -0000\r\nReceived: from unknown (HELO smtp004.mail.ukl.yahoo.com) (217.12.11.35)\n  by mta5.grp.scd.yahoo.com with SMTP; 6 Dec 2005 12:15:24 -0000\r\nReceived: (qmail 17685 invoked from network); 6 Dec 2005 12:14:59 -0000\r\nReceived: from unknown (HELO ian2k.yahoo.co.uk) (ian?badcoe@212.159.73.108 with login)\n  by smtp004.mail.ukl.yahoo.com with SMTP; 6 Dec 2005 12:14:59 -0000\r\nMessage-Id: &lt;6.2.3.4.0.20051206111926.033b2ee0@...&gt;\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.2.3.4\r\nDate: Tue, 06 Dec 2005 12:17:22 +0000\r\nTo: neat@yahoogroups.com\r\nIn-Reply-To: &lt;4394A9F6.8000506@...&gt;\r\nReferences: &lt;43936ACB.30901@...&gt;\n &lt;6.2.3.4.0.20051205115657.033afc38@...&gt;\n &lt;4394A9F6.8000506@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Ian Badcoe &lt;ian_badcoe@...&gt;\r\nSubject: Re: [neat] Terminology - Genome/Phenome super system\r\nX-Yahoo-Group-Post: member; u=7192225; y=gOf0ATvHcrE5sbTOcPs7k5cH2v2rF2GOJ0_dWVB_O055JiZ2sg\r\nX-Yahoo-Profile: ian_badcoe\r\n\r\nHi Colin,\n\n\tIt sounds to me that the only way in which different implementations \nof IGenome would be related is that they have to display a small set \nof standard functions for the evolution algorithm to operate \non.  Everything else about them is custom.\n\n\tSimilarly, the only relationship between different iPhenomes is that \nthe fitness function has to understand them, but since the fitness \nfunctions are custom anyway (needing to be written afresh for each \nproblem) that doesn&#39;t necessarily translate into any degree of \nrelatedness at all, with the exception of needing a common anonymous \npointer type for the algorithm to hand over to the fitness function.\n\n--\n\nOn this basis, if I were doing it in C++, my first thought would be templates:\n\ntemplate class NEAT&lt;typename GType, typename PType, typename FitnessType&gt; {\n...\n};\n\n\t- where FitnessType would be a pure abstract class that defined a \nstatic fitness function (you can pass functions as template \narguments, but it has a history of weirdness in some compilers so \nit&#39;s not my habit to do it).\n\n\tThe types used for GType and PType would be constrained only in \nneeded to exhibit certain public methods so that NEAT could operate \non it.  If you have multiple algorithms, and if they shared enough of \nthe way they were used, then NEAT could be inherited from an abstract \nbase class called something like &quot;Algorithm&quot;...\n\n\tI&#39;m not assuming that there is anything that particularly binds a \nPType to a GType, e.g. you could have a PType:\n\nclass PT_PlainNeuralNetwork {\n...\n};\n\n\tAnd two GTypes:\n\nclass GT_DirectEncoding {\n...\n\tpublic:\n\n\tPT_PlainNeuralNetwork *Decode() const;\n};\n\n\t- and:\n\nclass GT_IndirectEncoding {\n...\n\tpublic:\n\n\tPT_PlainNeuralNetwork *Decode() const;\n};\n\n\tWhen another GType might return a completely unrelated PType...\n\n\tOther methods in required in the GType would be to do mutation \n(possibly taking a standard MutationRates structure; or even a \ntemplated one), breeding etc...\n\nThus you would use this:\n\nclass FT_TravellingSalesmanJokeProblem {\n\tstatic float AbsFitness(const PT_PlainNeuralNet &phenome);\n//\tstatic float RelFitness(const PT_PlainNeuralNet &phenome1, const \nPT_PlainNeuralNet &phenome2);\t\t// not doing coevolution yet\n};\n\nin main() {\n\tNEAT&lt;GT_DirectEncoding, PT_PlainNeuralNet, \nFT_TravellingSalesmanJokeProblem&gt; MyNEAT(...);\n\tMyNeat.Generations(1000000000000);\n\n\t...\n\n\treturn 0;\n}\n\n--\n\n\tNow I think C# doesn&#39;t have templates?  So in that case it may be \nthat the best you can do is to have some abstract base classes for \nthe generic algorithms, and then cast them to the correct types in \nthe non-generic parts, thus:\n\nclass Genome {\npublic:\n\tvirtual ~Genome() {};\n\n\tvirtual Phenome *Decode() const = 0;\n\n\tvirtual Genome *Mutate(const MutateRates &mr) const = 0;\n\tvirtual Genome *BreedWith(const Genome *other) const = 0;\n};\n\nclass Phenome {\npublic:\n\tvirtual ~Phenome() {};\n\n\t// there&#39;s nothing here because it is all an implementation detail \nfor the fitness function\n};\n\nclass AbsFitness {\npublic:\n\tvirtual ~Fitness();\n\n\tvirtual float AbsFitness(const Phenome *phenome) const = 0;\n};\n\nThen you would derive your concrete classes from those.  The NEAT \nclass would now operate only on these abstract types, and you would \nhave to prime it with the correct types before you began (e.g. you&#39;d \ngive it the first genome and as all other genomes would be bread from \nthat one, they would all be the same type as it; all phenomes would \nbe created by genomes, and so whatever type it supported; and the \nfitness object you supply would have to understand that type of phenome).\n\nThen all you need is debug-only dynamic type-checking on the casts \nand off you go...\n\n--\n\n\tTemplates _might_ be better, anyone&#39;s guess really.\n\n\t[[The problem that I have had with generic schemes of this type in \nthe past, is that the algorithms that you try to crowbar into them \ndiffer just a little too much for there to much useful left in the \ngeneric framework.  For example, a single run of a search algorithm \nhas certain non-population parameters such as &quot;mutation rate&quot;, \n&quot;number of species&quot;, &quot;last file saved&quot;, &quot;champion individuals&quot; and \nwhat those parameters are differs algorithm to algorithm.  Now you \nare fine for somewhere to store them, e.g. the NEAT class itself, but \nwhat happens when some of the parameters are needed by a Genome (or \nPhenome), you either have to guess all the ones that will ever be and \npass them all to the method call in the Genome, or else hand over \nsome sort of abstract &quot;RunData&quot; struct, whose definition depends on \n_both_ the Genome and the Algorithm...\n\n\tI went through this six months ago when I started on SLEAT, and my \nultimate conclusion was &quot;this is a prototype, it won&#39;t be generic&quot; :) ]]\n\n\tDoes this help?  If not, hopefully I described enough of how I think \nthat you can explain what I missed...\n\n\tIan\n\n\nIn fifteen minutes, everybody will be in the future.\n\n\n\n\t\t\n___________________________________________________________ \nTo help you stay safe and secure online, we&#39;ve developed the all new Yahoo! Security Centre. http://uk.security.yahoo.com\r\n\n"}}