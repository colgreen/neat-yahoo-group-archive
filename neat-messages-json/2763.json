{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":54567749,"authorName":"Kenneth Stanley","from":"&quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;","profile":"kenstanley01","replyTo":"LIST","senderId":"mD8HSsmYODD2dU-l5XdLy46yWWnpi6pK7lX2sIN1Gjm5U-Ebeakk24WSsxf9UWC8BFtlOVLzzhSUAQOEyIy3yVCbvsO9xC-9VWJPKyQCJEwI","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Benchmark Suite","postDate":"1159080020","msgId":2763,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGVmNTk4ays1czVwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDQ1MTVCM0RGLjkwNTA3MDNAZHNsLnBpcGV4LmNvbT4="},"prevInTopic":2761,"nextInTopic":0,"prevInTime":2762,"nextInTime":2764,"topicId":2759,"numMessagesInTopic":4,"msgSnippet":"Derek, Colin suggested function approximation and I think that s a great suggestion.  I think the right suite of target functions is all you need to know","rawEmail":"Return-Path: &lt;kstanley@...&gt;\r\nX-Sender: kstanley@...\r\nX-Apparently-To: neat@yahoogroups.com\r\nReceived: (qmail 92618 invoked from network); 24 Sep 2006 06:40:28 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m28.grp.scd.yahoo.com with QMQP; 24 Sep 2006 06:40:28 -0000\r\nReceived: from unknown (HELO n14c.bullet.sc5.yahoo.com) (66.163.187.205)\n  by mta10.grp.scd.yahoo.com with SMTP; 24 Sep 2006 06:40:27 -0000\r\nReceived: from [66.163.187.122] by n14.bullet.sc5.yahoo.com with NNFMP; 24 Sep 2006 06:40:20 -0000\r\nReceived: from [66.218.66.59] by t3.bullet.sc5.yahoo.com with NNFMP; 24 Sep 2006 06:40:20 -0000\r\nReceived: from [66.218.66.83] by t8.bullet.scd.yahoo.com with NNFMP; 24 Sep 2006 06:40:20 -0000\r\nDate: Sun, 24 Sep 2006 06:40:20 -0000\r\nTo: neat@yahoogroups.com\r\nMessage-ID: &lt;ef598k+5s5p@...&gt;\r\nIn-Reply-To: &lt;4515B3DF.9050703@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0\r\nFrom: &quot;Kenneth Stanley&quot; &lt;kstanley@...&gt;\r\nSubject: Re: Benchmark Suite\r\nX-Yahoo-Group-Post: member; u=54567749; y=XQaVzqWdjqNDwz8T3i8HkoBb3wW2gLLKrGI-L7Vq1cSANWNCHXj1\r\nX-Yahoo-Profile: kenstanley01\r\n\r\nDerek, Colin suggested function approximation and I think that&#39;s a \ngreat s=\r\nuggestion.  I think the right suite of target functions is \nall you need to=\r\n know you&#39;ve got NEAT working well.  However, if your \ngoal is to show you =\r\ncan do some new kind of thing, like memory, then \nobviously this benchmark =\r\ndoesn&#39;t tell you much. \n\nBut if you mean benchmarks to compare your version=\r\n of NEAT to others \nas a way of validating baseline functionality, function=\r\n \napproximation is fast to implement, simple to test, easily portable, \nand=\r\n even easy to watch as evolution progress.  Mattias Fagerlund has \na great =\r\n&quot;symbolic regression&quot; demo that comes with his DelphiNEAT, \nwhich exemplifi=\r\nes what I&#39;m talking about.  In it, you can watch the \nnetwork approximation=\r\n of each champ change and deform and get closer \nand closer to the target f=\r\nunction.\n\nken\n\n--- In neat@yahoogroups.com, Colin Green &lt;cgreen@...&gt; wrote:=\r\n\n&gt;\n&gt; Hi Derek,\n&gt; \n&gt; The multiplexer experiments in sharpneat are probably a=\r\n good \nextension \n&gt; to the XOR problem, are easy to implement and quick to =\r\nrun. You \nmight \n&gt; also consider devising some simple experiments based on =\r\nmemory, \n&gt; recalling sequences of symbols that sort of thing. That should b=\r\ne \neasy \n&gt; implement and fast.\n&gt; \n&gt; Function regression is another that com=\r\nes to mind. You can use a \nrange \n&gt; of functions of varying complexity to v=\r\nary the problem difficulty. \nThe \n&gt; OneInputFunctionRegression experiment i=\r\nn sharpneat does this and \n&gt; contains a few different simple functions that=\r\n I tried.\n&gt; \n&gt; I think certian classes of problems are always going to be n=\r\none \ntrivial \n&gt; to implement and slow to run, e.g. control, game playing. I=\r\nt would \nbe \n&gt; nice to have some reference implementations and to define a =\r\n\nstandard \n&gt; score based on performance on a fixed set of problem domains. =\r\nAs \nnew \n&gt; domains are introduced we could just define a new standard that =\r\n\nincludes \n&gt; them.\n&gt; \n&gt; &gt;\n&gt; &gt;  It would be nice to\n&gt; &gt; have a spectrum of t=\r\nasks to test a new implementation or \nvariation out\n&gt; &gt; against, that you&#39;d=\r\n be able to run in an afternoon.\n&gt; \n&gt; \n&gt; Totally agree.\n&gt; \n&gt; Colin\n&gt;\n\n\n\n\n\n\n"}}